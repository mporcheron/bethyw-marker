>>> time ./bin/bethyw-test -s > all_tests_output.txt

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bethyw-test is a Catch v2.11.1 host application.
Run with -? for options

-------------------------------------------------------------------------------
Scenario: the datasets program argument can be parsed correctly
      Given: a --datasets program argument and value
       When: the value is an invalid dataset ('invalid')
       Then: a std::invalid_argument exception is thrown with the message 'No
             dataset matches key: invalid'
-------------------------------------------------------------------------------
./tests/test1.cpp:37
...............................................................................

./tests/test1.cpp:39: PASSED:
  REQUIRE_THROWS_AS( BethYw::parseDatasetsArg(args), std::invalid_argument )

./tests/test1.cpp:40: PASSED:
  REQUIRE_THROWS_WITH( BethYw::parseDatasetsArg(args), exceptionMessage )
with expansion:
  "No dataset matches key: invalid" equals: "No dataset matches key: invalid"

-------------------------------------------------------------------------------
Scenario: the datasets program argument can be parsed correctly
      Given: a --datasets program argument and value
       When: the value is a valid datase ('popden')
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test1.cpp:55
...............................................................................

./tests/test1.cpp:57: PASSED:
  REQUIRE_NOTHROW( BethYw::parseDatasetsArg(args) )

-------------------------------------------------------------------------------
Scenario: the datasets program argument can be parsed correctly
      Given: a --datasets program argument and value
       When: the value is a valid datase ('popden')
       Then: the argument value is parsed without exception
        And: the response is a container with 1 value
-------------------------------------------------------------------------------
./tests/test1.cpp:59
...............................................................................

./tests/test1.cpp:62: PASSED:
  REQUIRE( datasets.size() == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
Scenario: the datasets program argument can be parsed correctly
      Given: a --datasets program argument and value
       When: the value is a valid datase ('popden')
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test1.cpp:55
...............................................................................

./tests/test1.cpp:57: PASSED:
  REQUIRE_NOTHROW( BethYw::parseDatasetsArg(args) )

-------------------------------------------------------------------------------
Scenario: the datasets program argument can be parsed correctly
      Given: a --datasets program argument and value
       When: the value is a valid datase ('popden')
       Then: the argument value is parsed without exception
        And: the container contains InputFileSource objects
-------------------------------------------------------------------------------
./tests/test1.cpp:66
...............................................................................

./tests/test1.cpp:69: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<BethYw::InputFileSource&> (datasets.at(0)) )

-------------------------------------------------------------------------------
Scenario: the datasets program argument can be parsed correctly
      Given: a --datasets program argument and value
       When: the value is a valid datase ('popden')
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test1.cpp:55
...............................................................................

./tests/test1.cpp:57: PASSED:
  REQUIRE_NOTHROW( BethYw::parseDatasetsArg(args) )

-------------------------------------------------------------------------------
Scenario: the datasets program argument can be parsed correctly
      Given: a --datasets program argument and value
       When: the value is a valid datase ('popden')
       Then: the argument value is parsed without exception
        And: the correct InputFileSource instance is returned by numerical
             index
-------------------------------------------------------------------------------
./tests/test1.cpp:73
...............................................................................

./tests/test1.cpp:76: PASSED:
  REQUIRE( datasets.at(0).NAME == "Population density" )
with expansion:
  "Population density"
  ==
  "Population density"

-------------------------------------------------------------------------------
Scenario: the datasets program argument can be parsed correctly
      Given: a --datasets program argument and value
       When: the program argument value contains two valid datasets ('popden'
             and 'biz')
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test1.cpp:93
...............................................................................

./tests/test1.cpp:95: PASSED:
  REQUIRE_NOTHROW( BethYw::parseDatasetsArg(args) )

-------------------------------------------------------------------------------
Scenario: the datasets program argument can be parsed correctly
      Given: a --datasets program argument and value
       When: the program argument value contains two valid datasets ('popden'
             and 'biz')
       Then: the argument value is parsed without exception
        And: the response is a container with 2 values
-------------------------------------------------------------------------------
./tests/test1.cpp:97
...............................................................................

./tests/test1.cpp:100: PASSED:
  REQUIRE( datasets.size() == 2 )
with expansion:
  2 == 2

-------------------------------------------------------------------------------
Scenario: the datasets program argument can be parsed correctly
      Given: a --datasets program argument and value
       When: the program argument value contains two valid datasets ('popden'
             and 'biz')
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test1.cpp:93
...............................................................................

./tests/test1.cpp:95: PASSED:
  REQUIRE_NOTHROW( BethYw::parseDatasetsArg(args) )

-------------------------------------------------------------------------------
Scenario: the datasets program argument can be parsed correctly
      Given: a --datasets program argument and value
       When: the program argument value contains two valid datasets ('popden'
             and 'biz')
       Then: the argument value is parsed without exception
        And: the correct InputFileSource instances are returned by numerical
             index
-------------------------------------------------------------------------------
./tests/test1.cpp:104
...............................................................................

./tests/test1.cpp:107: PASSED:
  REQUIRE( datasets.at(0).NAME == "Population density" )
with expansion:
  "Population density"
  ==
  "Population density"

./tests/test1.cpp:108: PASSED:
  REQUIRE( datasets.at(1).NAME == "Active Businesses" )
with expansion:
  "Active Businesses" == "Active Businesses"

-------------------------------------------------------------------------------
Scenario: the datasets program argument can be parsed correctly
      Given: a --datasets program argument and value
       When: the program argument value contains one valid ('popden') and one
             invalid ('invalid') datasets
       Then: a std::invalid_argument exception is thrown with the message 'No
             dataset matches key: invalid'
-------------------------------------------------------------------------------
./tests/test1.cpp:127
...............................................................................

./tests/test1.cpp:129: PASSED:
  REQUIRE_THROWS_AS( BethYw::parseDatasetsArg(args), std::invalid_argument )

./tests/test1.cpp:130: PASSED:
  REQUIRE_THROWS_WITH( BethYw::parseDatasetsArg(args), exceptionMessage )
with expansion:
  "No dataset matches key: invalid" equals: "No dataset matches key: invalid"

-------------------------------------------------------------------------------
Scenario: the datasets program argument can be parsed correctly
      Given: a --datasets program argument and value
       When: the program argument value contains one valid ('popden') and a
             request for all datasets ('all')
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test1.cpp:147
...............................................................................

./tests/test1.cpp:149: PASSED:
  REQUIRE_NOTHROW( BethYw::parseDatasetsArg(args) )

-------------------------------------------------------------------------------
Scenario: the datasets program argument can be parsed correctly
      Given: a --datasets program argument and value
       When: the program argument value contains one valid ('popden') and a
             request for all datasets ('all')
       Then: the argument value is parsed without exception
        And: the response is a container with 7 values
-------------------------------------------------------------------------------
./tests/test1.cpp:151
...............................................................................

./tests/test1.cpp:154: PASSED:
  REQUIRE( datasets.size() == 7 )
with expansion:
  7 == 7

-------------------------------------------------------------------------------
Scenario: the datasets program argument can be parsed correctly
      Given: a --datasets program argument and value
       When: the program argument value contains one valid ('popden') and a
             request for all datasets ('all')
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test1.cpp:147
...............................................................................

./tests/test1.cpp:149: PASSED:
  REQUIRE_NOTHROW( BethYw::parseDatasetsArg(args) )

-------------------------------------------------------------------------------
Scenario: the datasets program argument can be parsed correctly
      Given: a --datasets program argument and value
       When: the program argument value contains one valid ('popden') and a
             request for all datasets ('all')
       Then: the argument value is parsed without exception
        And: the correct InputFileSource instances are returned by numerical
             index
-------------------------------------------------------------------------------
./tests/test1.cpp:158
...............................................................................

./tests/test1.cpp:161: PASSED:
  REQUIRE( datasets.at(0).NAME == "Population density" )
with expansion:
  "Population density"
  ==
  "Population density"

./tests/test1.cpp:162: PASSED:
  REQUIRE( datasets.at(1).NAME == "Active Businesses" )
with expansion:
  "Active Businesses" == "Active Businesses"

./tests/test1.cpp:163: PASSED:
  REQUIRE( datasets.at(2).NAME == "Air Quality Indicators" )
with expansion:
  "Air Quality Indicators"
  ==
  "Air Quality Indicators"

./tests/test1.cpp:164: PASSED:
  REQUIRE( datasets.at(3).NAME == "Rail passenger journeys" )
with expansion:
  "Rail passenger journeys"
  ==
  "Rail passenger journeys"

./tests/test1.cpp:165: PASSED:
  REQUIRE( datasets.at(4).NAME == "Population density" )
with expansion:
  "Population density"
  ==
  "Population density"

./tests/test1.cpp:166: PASSED:
  REQUIRE( datasets.at(5).NAME == "Population" )
with expansion:
  "Population" == "Population"

./tests/test1.cpp:167: PASSED:
  REQUIRE( datasets.at(6).NAME == "Land area" )
with expansion:
  "Land area" == "Land area"

-------------------------------------------------------------------------------
Scenario: the areas program argument can be parsed correctly
      Given: a --areas program argument and value
       When: the value is a single area ('W06000011')
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test2.cpp:35
...............................................................................

./tests/test2.cpp:37: PASSED:
  REQUIRE_NOTHROW( BethYw::parseAreasArg(args) )

-------------------------------------------------------------------------------
Scenario: the areas program argument can be parsed correctly
      Given: a --areas program argument and value
       When: the value is a single area ('W06000011')
       Then: the argument value is parsed without exception
        And: the response is a container with 1 value
-------------------------------------------------------------------------------
./tests/test2.cpp:39
...............................................................................

./tests/test2.cpp:42: PASSED:
  REQUIRE( areas.size() == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
Scenario: the areas program argument can be parsed correctly
      Given: a --areas program argument and value
       When: the value is a single area ('W06000011')
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test2.cpp:35
...............................................................................

./tests/test2.cpp:37: PASSED:
  REQUIRE_NOTHROW( BethYw::parseAreasArg(args) )

-------------------------------------------------------------------------------
Scenario: the areas program argument can be parsed correctly
      Given: a --areas program argument and value
       When: the value is a single area ('W06000011')
       Then: the argument value is parsed without exception
        And: the container contains the area in the program argument
-------------------------------------------------------------------------------
./tests/test2.cpp:46
...............................................................................

./tests/test2.cpp:49: PASSED:
  REQUIRE( areas.find("W06000011") != areas.end() )
with expansion:
  {?} != {?}

-------------------------------------------------------------------------------
Scenario: the areas program argument can be parsed correctly
      Given: a --areas program argument and value
       When: the value is multiple comma-separated areas ('W06000011',
             'W06000001')
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test2.cpp:66
...............................................................................

./tests/test2.cpp:68: PASSED:
  REQUIRE_NOTHROW( BethYw::parseAreasArg(args) )

-------------------------------------------------------------------------------
Scenario: the areas program argument can be parsed correctly
      Given: a --areas program argument and value
       When: the value is multiple comma-separated areas ('W06000011',
             'W06000001')
       Then: the argument value is parsed without exception
        And: the response is a container with 2 values
-------------------------------------------------------------------------------
./tests/test2.cpp:70
...............................................................................

./tests/test2.cpp:73: PASSED:
  REQUIRE( areas.size() == 2 )
with expansion:
  2 == 2

-------------------------------------------------------------------------------
Scenario: the areas program argument can be parsed correctly
      Given: a --areas program argument and value
       When: the value is multiple comma-separated areas ('W06000011',
             'W06000001')
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test2.cpp:66
...............................................................................

./tests/test2.cpp:68: PASSED:
  REQUIRE_NOTHROW( BethYw::parseAreasArg(args) )

-------------------------------------------------------------------------------
Scenario: the areas program argument can be parsed correctly
      Given: a --areas program argument and value
       When: the value is multiple comma-separated areas ('W06000011',
             'W06000001')
       Then: the argument value is parsed without exception
        And: the container contains the areas in the program argument
-------------------------------------------------------------------------------
./tests/test2.cpp:77
...............................................................................

./tests/test2.cpp:80: PASSED:
  REQUIRE( areas.find("W06000011") != areas.end() )
with expansion:
  {?} != {?}

./tests/test2.cpp:81: PASSED:
  REQUIRE( areas.find("W06000001") != areas.end() )
with expansion:
  {?} != {?}

-------------------------------------------------------------------------------
Scenario: the areas program argument can be parsed correctly
      Given: a --areas program argument and value
       When: the value is 'all'
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test2.cpp:98
...............................................................................

./tests/test2.cpp:100: PASSED:
  REQUIRE_NOTHROW( BethYw::parseAreasArg(args) )

-------------------------------------------------------------------------------
Scenario: the areas program argument can be parsed correctly
      Given: a --areas program argument and value
       When: the value is 'all'
       Then: the argument value is parsed without exception
        And: the response is a container with 0 values
-------------------------------------------------------------------------------
./tests/test2.cpp:102
...............................................................................

./tests/test2.cpp:105: PASSED:
  REQUIRE( areas.size() == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: the areas program argument can be parsed correctly
      Given: a --areas program argument and value
       When: the value contains 'all' among other values ('W06000011')
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test2.cpp:122
...............................................................................

./tests/test2.cpp:124: PASSED:
  REQUIRE_NOTHROW( BethYw::parseAreasArg(args) )

-------------------------------------------------------------------------------
Scenario: the areas program argument can be parsed correctly
      Given: a --areas program argument and value
       When: the value contains 'all' among other values ('W06000011')
       Then: the argument value is parsed without exception
        And: the response is a container with 0 values
-------------------------------------------------------------------------------
./tests/test2.cpp:126
...............................................................................

./tests/test2.cpp:129: PASSED:
  REQUIRE( areas.size() == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: the measures program argument can be parsed correctly
      Given: a --measures program argument and value
       When: the value is a single measure ('pop')
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test3.cpp:35
...............................................................................

./tests/test3.cpp:37: PASSED:
  REQUIRE_NOTHROW( BethYw::parseMeasuresArg(args) )

-------------------------------------------------------------------------------
Scenario: the measures program argument can be parsed correctly
      Given: a --measures program argument and value
       When: the value is a single measure ('pop')
       Then: the argument value is parsed without exception
        And: the response is a container with 1 value
-------------------------------------------------------------------------------
./tests/test3.cpp:39
...............................................................................

./tests/test3.cpp:42: PASSED:
  REQUIRE( measures.size() == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
Scenario: the measures program argument can be parsed correctly
      Given: a --measures program argument and value
       When: the value is a single measure ('pop')
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test3.cpp:35
...............................................................................

./tests/test3.cpp:37: PASSED:
  REQUIRE_NOTHROW( BethYw::parseMeasuresArg(args) )

-------------------------------------------------------------------------------
Scenario: the measures program argument can be parsed correctly
      Given: a --measures program argument and value
       When: the value is a single measure ('pop')
       Then: the argument value is parsed without exception
        And: the container contains the measure in the program argument
-------------------------------------------------------------------------------
./tests/test3.cpp:46
...............................................................................

./tests/test3.cpp:49: PASSED:
  REQUIRE( measures.find("pop") != measures.end() )
with expansion:
  {?} != {?}

-------------------------------------------------------------------------------
Scenario: the measures program argument can be parsed correctly
      Given: a --measures program argument and value
       When: the value is multiple comma-separated measures ('pop', 'dens')
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test3.cpp:66
...............................................................................

./tests/test3.cpp:68: PASSED:
  REQUIRE_NOTHROW( BethYw::parseMeasuresArg(args) )

-------------------------------------------------------------------------------
Scenario: the measures program argument can be parsed correctly
      Given: a --measures program argument and value
       When: the value is multiple comma-separated measures ('pop', 'dens')
       Then: the argument value is parsed without exception
        And: the response is a container with 2 values
-------------------------------------------------------------------------------
./tests/test3.cpp:70
...............................................................................

./tests/test3.cpp:73: PASSED:
  REQUIRE( measures.size() == 2 )
with expansion:
  2 == 2

-------------------------------------------------------------------------------
Scenario: the measures program argument can be parsed correctly
      Given: a --measures program argument and value
       When: the value is multiple comma-separated measures ('pop', 'dens')
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test3.cpp:66
...............................................................................

./tests/test3.cpp:68: PASSED:
  REQUIRE_NOTHROW( BethYw::parseMeasuresArg(args) )

-------------------------------------------------------------------------------
Scenario: the measures program argument can be parsed correctly
      Given: a --measures program argument and value
       When: the value is multiple comma-separated measures ('pop', 'dens')
       Then: the argument value is parsed without exception
        And: the container contains the measures in the program argument
-------------------------------------------------------------------------------
./tests/test3.cpp:77
...............................................................................

./tests/test3.cpp:80: PASSED:
  REQUIRE( measures.find("pop") != measures.end() )
with expansion:
  {?} != {?}

./tests/test3.cpp:81: PASSED:
  REQUIRE( measures.find("dens") != measures.end() )
with expansion:
  {?} != {?}

-------------------------------------------------------------------------------
Scenario: the measures program argument can be parsed correctly
      Given: a --measures program argument and value
       When: the value is 'all'
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test3.cpp:98
...............................................................................

./tests/test3.cpp:100: PASSED:
  REQUIRE_NOTHROW( BethYw::parseMeasuresArg(args) )

-------------------------------------------------------------------------------
Scenario: the measures program argument can be parsed correctly
      Given: a --measures program argument and value
       When: the value is 'all'
       Then: the argument value is parsed without exception
        And: the response is a container with 0 values
-------------------------------------------------------------------------------
./tests/test3.cpp:102
...............................................................................

./tests/test3.cpp:105: PASSED:
  REQUIRE( measures.size() == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: the measures program argument can be parsed correctly
      Given: a --measures program argument and value
       When: the value contains 'all' among other values ('dens')
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test3.cpp:122
...............................................................................

./tests/test3.cpp:124: PASSED:
  REQUIRE_NOTHROW( BethYw::parseMeasuresArg(args) )

-------------------------------------------------------------------------------
Scenario: the measures program argument can be parsed correctly
      Given: a --measures program argument and value
       When: the value contains 'all' among other values ('dens')
       Then: the argument value is parsed without exception
        And: the response is a container with 0 values
-------------------------------------------------------------------------------
./tests/test3.cpp:126
...............................................................................

./tests/test3.cpp:129: PASSED:
  REQUIRE( measures.size() == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: the years program argument can be parsed correctly
      Given: a --years argument with a value
       When: the value is a single four-digit year ('2010')
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test4.cpp:35
...............................................................................

./tests/test4.cpp:37: PASSED:
  REQUIRE_NOTHROW( BethYw::parseYearsArg(args) )

-------------------------------------------------------------------------------
Scenario: the years program argument can be parsed correctly
      Given: a --years argument with a value
       When: the value is a single four-digit year ('2010')
       Then: the argument value is parsed without exception
        And: the response is a two-pair tuple where both values are equal to
             the argument value
-------------------------------------------------------------------------------
./tests/test4.cpp:39
...............................................................................

./tests/test4.cpp:42: PASSED:
  REQUIRE( std::get<0>(years) == 2010 )
with expansion:
  2010 (0x7da) == 2010 (0x7da)

./tests/test4.cpp:43: PASSED:
  REQUIRE( std::get<1>(years) == 2010 )
with expansion:
  2010 (0x7da) == 2010 (0x7da)

-------------------------------------------------------------------------------
Scenario: the years program argument can be parsed correctly
      Given: a --years argument with a value
       When: the value is nill ('0')
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test4.cpp:60
...............................................................................

./tests/test4.cpp:62: PASSED:
  REQUIRE_NOTHROW( BethYw::parseYearsArg(args) )

-------------------------------------------------------------------------------
Scenario: the years program argument can be parsed correctly
      Given: a --years argument with a value
       When: the value is nill ('0')
       Then: the argument value is parsed without exception
        And: the response is a two-pair tuple where both values are equal to 0
-------------------------------------------------------------------------------
./tests/test4.cpp:64
...............................................................................

./tests/test4.cpp:67: PASSED:
  REQUIRE( std::get<0>(years) == 0 )
with expansion:
  0 == 0

./tests/test4.cpp:68: PASSED:
  REQUIRE( std::get<1>(years) == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: the years program argument can be parsed correctly
      Given: a --years argument with a value
       When: the value is nill ('0-0')
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test4.cpp:85
...............................................................................

./tests/test4.cpp:87: PASSED:
  REQUIRE_NOTHROW( BethYw::parseYearsArg(args) )

-------------------------------------------------------------------------------
Scenario: the years program argument can be parsed correctly
      Given: a --years argument with a value
       When: the value is nill ('0-0')
       Then: the argument value is parsed without exception
        And: the response is a two-pair tuple where both values are equal to 0
-------------------------------------------------------------------------------
./tests/test4.cpp:89
...............................................................................

./tests/test4.cpp:92: PASSED:
  REQUIRE( std::get<0>(years) == 0 )
with expansion:
  0 == 0

./tests/test4.cpp:93: PASSED:
  REQUIRE( std::get<1>(years) == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: the years program argument can be parsed correctly
      Given: a --years argument with a value
       When: the value is two four-digit years as a range ('2010-2015')
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test4.cpp:110
...............................................................................

./tests/test4.cpp:112: PASSED:
  REQUIRE_NOTHROW( BethYw::parseYearsArg(args) )

-------------------------------------------------------------------------------
Scenario: the years program argument can be parsed correctly
      Given: a --years argument with a value
       When: the value is two four-digit years as a range ('2010-2015')
       Then: the argument value is parsed without exception
        And: the response is a two-pair tuple where the values are 2010 and
             2015 respectively
-------------------------------------------------------------------------------
./tests/test4.cpp:114
...............................................................................

./tests/test4.cpp:117: PASSED:
  REQUIRE( std::get<0>(years) == 2010 )
with expansion:
  2010 (0x7da) == 2010 (0x7da)

./tests/test4.cpp:118: PASSED:
  REQUIRE( std::get<1>(years) == 2015 )
with expansion:
  2015 (0x7df) == 2015 (0x7df)

-------------------------------------------------------------------------------
Scenario: the years program argument can be parsed correctly
      Given: a --years argument with a value
       When: the value is not a number ('qwerty')
       Then: a std::invalid_argument exception is thrown with the message
             'Invalid input for years argument'
-------------------------------------------------------------------------------
./tests/test4.cpp:137
...............................................................................

./tests/test4.cpp:139: PASSED:
  REQUIRE_THROWS_AS( BethYw::parseYearsArg(args), std::invalid_argument )

./tests/test4.cpp:140: PASSED:
  REQUIRE_THROWS_WITH( BethYw::parseYearsArg(args), exceptionMessage )
with expansion:
  "Invalid input for years argument" equals: "Invalid input for years argument"

-------------------------------------------------------------------------------
Scenario: the years program argument can be parsed correctly
      Given: a --years argument with a value
       When: the value is partially numeric ('2010-qwerty')
       Then: a std::invalid_argument exception is thrown with the message
             'Invalid input for years argument'
-------------------------------------------------------------------------------
./tests/test4.cpp:157
...............................................................................

./tests/test4.cpp:159: PASSED:
  REQUIRE_THROWS_AS( BethYw::parseYearsArg(args), std::invalid_argument )

./tests/test4.cpp:160: PASSED:
  REQUIRE_THROWS_WITH( BethYw::parseYearsArg(args), exceptionMessage )
with expansion:
  "Invalid input for years argument" equals: "Invalid input for years argument"

-------------------------------------------------------------------------------
Scenario: the years program argument can be parsed correctly
      Given: a --years argument with a value
       When: the value is the string all ('all')
       Then: the argument value is parsed without exception
-------------------------------------------------------------------------------
./tests/test4.cpp:177
...............................................................................

./tests/test4.cpp:179: PASSED:
  REQUIRE_NOTHROW( BethYw::parseYearsArg(args) )

-------------------------------------------------------------------------------
Scenario: the years program argument can be parsed correctly
      Given: a --years argument with a value
       When: the value is the string all ('all')
       Then: the argument value is parsed without exception
        And: the response is a two-pair tuple where both values are equal to 0
-------------------------------------------------------------------------------
./tests/test4.cpp:181
...............................................................................

./tests/test4.cpp:184: PASSED:
  REQUIRE( std::get<0>(years) == 0 )
with expansion:
  0 == 0

./tests/test4.cpp:185: PASSED:
  REQUIRE( std::get<1>(years) == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: the years program argument can be parsed correctly
      Given: a --years argument with a value
       When: the value starts with a hyphen ('-2010')
       Then: a std::invalid_argument exception is thrown with the message
             'Invalid input for years argument'
-------------------------------------------------------------------------------
./tests/test4.cpp:204
...............................................................................

./tests/test4.cpp:206: PASSED:
  REQUIRE_THROWS_AS( BethYw::parseYearsArg(args), std::invalid_argument )

./tests/test4.cpp:207: PASSED:
  REQUIRE_THROWS_WITH( BethYw::parseYearsArg(args), exceptionMessage )
with expansion:
  "Invalid input for years argument" equals: "Invalid input for years argument"

-------------------------------------------------------------------------------
Scenario: the years program argument can be parsed correctly
      Given: a --years argument with a value
       When: the value ends with a hyphen ('2010-')
       Then: a std::invalid_argument exception is thrown with the message
             'Invalid input for years argument'
-------------------------------------------------------------------------------
./tests/test4.cpp:224
...............................................................................

./tests/test4.cpp:226: PASSED:
  REQUIRE_THROWS_AS( BethYw::parseYearsArg(args), std::invalid_argument )

./tests/test4.cpp:227: PASSED:
  REQUIRE_THROWS_WITH( BethYw::parseYearsArg(args), exceptionMessage )
with expansion:
  "Invalid input for years argument" equals: "Invalid input for years argument"

-------------------------------------------------------------------------------
Scenario: the years program argument can be parsed correctly
      Given: a --years argument with a value
       When: the value contains more than a single hyphen ('2010--2015')
       Then: a std::invalid_argument exception is thrown with the message
             'Invalid input for years argument'
-------------------------------------------------------------------------------
./tests/test4.cpp:244
...............................................................................

./tests/test4.cpp:246: PASSED:
  REQUIRE_THROWS_AS( BethYw::parseYearsArg(args), std::invalid_argument )

./tests/test4.cpp:247: PASSED:
  REQUIRE_THROWS_WITH( BethYw::parseYearsArg(args), exceptionMessage )
with expansion:
  "Invalid input for years argument" equals: "Invalid input for years argument"

-------------------------------------------------------------------------------
Scenario: a source file can be opened and read
-------------------------------------------------------------------------------
./tests/test5.cpp:18
...............................................................................

./tests/test5.cpp:26: PASSED:
  REQUIRE( file_exists(test_file) )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: a source file can be opened and read
      Given: a valid file path
       Then: an InputFile instance can be constructed
-------------------------------------------------------------------------------
./tests/test5.cpp:30
...............................................................................

./tests/test5.cpp:32: PASSED:
  REQUIRE_NOTHROW( InputFile(test_file) )

-------------------------------------------------------------------------------
Scenario: a source file can be opened and read
-------------------------------------------------------------------------------
./tests/test5.cpp:18
...............................................................................

./tests/test5.cpp:26: PASSED:
  REQUIRE( file_exists(test_file) )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: a source file can be opened and read
      Given: a constructed InputFile instance
       Then: the source value can be retrieved
-------------------------------------------------------------------------------
./tests/test5.cpp:42
...............................................................................

./tests/test5.cpp:44: PASSED:
  REQUIRE( input.getSource() == test_file )
with expansion:
  "datasets/areas.csv"
  ==
  "datasets/areas.csv"

-------------------------------------------------------------------------------
Scenario: a source file can be opened and read
-------------------------------------------------------------------------------
./tests/test5.cpp:18
...............................................................................

./tests/test5.cpp:26: PASSED:
  REQUIRE( file_exists(test_file) )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: a source file can be opened and read
      Given: a constructed InputFile instance
       Then: a stream to source file can be opened without exception
-------------------------------------------------------------------------------
./tests/test5.cpp:48
...............................................................................

./tests/test5.cpp:50: PASSED:
  REQUIRE_NOTHROW( input.open() )

./tests/test5.cpp:51: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<std::istream&> (input.open()) )

-------------------------------------------------------------------------------
Scenario: a source file can be opened and read
      Given: a constructed InputFile instance
       Then: a stream to source file can be opened without exception
        And: the stream remains open after open() returns
-------------------------------------------------------------------------------
./tests/test5.cpp:53
...............................................................................

./tests/test5.cpp:57: PASSED:
  REQUIRE_NOTHROW( stream.seekg(1, stream.beg) )

./tests/test5.cpp:58: PASSED:
  REQUIRE_FALSE( stream.eof() )
with expansion:
  !false

./tests/test5.cpp:59: PASSED:
  REQUIRE_NOTHROW( stream.seekg(0, stream.beg) )

-------------------------------------------------------------------------------
Scenario: a nonexistant source file cannot be opened for reading
-------------------------------------------------------------------------------
./tests/test5.cpp:69
...............................................................................

./tests/test5.cpp:77: PASSED:
  REQUIRE_FALSE( file_exists(test_file) )
with expansion:
  !false

-------------------------------------------------------------------------------
Scenario: a nonexistant source file cannot be opened for reading
      Given: a valid file path
       Then: an InputFile instance can be constructed
-------------------------------------------------------------------------------
./tests/test5.cpp:81
...............................................................................

./tests/test5.cpp:83: PASSED:
  REQUIRE_NOTHROW( InputFile(test_file) )

-------------------------------------------------------------------------------
Scenario: a nonexistant source file cannot be opened for reading
-------------------------------------------------------------------------------
./tests/test5.cpp:69
...............................................................................

./tests/test5.cpp:77: PASSED:
  REQUIRE_FALSE( file_exists(test_file) )
with expansion:
  !false

-------------------------------------------------------------------------------
Scenario: a nonexistant source file cannot be opened for reading
      Given: a constructed InputFile instance
       Then: the source value can be retrieved
-------------------------------------------------------------------------------
./tests/test5.cpp:93
...............................................................................

./tests/test5.cpp:95: PASSED:
  REQUIRE( input.getSource() == test_file )
with expansion:
  "datasets/jibberish.json"
  ==
  "datasets/jibberish.json"

-------------------------------------------------------------------------------
Scenario: a nonexistant source file cannot be opened for reading
      Given: a constructed InputFile instance
       Then: the source value can be retrieved
        And: when the source file is attempted to be read, a std::runtime_error
             is thrown with message InputFile::open: Failed to open file
             datasets/jibberish.json
-------------------------------------------------------------------------------
./tests/test5.cpp:99
...............................................................................

./tests/test5.cpp:101: PASSED:
  REQUIRE_THROWS_AS( input.open(), std::runtime_error )

./tests/test5.cpp:102: PASSED:
  REQUIRE_THROWS_WITH( input.open(), exceptionMessage )
with expansion:
  "InputFile::open: Failed to open file datasets/jibberish.json" equals:
  "InputFile::open: Failed to open file datasets/jibberish.json"

-------------------------------------------------------------------------------
Scenario: a Measure object can be constructed with a codename and label
      Given: a codename and a label as std::string instances
       Then: a Measure instance can be constructed
-------------------------------------------------------------------------------
./tests/test6.cpp:26
...............................................................................

./tests/test6.cpp:28: PASSED:
  REQUIRE_NOTHROW( Measure(codename, label) )

-------------------------------------------------------------------------------
Scenario: a Measure object can be constructed with a codename and label
      Given: a newly constructed Measure instance with a codename and label
       Then: the codename can be retrieved
-------------------------------------------------------------------------------
./tests/test6.cpp:36
...............................................................................

./tests/test6.cpp:42: PASSED:
  REQUIRE( measure.getCodename() == codename )
with expansion:
  "pop" == "pop"

-------------------------------------------------------------------------------
Scenario: a Measure object can be constructed with a codename and label
      Given: a newly constructed Measure instance with a codename and label
       Then: the codename will be converted to lowercase
-------------------------------------------------------------------------------
./tests/test6.cpp:46
...............................................................................

./tests/test6.cpp:53: PASSED:
  REQUIRE_NOTHROW( measure.getCodename() == codenameLower )

-------------------------------------------------------------------------------
Scenario: a Measure object can be constructed with a codename and label
      Given: a newly constructed Measure instance with a codename and label
       Then: the label can be retreived
-------------------------------------------------------------------------------
./tests/test6.cpp:57
...............................................................................

./tests/test6.cpp:63: PASSED:
  REQUIRE_NOTHROW( measure.getLabel() == label )

-------------------------------------------------------------------------------
Scenario: a Measure object can be constructed with a codename and label
      Given: a newly constructed Measure instance with a codename and label
       Then: the instance has size 0
-------------------------------------------------------------------------------
./tests/test6.cpp:67
...............................................................................

./tests/test6.cpp:73: PASSED:
  REQUIRE_NOTHROW( measure.size() == 0 )

-------------------------------------------------------------------------------
Scenario: a Measure object can be populated with values
      Given: a newly constructed Measure instance
       When: there is a single year:value to insert
       Then: they will be emplaced without exception
-------------------------------------------------------------------------------
./tests/test7.cpp:32
...............................................................................

./tests/test7.cpp:34: PASSED:
  REQUIRE_NOTHROW( measure.setValue(year, value) )

-------------------------------------------------------------------------------
Scenario: a Measure object can be populated with values
      Given: a newly constructed Measure instance
       When: there is a single year:value to insert
       Then: they will be emplaced without exception
        And: the size will be 1
-------------------------------------------------------------------------------
./tests/test7.cpp:36
...............................................................................

./tests/test7.cpp:38: PASSED:
  REQUIRE( measure.size() == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
Scenario: a Measure object can be populated with values
      Given: a newly constructed Measure instance
       When: there is a single year:value to insert
       Then: they will be emplaced without exception
        And: the size will be 1
        And: the value can be retrieved
-------------------------------------------------------------------------------
./tests/test7.cpp:40
...............................................................................

./tests/test7.cpp:42: PASSED:
  REQUIRE( measure.getValue(year) == value )
with expansion:
  1000.0 == 1000.0

-------------------------------------------------------------------------------
Scenario: a Measure object can be populated with values
      Given: a newly constructed Measure instance
       When: there are two different year:value pairs to insert
       Then: they will both be emplaced without exception
-------------------------------------------------------------------------------
./tests/test7.cpp:59
...............................................................................

./tests/test7.cpp:61: PASSED:
  REQUIRE_NOTHROW( measure.setValue(year1, value1) )

./tests/test7.cpp:62: PASSED:
  REQUIRE_NOTHROW( measure.setValue(year2, value2) )

-------------------------------------------------------------------------------
Scenario: a Measure object can be populated with values
      Given: a newly constructed Measure instance
       When: there are two different year:value pairs to insert
       Then: they will both be emplaced without exception
        And: the size will be 2
-------------------------------------------------------------------------------
./tests/test7.cpp:64
...............................................................................

./tests/test7.cpp:66: PASSED:
  REQUIRE( measure.size() == 2 )
with expansion:
  2 == 2

-------------------------------------------------------------------------------
Scenario: a Measure object can be populated with values
      Given: a newly constructed Measure instance
       When: there are two different year:value pairs to insert
       Then: they will both be emplaced without exception
-------------------------------------------------------------------------------
./tests/test7.cpp:59
...............................................................................

./tests/test7.cpp:61: PASSED:
  REQUIRE_NOTHROW( measure.setValue(year1, value1) )

./tests/test7.cpp:62: PASSED:
  REQUIRE_NOTHROW( measure.setValue(year2, value2) )

-------------------------------------------------------------------------------
Scenario: a Measure object can be populated with values
      Given: a newly constructed Measure instance
       When: there are two different year:value pairs to insert
       Then: they will both be emplaced without exception
        And: both values can be retrieved
-------------------------------------------------------------------------------
./tests/test7.cpp:70
...............................................................................

./tests/test7.cpp:72: PASSED:
  REQUIRE( measure.getValue(year1) == value1 )
with expansion:
  1000.0 == 1000.0

./tests/test7.cpp:73: PASSED:
  REQUIRE( measure.getValue(year2) == value2 )
with expansion:
  2000.0 == 2000.0

-------------------------------------------------------------------------------
Scenario: a Measure object can be populated with values
      Given: a newly constructed Measure instance
       When: there are two year:value pairs to insert, both with the same year
       Then: they will both be emplaced without exception
-------------------------------------------------------------------------------
./tests/test7.cpp:88
...............................................................................

./tests/test7.cpp:90: PASSED:
  REQUIRE_NOTHROW( measure.setValue(year1, value1) )

./tests/test7.cpp:91: PASSED:
  REQUIRE_NOTHROW( measure.setValue(year2, value2) )

-------------------------------------------------------------------------------
Scenario: a Measure object can be populated with values
      Given: a newly constructed Measure instance
       When: there are two year:value pairs to insert, both with the same year
       Then: they will both be emplaced without exception
        And: the size will be 1
-------------------------------------------------------------------------------
./tests/test7.cpp:93
...............................................................................

./tests/test7.cpp:95: PASSED:
  REQUIRE( measure.size() == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
Scenario: a Measure object can be populated with values
      Given: a newly constructed Measure instance
       When: there are two year:value pairs to insert, both with the same year
       Then: they will both be emplaced without exception
-------------------------------------------------------------------------------
./tests/test7.cpp:88
...............................................................................

./tests/test7.cpp:90: PASSED:
  REQUIRE_NOTHROW( measure.setValue(year1, value1) )

./tests/test7.cpp:91: PASSED:
  REQUIRE_NOTHROW( measure.setValue(year2, value2) )

-------------------------------------------------------------------------------
Scenario: a Measure object can be populated with values
      Given: a newly constructed Measure instance
       When: there are two year:value pairs to insert, both with the same year
       Then: they will both be emplaced without exception
        And: the second value will have replaced the first value
-------------------------------------------------------------------------------
./tests/test7.cpp:99
...............................................................................

./tests/test7.cpp:101: PASSED:
  REQUIRE( measure.getValue(year2) == value2 )
with expansion:
  2000.0 == 2000.0

-------------------------------------------------------------------------------
Scenario: a Measure object can be populated with values
      Given: a newly constructed Measure instance
       When: there are no inserted values
       Then: the size will be 0
-------------------------------------------------------------------------------
./tests/test7.cpp:111
...............................................................................

./tests/test7.cpp:113: PASSED:
  REQUIRE( measure.size() == 0 )
with expansion:
  0 == 0

-------------------------------------------------------------------------------
Scenario: a Measure object can be populated with values
      Given: a newly constructed Measure instance
       When: there are no inserted values
       Then: the size will be 0
        And: a std::out_of_range exception will be thrown when you a value is
             requested for a given year
-------------------------------------------------------------------------------
./tests/test7.cpp:115
...............................................................................

./tests/test7.cpp:117: PASSED:
  REQUIRE_THROWS_AS( measure.getValue(1234), std::out_of_range )

-------------------------------------------------------------------------------
Scenario: an Area instance be constructed with a local authority code
      Given: a local authority code as a std::string
       Then: an Area instance can be constructed
-------------------------------------------------------------------------------
./tests/test8.cpp:24
...............................................................................

./tests/test8.cpp:26: PASSED:
  REQUIRE_NOTHROW( Area(localAuthorityCode) )

-------------------------------------------------------------------------------
Scenario: an Area instance can have names in multiple languages
      Given: a newly constructed Area instance
       Then: the local authority code can be retrieved
-------------------------------------------------------------------------------
./tests/test8.cpp:41
...............................................................................

./tests/test8.cpp:43: PASSED:
  REQUIRE( area.getLocalAuthorityCode() == localAuthorityCode )
with expansion:
  "W06000011" == "W06000011"

-------------------------------------------------------------------------------
Scenario: an Area instance can have names in multiple languages
      Given: a newly constructed Area instance
       Then: names in multiple languages can be set
-------------------------------------------------------------------------------
./tests/test8.cpp:47
...............................................................................

./tests/test8.cpp:52: PASSED:
  REQUIRE_NOTHROW( area.setName(langCode, name) )

./tests/test8.cpp:53: PASSED:
  REQUIRE( area.getName(langCode) == name )
with expansion:
  "Name in English" == "Name in English"

-------------------------------------------------------------------------------
Scenario: an Area instance can have names in multiple languages
      Given: a newly constructed Area instance
       Then: names in multiple languages can be set
-------------------------------------------------------------------------------
./tests/test8.cpp:47
...............................................................................

./tests/test8.cpp:52: PASSED:
  REQUIRE_NOTHROW( area.setName(langCode, name) )

./tests/test8.cpp:53: PASSED:
  REQUIRE( area.getName(langCode) == name )
with expansion:
  "Name in Welsh" == "Name in Welsh"

-------------------------------------------------------------------------------
Scenario: an Area instance can have names in multiple languages
      Given: a newly constructed Area instance
       Then: names in multiple languages can be set
-------------------------------------------------------------------------------
./tests/test8.cpp:47
...............................................................................

./tests/test8.cpp:52: PASSED:
  REQUIRE_NOTHROW( area.setName(langCode, name) )

./tests/test8.cpp:53: PASSED:
  REQUIRE( area.getName(langCode) == name )
with expansion:
  "Name in English" == "Name in English"

-------------------------------------------------------------------------------
Scenario: an Area instance can have names in multiple languages
      Given: a newly constructed Area instance
       Then: names in multiple languages can be set
-------------------------------------------------------------------------------
./tests/test8.cpp:47
...............................................................................

./tests/test8.cpp:52: PASSED:
  REQUIRE_NOTHROW( area.setName(langCode, name) )

./tests/test8.cpp:53: PASSED:
  REQUIRE( area.getName(langCode) == name )
with expansion:
  "Name in Welsh" == "Name in Welsh"

-------------------------------------------------------------------------------
Scenario: an Area instance can have names in multiple languages
      Given: a newly constructed Area instance
       Then: language codes are converted to lower case
-------------------------------------------------------------------------------
./tests/test8.cpp:57
...............................................................................

./tests/test8.cpp:61: PASSED:
  REQUIRE_NOTHROW( area.setName("eNg", name) )

./tests/test8.cpp:62: PASSED:
  REQUIRE( area.getName("eng") == name )
with expansion:
  "Name" == "Name"

-------------------------------------------------------------------------------
Scenario: an Area instance can have names in multiple languages
      Given: a newly constructed Area instance
       Then: setting a name with a non-three letter code throws an std::
             invalid_argumet with the message Area::setName: Language code must
             be three alphabetical letters only
-------------------------------------------------------------------------------
./tests/test8.cpp:68
...............................................................................

./tests/test8.cpp:73: PASSED:
  REQUIRE_THROWS_AS( area.setName(langCode, name), std::invalid_argument )

./tests/test8.cpp:74: PASSED:
  REQUIRE_THROWS_WITH( area.setName(langCode, name), exceptionMessage )
with expansion:
  "Area::setName: Language code must be three alphabetical letters only"
  equals: "Area::setName: Language code must be three alphabetical letters
  only"

-------------------------------------------------------------------------------
Scenario: an Area instance can have names in multiple languages
      Given: a newly constructed Area instance
       Then: setting a name with a non-three letter code throws an std::
             invalid_argumet with the message Area::setName: Language code must
             be three alphabetical letters only
-------------------------------------------------------------------------------
./tests/test8.cpp:68
...............................................................................

./tests/test8.cpp:73: PASSED:
  REQUIRE_THROWS_AS( area.setName(langCode, name), std::invalid_argument )

./tests/test8.cpp:74: PASSED:
  REQUIRE_THROWS_WITH( area.setName(langCode, name), exceptionMessage )
with expansion:
  "Area::setName: Language code must be three alphabetical letters only"
  equals: "Area::setName: Language code must be three alphabetical letters
  only"

-------------------------------------------------------------------------------
Scenario: an Area instance can have names in multiple languages
      Given: a newly constructed Area instance
       Then: setting a name with a non-three letter code throws an std::
             invalid_argumet with the message Area::setName: Language code must
             be three alphabetical letters only
-------------------------------------------------------------------------------
./tests/test8.cpp:68
...............................................................................

./tests/test8.cpp:73: PASSED:
  REQUIRE_THROWS_AS( area.setName(langCode, name), std::invalid_argument )

./tests/test8.cpp:74: PASSED:
  REQUIRE_THROWS_WITH( area.setName(langCode, name), exceptionMessage )
with expansion:
  "Area::setName: Language code must be three alphabetical letters only"
  equals: "Area::setName: Language code must be three alphabetical letters
  only"

-------------------------------------------------------------------------------
Scenario: an Area instance can have names in multiple languages
      Given: a newly constructed Area instance
       Then: the object contains no Measures
-------------------------------------------------------------------------------
./tests/test8.cpp:78
...............................................................................

./tests/test8.cpp:80: PASSED:
  REQUIRE_NOTHROW( area.size() == 0 )

-------------------------------------------------------------------------------
Scenario: an Area instance can contain Measure instances
      Given: a newly constructed Area instance
  And given: a newly constructed Measure instance ('Pop')
       Then: the Measure instance can be emplace into the Area instance without
             exception
-------------------------------------------------------------------------------
./tests/test9.cpp:33
...............................................................................

./tests/test9.cpp:35: PASSED:
  REQUIRE_NOTHROW( area.setMeasure(codename, measure) )

-------------------------------------------------------------------------------
Scenario: an Area instance can contain Measure instances
      Given: a newly constructed Area instance
  And given: a newly constructed Measure instance ('Pop')
       Then: the Measure instance can be emplace into the Area instance without
             exception
        And: the Area instance size will be 1
-------------------------------------------------------------------------------
./tests/test9.cpp:37
...............................................................................

./tests/test9.cpp:39: PASSED:
  REQUIRE( area.size() == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
Scenario: an Area instance can contain Measure instances
      Given: a newly constructed Area instance
  And given: a newly constructed Measure instance ('Pop')
       Then: the Measure instance can be emplace into the Area instance without
             exception
-------------------------------------------------------------------------------
./tests/test9.cpp:33
...............................................................................

./tests/test9.cpp:35: PASSED:
  REQUIRE_NOTHROW( area.setMeasure(codename, measure) )

-------------------------------------------------------------------------------
Scenario: an Area instance can contain Measure instances
      Given: a newly constructed Area instance
  And given: a newly constructed Measure instance ('Pop')
       Then: the Measure instance can be emplace into the Area instance without
             exception
        And: the Measure instance can be retrieved without exception with a
             lowercase codename
-------------------------------------------------------------------------------
./tests/test9.cpp:43
...............................................................................

./tests/test9.cpp:45: PASSED:
  REQUIRE_NOTHROW( area.getMeasure(codenameLower) )

-------------------------------------------------------------------------------
Scenario: an Area instance can contain Measure instances
      Given: a newly constructed Area instance
  And given: a newly constructed Measure instance ('Pop')
       Then: the Measure instance can be emplace into the Area instance without
             exception
-------------------------------------------------------------------------------
./tests/test9.cpp:33
...............................................................................

./tests/test9.cpp:35: PASSED:
  REQUIRE_NOTHROW( area.setMeasure(codename, measure) )

-------------------------------------------------------------------------------
Scenario: an Area instance can contain Measure instances
      Given: a newly constructed Area instance
  And given: a newly constructed Measure instance ('Pop')
       Then: the Measure instance can be emplace into the Area instance without
             exception
        And: the Measure instance is equal to the original
-------------------------------------------------------------------------------
./tests/test9.cpp:49
...............................................................................

./tests/test9.cpp:52: PASSED:
  REQUIRE( measure == newMeasure )
with expansion:
  Population (pop)
   Average    Diff.  % Diff.
  0.000000 0.000000 0.000000
  ==
  Population (pop)
   Average    Diff.  % Diff.
  0.000000 0.000000 0.000000

-------------------------------------------------------------------------------
Scenario: an Area instance can contain Measure instances
      Given: a newly constructed Area instance
  And given: two newly constructed Measure instances with two different
             codenames ('pop', 'dens')
       Then: the Measure instances can be emplace into the Area instance
             without exception
-------------------------------------------------------------------------------
./tests/test9.cpp:70
...............................................................................

./tests/test9.cpp:72: PASSED:
  REQUIRE_NOTHROW( area.setMeasure(codename1, measure1) )

./tests/test9.cpp:73: PASSED:
  REQUIRE_NOTHROW( area.setMeasure(codename2, measure2) )

-------------------------------------------------------------------------------
Scenario: an Area instance can contain Measure instances
      Given: a newly constructed Area instance
  And given: two newly constructed Measure instances with two different
             codenames ('pop', 'dens')
       Then: the Measure instances can be emplace into the Area instance
             without exception
        And: the Area instance size will be 2
-------------------------------------------------------------------------------
./tests/test9.cpp:75
...............................................................................

./tests/test9.cpp:77: PASSED:
  REQUIRE( area.size() == 2 )
with expansion:
  2 == 2

-------------------------------------------------------------------------------
Scenario: an Area instance can contain Measure instances
      Given: a newly constructed Area instance
  And given: two newly constructed Measure instances with two different
             codenames ('pop', 'dens')
       Then: the Measure instances can be emplace into the Area instance
             without exception
-------------------------------------------------------------------------------
./tests/test9.cpp:70
...............................................................................

./tests/test9.cpp:72: PASSED:
  REQUIRE_NOTHROW( area.setMeasure(codename1, measure1) )

./tests/test9.cpp:73: PASSED:
  REQUIRE_NOTHROW( area.setMeasure(codename2, measure2) )

-------------------------------------------------------------------------------
Scenario: an Area instance can contain Measure instances
      Given: a newly constructed Area instance
  And given: two newly constructed Measure instances with two different
             codenames ('pop', 'dens')
       Then: the Measure instances can be emplace into the Area instance
             without exception
        And: the Measure instances can be retrieved without exception
-------------------------------------------------------------------------------
./tests/test9.cpp:81
...............................................................................

./tests/test9.cpp:83: PASSED:
  REQUIRE_NOTHROW( area.getMeasure(codename1) )

./tests/test9.cpp:84: PASSED:
  REQUIRE_NOTHROW( area.getMeasure(codename2) )

-------------------------------------------------------------------------------
Scenario: an Area instance can contain Measure instances
      Given: a newly constructed Area instance
  And given: two newly constructed Measure instances with two different
             codenames ('pop', 'dens')
       Then: the Measure instances can be emplace into the Area instance
             without exception
-------------------------------------------------------------------------------
./tests/test9.cpp:70
...............................................................................

./tests/test9.cpp:72: PASSED:
  REQUIRE_NOTHROW( area.setMeasure(codename1, measure1) )

./tests/test9.cpp:73: PASSED:
  REQUIRE_NOTHROW( area.setMeasure(codename2, measure2) )

-------------------------------------------------------------------------------
Scenario: an Area instance can contain Measure instances
      Given: a newly constructed Area instance
  And given: two newly constructed Measure instances with two different
             codenames ('pop', 'dens')
       Then: the Measure instances can be emplace into the Area instance
             without exception
        And: the Measure instances are equal to the original
-------------------------------------------------------------------------------
./tests/test9.cpp:88
...............................................................................

./tests/test9.cpp:91: PASSED:
  REQUIRE( measure1 == newMeasure1 )
with expansion:
  Population (pop)
   Average    Diff.  % Diff.
  0.000000 0.000000 0.000000
  ==
  Population (pop)
   Average    Diff.  % Diff.
  0.000000 0.000000 0.000000

./tests/test9.cpp:94: PASSED:
  REQUIRE( measure2 == newMeasure2 )
with expansion:
  Population density (dens)
   Average    Diff.  % Diff.
  0.000000 0.000000 0.000000
  ==
  Population density (dens)
   Average    Diff.  % Diff.
  0.000000 0.000000 0.000000

-------------------------------------------------------------------------------
Scenario: an Areas instance can be constructed
-------------------------------------------------------------------------------
./tests/test10.cpp:20
...............................................................................

./tests/test10.cpp:22: PASSED:
  REQUIRE_NOTHROW( Areas() )

-------------------------------------------------------------------------------
Scenario: an Areas instance can contain Area instances
      Given: a newly constructed Areas
       Then: the Areas instance has size 0
-------------------------------------------------------------------------------
./tests/test10.cpp:32
...............................................................................

./tests/test10.cpp:34: PASSED:
  REQUIRE_NOTHROW( areas.size() == 0 )

-------------------------------------------------------------------------------
Scenario: an Areas instance can contain Area instances
      Given: a newly constructed Areas
  And given: a newly constructed Area instance ('W06000011')
       Then: the Area instance can be emplaced in the Areas instance without
             exception
-------------------------------------------------------------------------------
./tests/test10.cpp:43
...............................................................................

./tests/test10.cpp:45: PASSED:
  REQUIRE_NOTHROW( areas.setArea(localAuthorityCode, area) )

-------------------------------------------------------------------------------
Scenario: an Areas instance can contain Area instances
      Given: a newly constructed Areas
  And given: a newly constructed Area instance ('W06000011')
       Then: the Area instance can be emplaced in the Areas instance without
             exception
        And: the Areas instance has size 1
-------------------------------------------------------------------------------
./tests/test10.cpp:47
...............................................................................

./tests/test10.cpp:49: PASSED:
  REQUIRE_NOTHROW( areas.size() == 1 )

-------------------------------------------------------------------------------
Scenario: an Areas instance can contain Area instances
      Given: a newly constructed Areas
  And given: a newly constructed Area instance ('W06000011')
       Then: the Area instance can be emplaced in the Areas instance without
             exception
-------------------------------------------------------------------------------
./tests/test10.cpp:43
...............................................................................

./tests/test10.cpp:45: PASSED:
  REQUIRE_NOTHROW( areas.setArea(localAuthorityCode, area) )

-------------------------------------------------------------------------------
Scenario: an Areas instance can contain Area instances
      Given: a newly constructed Areas
  And given: a newly constructed Area instance ('W06000011')
       Then: the Area instance can be emplaced in the Areas instance without
             exception
        And: the Area instance can be retrieved using the local authority code
-------------------------------------------------------------------------------
./tests/test10.cpp:53
...............................................................................

./tests/test10.cpp:56: PASSED:
  REQUIRE( area == newArea )
with expansion:
   /  (W06000011)
  <no measures>


  ==
   /  (W06000011)
  <no measures>



-------------------------------------------------------------------------------
Scenario: an Areas instance can contain Area instances
      Given: a newly constructed Areas
  And given: two newly constructed Area instances with different local
             authority codes ('W06000011' and 'W06000012')
       Then: the Area instancse can be emplaced in the Areas instance without
             exception
-------------------------------------------------------------------------------
./tests/test10.cpp:72
...............................................................................

./tests/test10.cpp:74: PASSED:
  REQUIRE_NOTHROW( areas.setArea(localAuthorityCode1, area1) )

./tests/test10.cpp:75: PASSED:
  REQUIRE_NOTHROW( areas.setArea(localAuthorityCode2, area2) )

-------------------------------------------------------------------------------
Scenario: an Areas instance can contain Area instances
      Given: a newly constructed Areas
  And given: two newly constructed Area instances with different local
             authority codes ('W06000011' and 'W06000012')
       Then: the Area instancse can be emplaced in the Areas instance without
             exception
        And: the Areas instance has size 2
-------------------------------------------------------------------------------
./tests/test10.cpp:77
...............................................................................

./tests/test10.cpp:79: PASSED:
  REQUIRE_NOTHROW( areas.size() == 2 )

-------------------------------------------------------------------------------
Scenario: an Areas instance can contain Area instances
      Given: a newly constructed Areas
  And given: two newly constructed Area instances with different local
             authority codes ('W06000011' and 'W06000012')
       Then: the Area instancse can be emplaced in the Areas instance without
             exception
-------------------------------------------------------------------------------
./tests/test10.cpp:72
...............................................................................

./tests/test10.cpp:74: PASSED:
  REQUIRE_NOTHROW( areas.setArea(localAuthorityCode1, area1) )

./tests/test10.cpp:75: PASSED:
  REQUIRE_NOTHROW( areas.setArea(localAuthorityCode2, area2) )

-------------------------------------------------------------------------------
Scenario: an Areas instance can contain Area instances
      Given: a newly constructed Areas
  And given: two newly constructed Area instances with different local
             authority codes ('W06000011' and 'W06000012')
       Then: the Area instancse can be emplaced in the Areas instance without
             exception
        And: the Area instances can be retrieved using the local authority code
-------------------------------------------------------------------------------
./tests/test10.cpp:83
...............................................................................

./tests/test10.cpp:88: PASSED:
  REQUIRE( area1 == newArea1 )
with expansion:
   /  (W06000011)
  <no measures>


  ==
   /  (W06000011)
  <no measures>



./tests/test10.cpp:89: PASSED:
  REQUIRE( area2 == newArea2 )
with expansion:
   /  (W06000012)
  <no measures>


  ==
   /  (W06000012)
  <no measures>



-------------------------------------------------------------------------------
Scenario: an Areas instance can contain Area instances
      Given: a newly constructed Areas
  And given: two newly constructed Area instances with the same local authority
             codes ('W06000011')
       Then: the Area instances can be emplaced in the Areas instance without
             exception
-------------------------------------------------------------------------------
./tests/test10.cpp:104
...............................................................................

./tests/test10.cpp:106: PASSED:
  REQUIRE_NOTHROW( areas.setArea(localAuthorityCode, area1) )

./tests/test10.cpp:107: PASSED:
  REQUIRE_NOTHROW( areas.setArea(localAuthorityCode, area2) )

-------------------------------------------------------------------------------
Scenario: an Areas instance can contain Area instances
      Given: a newly constructed Areas
  And given: two newly constructed Area instances with the same local authority
             codes ('W06000011')
       Then: the Area instances can be emplaced in the Areas instance without
             exception
        And: the Areas instance has size 1
-------------------------------------------------------------------------------
./tests/test10.cpp:109
...............................................................................

./tests/test10.cpp:111: PASSED:
  REQUIRE_NOTHROW( areas.size() == 1 )

-------------------------------------------------------------------------------
Scenario: an Areas instance can contain Area instances
      Given: a newly constructed Areas
  And given: two newly constructed Area instances with the same local authority
             codes ('W06000011') but different sets of names
       Then: the Area instances can be emplaced in the Areas instance without
             exception
-------------------------------------------------------------------------------
./tests/test10.cpp:140
...............................................................................

./tests/test10.cpp:142: PASSED:
  REQUIRE_NOTHROW( areas.setArea(localAuthorityCode, area1) )

./tests/test10.cpp:143: PASSED:
  REQUIRE_NOTHROW( areas.setArea(localAuthorityCode, area2) )

-------------------------------------------------------------------------------
Scenario: an Areas instance can contain Area instances
      Given: a newly constructed Areas
  And given: two newly constructed Area instances with the same local authority
             codes ('W06000011') but different sets of names
       Then: the Area instances can be emplaced in the Areas instance without
             exception
        And: the Areas instance has size 1
-------------------------------------------------------------------------------
./tests/test10.cpp:145
...............................................................................

./tests/test10.cpp:147: PASSED:
  REQUIRE_NOTHROW( areas.size() == 1 )

-------------------------------------------------------------------------------
Scenario: an Areas instance can contain Area instances
      Given: a newly constructed Areas
  And given: two newly constructed Area instances with the same local authority
             codes ('W06000011') but different sets of names
       Then: the Area instances can be emplaced in the Areas instance without
             exception
-------------------------------------------------------------------------------
./tests/test10.cpp:140
...............................................................................

./tests/test10.cpp:142: PASSED:
  REQUIRE_NOTHROW( areas.setArea(localAuthorityCode, area1) )

./tests/test10.cpp:143: PASSED:
  REQUIRE_NOTHROW( areas.setArea(localAuthorityCode, area2) )

-------------------------------------------------------------------------------
Scenario: an Areas instance can contain Area instances
      Given: a newly constructed Areas
  And given: two newly constructed Area instances with the same local authority
             codes ('W06000011') but different sets of names
       Then: the Area instances can be emplaced in the Areas instance without
             exception
        And: the names of the second Area instances will overwrite the first
-------------------------------------------------------------------------------
./tests/test10.cpp:151
...............................................................................

./tests/test10.cpp:155: PASSED:
  REQUIRE( newArea == areaCombined )
with expansion:
  New name (should have replaced an original name) / Original name (should
  persist) (W06000011)
  <no measures>


  ==
  New name (should have replaced an original name) / Original name (should
  persist) (W06000011)
  <no measures>



-------------------------------------------------------------------------------
Scenario: an Areas instance can contain Area instances
      Given: a newly constructed Areas
  And given: two newly constructed Area instances with the same local authority
             codes ('W06000011') but overlapping Measures
       Then: the Area instances can be emplaced in the Areas instance without
             exception
-------------------------------------------------------------------------------
./tests/test10.cpp:184
...............................................................................

./tests/test10.cpp:186: PASSED:
  REQUIRE_NOTHROW( areas.setArea(localAuthorityCode, area1) )

./tests/test10.cpp:187: PASSED:
  REQUIRE_NOTHROW( areas.setArea(localAuthorityCode, area2) )

-------------------------------------------------------------------------------
Scenario: an Areas instance can contain Area instances
      Given: a newly constructed Areas
  And given: two newly constructed Area instances with the same local authority
             codes ('W06000011') but overlapping Measures
       Then: the Area instances can be emplaced in the Areas instance without
             exception
        And: the Areas instance has size 1
-------------------------------------------------------------------------------
./tests/test10.cpp:189
...............................................................................

./tests/test10.cpp:191: PASSED:
  REQUIRE_NOTHROW( areas.size() == 1 )

-------------------------------------------------------------------------------
Scenario: areas.csv can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid areas.csv file as an open std::istream
-------------------------------------------------------------------------------
./tests/test11.cpp:30
...............................................................................

./tests/test11.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: areas.csv can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid areas.csv file as an open std::istream
  And given: an empty areasFilter
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test11.cpp:41
...............................................................................

./tests/test11.cpp:43: PASSED:
  REQUIRE_NOTHROW( areas.populateFromAuthorityCodeCSV(stream, BethYw::InputFiles::AREAS.COLS, &areasFilter) )

-------------------------------------------------------------------------------
Scenario: areas.csv can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid areas.csv file as an open std::istream
  And given: an empty areasFilter
       Then: the Areas instance will be populated without exception
        And: the Areas instance has size 22
-------------------------------------------------------------------------------
./tests/test11.cpp:45
...............................................................................

./tests/test11.cpp:47: PASSED:
  REQUIRE( areas.size() == 22 )
with expansion:
  22 == 22

-------------------------------------------------------------------------------
Scenario: areas.csv can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid areas.csv file as an open std::istream
-------------------------------------------------------------------------------
./tests/test11.cpp:30
...............................................................................

./tests/test11.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: areas.csv can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid areas.csv file as an open std::istream
  And given: an empty areasFilter
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test11.cpp:41
...............................................................................

./tests/test11.cpp:43: PASSED:
  REQUIRE_NOTHROW( areas.populateFromAuthorityCodeCSV(stream, BethYw::InputFiles::AREAS.COLS, &areasFilter) )

-------------------------------------------------------------------------------
Scenario: areas.csv can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid areas.csv file as an open std::istream
  And given: an empty areasFilter
       Then: the Areas instance will be populated without exception
        And: each area has been imported with the correct local authority code
             as an Area instance (mixed)
-------------------------------------------------------------------------------
./tests/test11.cpp:51
...............................................................................

./tests/test11.cpp:53: PASSED:
  REQUIRE_NOTHROW( areas.getArea("W06000001") )

./tests/test11.cpp:54: PASSED:
  REQUIRE_NOTHROW( areas.getArea("W06000002") )

./tests/test11.cpp:55: PASSED:
  REQUIRE_NOTHROW( areas.getArea("W06000003") )

./tests/test11.cpp:56: PASSED:
  REQUIRE_NOTHROW( areas.getArea("W06000004") )

./tests/test11.cpp:57: PASSED:
  REQUIRE_NOTHROW( areas.getArea("W06000005") )

./tests/test11.cpp:58: PASSED:
  REQUIRE_NOTHROW( areas.getArea("W06000006") )

./tests/test11.cpp:59: PASSED:
  REQUIRE_NOTHROW( areas.getArea("W06000008") )

./tests/test11.cpp:60: PASSED:
  REQUIRE_NOTHROW( areas.getArea("W06000009") )

./tests/test11.cpp:61: PASSED:
  REQUIRE_NOTHROW( areas.getArea("W06000010") )

./tests/test11.cpp:62: PASSED:
  REQUIRE_NOTHROW( areas.getArea("W06000011") )

./tests/test11.cpp:63: PASSED:
  REQUIRE_NOTHROW( areas.getArea("W06000012") )

./tests/test11.cpp:64: PASSED:
  REQUIRE_NOTHROW( areas.getArea("W06000013") )

./tests/test11.cpp:65: PASSED:
  REQUIRE_NOTHROW( areas.getArea("W06000014") )

./tests/test11.cpp:66: PASSED:
  REQUIRE_NOTHROW( areas.getArea("W06000015") )

./tests/test11.cpp:67: PASSED:
  REQUIRE_NOTHROW( areas.getArea("W06000016") )

./tests/test11.cpp:68: PASSED:
  REQUIRE_NOTHROW( areas.getArea("W06000018") )

./tests/test11.cpp:69: PASSED:
  REQUIRE_NOTHROW( areas.getArea("W06000019") )

./tests/test11.cpp:70: PASSED:
  REQUIRE_NOTHROW( areas.getArea("W06000020") )

./tests/test11.cpp:71: PASSED:
  REQUIRE_NOTHROW( areas.getArea("W06000021") )

./tests/test11.cpp:72: PASSED:
  REQUIRE_NOTHROW( areas.getArea("W06000022") )

./tests/test11.cpp:73: PASSED:
  REQUIRE_NOTHROW( areas.getArea("W06000023") )

./tests/test11.cpp:74: PASSED:
  REQUIRE_NOTHROW( areas.getArea("W06000024") )

./tests/test11.cpp:76: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<Area&> (areas.getArea("W06000001")) )

./tests/test11.cpp:77: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<Area&> (areas.getArea("W06000002")) )

./tests/test11.cpp:78: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<Area&> (areas.getArea("W06000003")) )

./tests/test11.cpp:79: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<Area&> (areas.getArea("W06000004")) )

./tests/test11.cpp:80: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<Area&> (areas.getArea("W06000005")) )

./tests/test11.cpp:81: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<Area&> (areas.getArea("W06000006")) )

./tests/test11.cpp:82: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<Area&> (areas.getArea("W06000008")) )

./tests/test11.cpp:83: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<Area&> (areas.getArea("W06000009")) )

./tests/test11.cpp:84: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<Area&> (areas.getArea("W06000010")) )

./tests/test11.cpp:85: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<Area&> (areas.getArea("W06000011")) )

./tests/test11.cpp:86: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<Area&> (areas.getArea("W06000012")) )

./tests/test11.cpp:87: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<Area&> (areas.getArea("W06000013")) )

./tests/test11.cpp:88: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<Area&> (areas.getArea("W06000014")) )

./tests/test11.cpp:89: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<Area&> (areas.getArea("W06000015")) )

./tests/test11.cpp:90: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<Area&> (areas.getArea("W06000016")) )

./tests/test11.cpp:91: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<Area&> (areas.getArea("W06000018")) )

./tests/test11.cpp:92: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<Area&> (areas.getArea("W06000019")) )

./tests/test11.cpp:93: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<Area&> (areas.getArea("W06000020")) )

./tests/test11.cpp:94: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<Area&> (areas.getArea("W06000021")) )

./tests/test11.cpp:95: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<Area&> (areas.getArea("W06000022")) )

./tests/test11.cpp:96: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<Area&> (areas.getArea("W06000023")) )

./tests/test11.cpp:97: PASSED:
  REQUIRE_NOTHROW( dynamic_cast<Area&> (areas.getArea("W06000024")) )

-------------------------------------------------------------------------------
Scenario: areas.csv can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid areas.csv file as an open std::istream
-------------------------------------------------------------------------------
./tests/test11.cpp:30
...............................................................................

./tests/test11.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: areas.csv can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid areas.csv file as an open std::istream
  And given: an empty areasFilter
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test11.cpp:41
...............................................................................

./tests/test11.cpp:43: PASSED:
  REQUIRE_NOTHROW( areas.populateFromAuthorityCodeCSV(stream, BethYw::InputFiles::AREAS.COLS, &areasFilter) )

-------------------------------------------------------------------------------
Scenario: areas.csv can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid areas.csv file as an open std::istream
  And given: an empty areasFilter
       Then: the Areas instance will be populated without exception
        And: each area has been correctly imported with the correct names
             (mixed)
-------------------------------------------------------------------------------
./tests/test11.cpp:101
...............................................................................

./tests/test11.cpp:103: PASSED:
  REQUIRE( areas.getArea("W06000001").getName("eng") == "Isle of Anglesey" )
with expansion:
  "Isle of Anglesey" == "Isle of Anglesey"

./tests/test11.cpp:104: PASSED:
  REQUIRE( areas.getArea("W06000001").getName("cym") == "Ynys Môn" )
with expansion:
  "Ynys Môn" == "Ynys Môn"

./tests/test11.cpp:106: PASSED:
  REQUIRE( areas.getArea("W06000002").getName("eng") == "Gwynedd" )
with expansion:
  "Gwynedd" == "Gwynedd"

./tests/test11.cpp:107: PASSED:
  REQUIRE( areas.getArea("W06000002").getName("cym") == "Gwynedd" )
with expansion:
  "Gwynedd" == "Gwynedd"

./tests/test11.cpp:109: PASSED:
  REQUIRE( areas.getArea("W06000003").getName("eng") == "Conwy" )
with expansion:
  "Conwy" == "Conwy"

./tests/test11.cpp:110: PASSED:
  REQUIRE( areas.getArea("W06000003").getName("cym") == "Conwy" )
with expansion:
  "Conwy" == "Conwy"

./tests/test11.cpp:112: PASSED:
  REQUIRE( areas.getArea("W06000004").getName("eng") == "Denbighshire" )
with expansion:
  "Denbighshire" == "Denbighshire"

./tests/test11.cpp:113: PASSED:
  REQUIRE( areas.getArea("W06000004").getName("cym") == "Sir Ddinbych" )
with expansion:
  "Sir Ddinbych" == "Sir Ddinbych"

./tests/test11.cpp:115: PASSED:
  REQUIRE( areas.getArea("W06000005").getName("eng") == "Flintshire" )
with expansion:
  "Flintshire" == "Flintshire"

./tests/test11.cpp:116: PASSED:
  REQUIRE( areas.getArea("W06000005").getName("cym") == "Sir y Fflint" )
with expansion:
  "Sir y Fflint" == "Sir y Fflint"

./tests/test11.cpp:118: PASSED:
  REQUIRE( areas.getArea("W06000006").getName("eng") == "Wrexham" )
with expansion:
  "Wrexham" == "Wrexham"

./tests/test11.cpp:119: PASSED:
  REQUIRE( areas.getArea("W06000006").getName("cym") == "Wrecsam" )
with expansion:
  "Wrecsam" == "Wrecsam"

./tests/test11.cpp:121: PASSED:
  REQUIRE( areas.getArea("W06000008").getName("eng") == "Ceredigion" )
with expansion:
  "Ceredigion" == "Ceredigion"

./tests/test11.cpp:122: PASSED:
  REQUIRE( areas.getArea("W06000008").getName("cym") == "Ceredigion" )
with expansion:
  "Ceredigion" == "Ceredigion"

./tests/test11.cpp:124: PASSED:
  REQUIRE( areas.getArea("W06000009").getName("eng") == "Pembrokeshire" )
with expansion:
  "Pembrokeshire" == "Pembrokeshire"

./tests/test11.cpp:125: PASSED:
  REQUIRE( areas.getArea("W06000009").getName("cym") == "Sir Benfro" )
with expansion:
  "Sir Benfro" == "Sir Benfro"

./tests/test11.cpp:127: PASSED:
  REQUIRE( areas.getArea("W06000010").getName("eng") == "Carmarthenshire" )
with expansion:
  "Carmarthenshire" == "Carmarthenshire"

./tests/test11.cpp:128: PASSED:
  REQUIRE( areas.getArea("W06000010").getName("cym") == "Sir Gaerfyrddin" )
with expansion:
  "Sir Gaerfyrddin" == "Sir Gaerfyrddin"

./tests/test11.cpp:130: PASSED:
  REQUIRE( areas.getArea("W06000011").getName("eng") == "Swansea" )
with expansion:
  "Swansea" == "Swansea"

./tests/test11.cpp:131: PASSED:
  REQUIRE( areas.getArea("W06000011").getName("cym") == "Abertawe" )
with expansion:
  "Abertawe" == "Abertawe"

./tests/test11.cpp:133: PASSED:
  REQUIRE( areas.getArea("W06000012").getName("eng") == "Neath Port Talbot" )
with expansion:
  "Neath Port Talbot" == "Neath Port Talbot"

./tests/test11.cpp:134: PASSED:
  REQUIRE( areas.getArea("W06000012").getName("cym") == "Castell-nedd Port Talbot" )
with expansion:
  "Castell-nedd Port Talbot"
  ==
  "Castell-nedd Port Talbot"

./tests/test11.cpp:136: PASSED:
  REQUIRE( areas.getArea("W06000013").getName("eng") == "Bridgend" )
with expansion:
  "Bridgend" == "Bridgend"

./tests/test11.cpp:137: PASSED:
  REQUIRE( areas.getArea("W06000013").getName("cym") == "Pen-y-bont ar Ogwr" )
with expansion:
  "Pen-y-bont ar Ogwr"
  ==
  "Pen-y-bont ar Ogwr"

./tests/test11.cpp:139: PASSED:
  REQUIRE( areas.getArea("W06000014").getName("eng") == "Vale of Glamorgan" )
with expansion:
  "Vale of Glamorgan" == "Vale of Glamorgan"

./tests/test11.cpp:140: PASSED:
  REQUIRE( areas.getArea("W06000014").getName("cym") == "Bro Morgannwg" )
with expansion:
  "Bro Morgannwg" == "Bro Morgannwg"

./tests/test11.cpp:142: PASSED:
  REQUIRE( areas.getArea("W06000015").getName("eng") == "Cardiff" )
with expansion:
  "Cardiff" == "Cardiff"

./tests/test11.cpp:143: PASSED:
  REQUIRE( areas.getArea("W06000015").getName("cym") == "Caerdydd" )
with expansion:
  "Caerdydd" == "Caerdydd"

./tests/test11.cpp:145: PASSED:
  REQUIRE( areas.getArea("W06000016").getName("eng") == "Rhondda Cynon Taf" )
with expansion:
  "Rhondda Cynon Taf" == "Rhondda Cynon Taf"

./tests/test11.cpp:146: PASSED:
  REQUIRE( areas.getArea("W06000016").getName("cym") == "Rhondda Cynon Taf" )
with expansion:
  "Rhondda Cynon Taf" == "Rhondda Cynon Taf"

./tests/test11.cpp:148: PASSED:
  REQUIRE( areas.getArea("W06000018").getName("eng") == "Caerphilly" )
with expansion:
  "Caerphilly" == "Caerphilly"

./tests/test11.cpp:149: PASSED:
  REQUIRE( areas.getArea("W06000018").getName("cym") == "Caerffili" )
with expansion:
  "Caerffili" == "Caerffili"

./tests/test11.cpp:151: PASSED:
  REQUIRE( areas.getArea("W06000019").getName("eng") == "Blaenau Gwent" )
with expansion:
  "Blaenau Gwent" == "Blaenau Gwent"

./tests/test11.cpp:152: PASSED:
  REQUIRE( areas.getArea("W06000019").getName("cym") == "Blaenau Gwent" )
with expansion:
  "Blaenau Gwent" == "Blaenau Gwent"

./tests/test11.cpp:154: PASSED:
  REQUIRE( areas.getArea("W06000020").getName("eng") == "Torfaen" )
with expansion:
  "Torfaen" == "Torfaen"

./tests/test11.cpp:155: PASSED:
  REQUIRE( areas.getArea("W06000020").getName("cym") == "Torfaen" )
with expansion:
  "Torfaen" == "Torfaen"

./tests/test11.cpp:157: PASSED:
  REQUIRE( areas.getArea("W06000021").getName("eng") == "Monmouthshire" )
with expansion:
  "Monmouthshire" == "Monmouthshire"

./tests/test11.cpp:158: PASSED:
  REQUIRE( areas.getArea("W06000021").getName("cym") == "Sir Fynwy" )
with expansion:
  "Sir Fynwy" == "Sir Fynwy"

./tests/test11.cpp:160: PASSED:
  REQUIRE( areas.getArea("W06000022").getName("eng") == "Newport" )
with expansion:
  "Newport" == "Newport"

./tests/test11.cpp:161: PASSED:
  REQUIRE( areas.getArea("W06000022").getName("cym") == "Casnewydd" )
with expansion:
  "Casnewydd" == "Casnewydd"

./tests/test11.cpp:163: PASSED:
  REQUIRE( areas.getArea("W06000023").getName("eng") == "Powys" )
with expansion:
  "Powys" == "Powys"

./tests/test11.cpp:164: PASSED:
  REQUIRE( areas.getArea("W06000023").getName("cym") == "Powys" )
with expansion:
  "Powys" == "Powys"

./tests/test11.cpp:166: PASSED:
  REQUIRE( areas.getArea("W06000024").getName("eng") == "Merthyr Tydfil" )
with expansion:
  "Merthyr Tydfil" == "Merthyr Tydfil"

./tests/test11.cpp:167: PASSED:
  REQUIRE( areas.getArea("W06000024").getName("cym") == "Merthyr Tudful" )
with expansion:
  "Merthyr Tudful" == "Merthyr Tudful"

-------------------------------------------------------------------------------
Scenario: areas.csv can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid areas.csv file as an open std::istream
-------------------------------------------------------------------------------
./tests/test11.cpp:30
...............................................................................

./tests/test11.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: areas.csv can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid areas.csv file as an open std::istream
  And given: an empty areasFilter
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test11.cpp:41
...............................................................................

./tests/test11.cpp:43: PASSED:
  REQUIRE_NOTHROW( areas.populateFromAuthorityCodeCSV(stream, BethYw::InputFiles::AREAS.COLS, &areasFilter) )

-------------------------------------------------------------------------------
Scenario: areas.csv can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid areas.csv file as an open std::istream
  And given: an empty areasFilter
       Then: the Areas instance will be populated without exception
        And: attempting to retrieve an Area with an unexpected local authority
             code ('junk') throws a std::out_of_range error with exception
             message 'No area found matching junk'
-------------------------------------------------------------------------------
./tests/test11.cpp:172
...............................................................................

./tests/test11.cpp:174: PASSED:
  REQUIRE_THROWS_AS( areas.getArea("junk"), std::out_of_range )

./tests/test11.cpp:175: PASSED:
  REQUIRE_THROWS_WITH( areas.getArea("junk"), exceptionMessage )
with expansion:
  "No area found matching junk" equals: "No area found matching junk"

-------------------------------------------------------------------------------
Scenario: areas.csv can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid areas.csv file as an open std::istream
-------------------------------------------------------------------------------
./tests/test11.cpp:30
...............................................................................

./tests/test11.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: areas.csv can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid areas.csv file as an open std::istream
  And given: a nullptr for an areasFilter
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test11.cpp:185
...............................................................................

./tests/test11.cpp:187: PASSED:
  REQUIRE_NOTHROW( areas.populateFromAuthorityCodeCSV(stream, BethYw::InputFiles::AREAS.COLS, nullptr) )

-------------------------------------------------------------------------------
Scenario: areas.csv can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid areas.csv file as an open std::istream
  And given: a nullptr for an areasFilter
       Then: the Areas instance will be populated without exception
        And: the Areas instance has size 22
-------------------------------------------------------------------------------
./tests/test11.cpp:189
...............................................................................

./tests/test11.cpp:191: PASSED:
  REQUIRE( areas.size() == 22 )
with expansion:
  22 == 22

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
-------------------------------------------------------------------------------
./tests/test12.cpp:30
...............................................................................

./tests/test12.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an empty areasFilter, measuresFilter, and yearsFilter
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test12.cpp:43
...............................................................................

./tests/test12.cpp:45: PASSED:
  REQUIRE_NOTHROW( areas.populateFromWelshStatsJSON(stream, BethYw::InputFiles::DATASETS[0].COLS, &areasFilter, &measuresFilter, &yearsFilter) )

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an empty areasFilter, measuresFilter, and yearsFilter
       Then: the Areas instance will be populated without exception
        And: the Areas instance has size 12
-------------------------------------------------------------------------------
./tests/test12.cpp:47
...............................................................................

./tests/test12.cpp:49: PASSED:
  REQUIRE( areas.size() == 12 )
with expansion:
  12 == 12

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
-------------------------------------------------------------------------------
./tests/test12.cpp:30
...............................................................................

./tests/test12.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an empty areasFilter, measuresFilter, and yearsFilter
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test12.cpp:43
...............................................................................

./tests/test12.cpp:45: PASSED:
  REQUIRE_NOTHROW( areas.populateFromWelshStatsJSON(stream, BethYw::InputFiles::DATASETS[0].COLS, &areasFilter, &measuresFilter, &yearsFilter) )

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an empty areasFilter, measuresFilter, and yearsFilter
       Then: the Areas instance will be populated without exception
        And: each Area in the Areas instance has correct size (3)
-------------------------------------------------------------------------------
./tests/test12.cpp:53
...............................................................................

./tests/test12.cpp:55: PASSED:
  REQUIRE( areas.getArea("W06000001").size() == 3 )
with expansion:
  3 == 3

./tests/test12.cpp:56: PASSED:
  REQUIRE( areas.getArea("W06000002").size() == 3 )
with expansion:
  3 == 3

./tests/test12.cpp:57: PASSED:
  REQUIRE( areas.getArea("W06000003").size() == 3 )
with expansion:
  3 == 3

./tests/test12.cpp:58: PASSED:
  REQUIRE( areas.getArea("W06000004").size() == 3 )
with expansion:
  3 == 3

./tests/test12.cpp:59: PASSED:
  REQUIRE( areas.getArea("W06000005").size() == 3 )
with expansion:
  3 == 3

./tests/test12.cpp:60: PASSED:
  REQUIRE( areas.getArea("W06000006").size() == 3 )
with expansion:
  3 == 3

./tests/test12.cpp:61: PASSED:
  REQUIRE( areas.getArea("W06000008").size() == 3 )
with expansion:
  3 == 3

./tests/test12.cpp:62: PASSED:
  REQUIRE( areas.getArea("W06000009").size() == 3 )
with expansion:
  3 == 3

./tests/test12.cpp:63: PASSED:
  REQUIRE( areas.getArea("W06000010").size() == 3 )
with expansion:
  3 == 3

./tests/test12.cpp:64: PASSED:
  REQUIRE( areas.getArea("W06000011").size() == 3 )
with expansion:
  3 == 3

./tests/test12.cpp:65: PASSED:
  REQUIRE( areas.getArea("W06000012").size() == 3 )
with expansion:
  3 == 3

./tests/test12.cpp:66: PASSED:
  REQUIRE( areas.getArea("W06000023").size() == 3 )
with expansion:
  3 == 3

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
-------------------------------------------------------------------------------
./tests/test12.cpp:30
...............................................................................

./tests/test12.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an empty areasFilter, measuresFilter, and yearsFilter
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test12.cpp:43
...............................................................................

./tests/test12.cpp:45: PASSED:
  REQUIRE_NOTHROW( areas.populateFromWelshStatsJSON(stream, BethYw::InputFiles::DATASETS[0].COLS, &areasFilter, &measuresFilter, &yearsFilter) )

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an empty areasFilter, measuresFilter, and yearsFilter
       Then: the Areas instance will be populated without exception
        And: each Measure in each Area in the Areas instance has correct size
             (mixed)
-------------------------------------------------------------------------------
./tests/test12.cpp:70
...............................................................................

./tests/test12.cpp:72: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:73: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:74: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:75: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:76: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:77: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:78: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:79: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:80: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:81: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:82: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("area").size() == 16 )
with expansion:
  16 == 16

./tests/test12.cpp:83: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:85: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:86: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:87: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:88: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:89: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:90: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:91: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:92: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:93: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:94: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:95: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("dens").size() == 13 )
with expansion:
  13 == 13

./tests/test12.cpp:96: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:98: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:99: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:100: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:101: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:102: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:103: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:104: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:105: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:106: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:107: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:108: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("pop").size() == 14 )
with expansion:
  14 == 14

./tests/test12.cpp:109: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").size() == 29 )
with expansion:
  29 == 29

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
-------------------------------------------------------------------------------
./tests/test12.cpp:30
...............................................................................

./tests/test12.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an empty areasFilter, measuresFilter, and yearsFilter
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test12.cpp:43
...............................................................................

./tests/test12.cpp:45: PASSED:
  REQUIRE_NOTHROW( areas.populateFromWelshStatsJSON(stream, BethYw::InputFiles::DATASETS[0].COLS, &areasFilter, &measuresFilter, &yearsFilter) )

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an empty areasFilter, measuresFilter, and yearsFilter
       Then: the Areas instance will be populated without exception
        And: each year in each Measure in each Area in the Areas instance has
             the correct value
-------------------------------------------------------------------------------
./tests/test12.cpp:113
...............................................................................

./tests/test12.cpp:115: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(1991) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:116: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(1992) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:117: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(1993) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:118: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(1994) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:119: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(1995) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:120: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(1996) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:121: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(1997) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:122: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(1998) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:123: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(1999) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:124: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2000) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:125: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2001) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:126: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2002) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:127: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2003) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:128: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2004) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:129: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2005) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:130: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2006) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:131: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2007) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:132: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2008) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:133: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2009) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:134: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2010) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:135: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2011) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:136: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2012) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:137: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2013) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:138: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2014) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:139: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2015) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:140: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2016) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:141: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2017) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:142: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2018) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:143: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2019) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:145: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(1991) == 97.126504 )
with expansion:
  97.126504 == 97.126504

./tests/test12.cpp:146: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(1992) == 97.486216 )
with expansion:
  97.486216 == 97.486216

./tests/test12.cpp:147: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(1993) == 98.03843 )
with expansion:
  98.03843 == 98.03843

./tests/test12.cpp:148: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(1994) == 97.216432 )
with expansion:
  97.216432 == 97.216432

./tests/test12.cpp:149: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(1995) == 96.147131 )
with expansion:
  96.147131 == 96.147131

./tests/test12.cpp:150: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(1996) == 96.380382 )
with expansion:
  96.380382 == 96.380382

./tests/test12.cpp:151: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(1997) == 95.701706 )
with expansion:
  95.701706 == 95.701706

./tests/test12.cpp:152: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(1998) == 95.115769 )
with expansion:
  95.115769 == 95.115769

./tests/test12.cpp:153: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(1999) == 95.517635 )
with expansion:
  95.517635 == 95.517635

./tests/test12.cpp:154: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2000) == 95.405225 )
with expansion:
  95.405225 == 95.405225

./tests/test12.cpp:155: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2001) == 95.275953 )
with expansion:
  95.275953 == 95.275953

./tests/test12.cpp:156: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2002) == 95.378528 )
with expansion:
  95.378528 == 95.378528

./tests/test12.cpp:157: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2003) == 95.745265 )
with expansion:
  95.745265 == 95.745265

./tests/test12.cpp:158: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2004) == 96.606607 )
with expansion:
  96.606607 == 96.606607

./tests/test12.cpp:159: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2005) == 97.08716 )
with expansion:
  97.08716 == 97.08716

./tests/test12.cpp:160: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2006) == 97.498862 )
with expansion:
  97.498862 == 97.498862

./tests/test12.cpp:161: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2007) == 97.937261 )
with expansion:
  97.937261 == 97.937261

./tests/test12.cpp:162: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2008) == 98.240769 )
with expansion:
  98.240769 == 98.240769

./tests/test12.cpp:163: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2009) == 98.195805 )
with expansion:
  98.195805 == 98.195805

./tests/test12.cpp:164: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2010) == 98.124143 )
with expansion:
  98.124143 == 98.124143

./tests/test12.cpp:165: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2011) == 98.236553 )
with expansion:
  98.236553 == 98.236553

./tests/test12.cpp:166: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2012) == 98.410789 )
with expansion:
  98.410789 == 98.410789

./tests/test12.cpp:167: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2013) == 98.461373 )
with expansion:
  98.461373 == 98.461373

./tests/test12.cpp:168: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2014) == 98.556922 )
with expansion:
  98.556922 == 98.556922

./tests/test12.cpp:169: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2015) == 98.268871 )
with expansion:
  98.268871 == 98.268871

./tests/test12.cpp:170: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2016) == 97.888082 )
with expansion:
  97.888082 == 97.888082

./tests/test12.cpp:171: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2017) == 98.069343 )
with expansion:
  98.069343 == 98.069343

./tests/test12.cpp:172: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2018) == 98.303999 )
with expansion:
  98.303999 == 98.303999

./tests/test12.cpp:173: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2019) == 98.41922 )
with expansion:
  98.41922 == 98.41922

./tests/test12.cpp:175: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1991) == 69123.0 )
with expansion:
  69123.0 == 69123.0

./tests/test12.cpp:176: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1992) == 69379.0 )
with expansion:
  69379.0 == 69379.0

./tests/test12.cpp:177: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1993) == 69772.0 )
with expansion:
  69772.0 == 69772.0

./tests/test12.cpp:178: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1994) == 69187.0 )
with expansion:
  69187.0 == 69187.0

./tests/test12.cpp:179: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1995) == 68426.0 )
with expansion:
  68426.0 == 68426.0

./tests/test12.cpp:180: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1996) == 68592.0 )
with expansion:
  68592.0 == 68592.0

./tests/test12.cpp:181: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1997) == 68109.0 )
with expansion:
  68109.0 == 68109.0

./tests/test12.cpp:182: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1998) == 67692.0 )
with expansion:
  67692.0 == 67692.0

./tests/test12.cpp:183: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1999) == 67978.0 )
with expansion:
  67978.0 == 67978.0

./tests/test12.cpp:184: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2000) == 67898.0 )
with expansion:
  67898.0 == 67898.0

./tests/test12.cpp:185: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2001) == 67806.0 )
with expansion:
  67806.0 == 67806.0

./tests/test12.cpp:186: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2002) == 67879.0 )
with expansion:
  67879.0 == 67879.0

./tests/test12.cpp:187: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2003) == 68140.0 )
with expansion:
  68140.0 == 68140.0

./tests/test12.cpp:188: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2004) == 68753.0 )
with expansion:
  68753.0 == 68753.0

./tests/test12.cpp:189: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2005) == 69095.0 )
with expansion:
  69095.0 == 69095.0

./tests/test12.cpp:190: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2006) == 69388.0 )
with expansion:
  69388.0 == 69388.0

./tests/test12.cpp:191: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2007) == 69700.0 )
with expansion:
  69700.0 == 69700.0

./tests/test12.cpp:192: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2008) == 69916.0 )
with expansion:
  69916.0 == 69916.0

./tests/test12.cpp:193: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2009) == 69884.0 )
with expansion:
  69884.0 == 69884.0

./tests/test12.cpp:194: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2010) == 69833.0 )
with expansion:
  69833.0 == 69833.0

./tests/test12.cpp:195: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2011) == 69913.0 )
with expansion:
  69913.0 == 69913.0

./tests/test12.cpp:196: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2012) == 70037.0 )
with expansion:
  70037.0 == 70037.0

./tests/test12.cpp:197: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2013) == 70073.0 )
with expansion:
  70073.0 == 70073.0

./tests/test12.cpp:198: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2014) == 70141.0 )
with expansion:
  70141.0 == 70141.0

./tests/test12.cpp:199: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2015) == 69936.0 )
with expansion:
  69936.0 == 69936.0

./tests/test12.cpp:200: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2016) == 69665.0 )
with expansion:
  69665.0 == 69665.0

./tests/test12.cpp:201: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2017) == 69794.0 )
with expansion:
  69794.0 == 69794.0

./tests/test12.cpp:202: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2018) == 69961.0 )
with expansion:
  69961.0 == 69961.0

./tests/test12.cpp:203: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2019) == 70043.0 )
with expansion:
  70043.0 == 70043.0

./tests/test12.cpp:205: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(1991) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:206: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(1992) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:207: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(1993) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:208: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(1994) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:209: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(1995) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:210: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(1996) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:211: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(1997) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:212: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(1998) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:213: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(1999) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:214: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(2000) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:215: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(2001) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:216: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(2002) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:217: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(2003) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:218: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(2004) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:219: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(2005) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:220: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(2006) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:221: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(2007) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:222: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(2008) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:223: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(2009) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:224: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(2010) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:225: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(2011) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:226: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(2012) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:227: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(2013) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:228: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(2014) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:229: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(2015) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:230: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(2016) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:231: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(2017) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:232: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(2018) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:233: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("area").getValue(2019) == 2534.7422 )
with expansion:
  2534.7422 == 2534.7422

./tests/test12.cpp:235: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(1991) == 45.372267 )
with expansion:
  45.372267 == 45.372267

./tests/test12.cpp:236: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(1992) == 45.53757 )
with expansion:
  45.53757 == 45.53757

./tests/test12.cpp:237: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(1993) == 45.652374 )
with expansion:
  45.652374 == 45.652374

./tests/test12.cpp:238: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(1994) == 45.894214 )
with expansion:
  45.894214 == 45.894214

./tests/test12.cpp:239: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(1995) == 46.366056 )
with expansion:
  46.366056 == 46.366056

./tests/test12.cpp:240: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(1996) == 46.350276 )
with expansion:
  46.350276 == 46.350276

./tests/test12.cpp:241: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(1997) == 46.397618 )
with expansion:
  46.397618 == 46.397618

./tests/test12.cpp:242: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(1998) == 46.310035 )
with expansion:
  46.310035 == 46.310035

./tests/test12.cpp:243: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(1999) == 45.906838 )
with expansion:
  45.906838 == 45.906838

./tests/test12.cpp:244: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(2000) == 46.039791 )
with expansion:
  46.039791 == 46.039791

./tests/test12.cpp:245: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(2001) == 46.096996 )
with expansion:
  46.096996 == 46.096996

./tests/test12.cpp:246: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(2002) == 46.294254 )
with expansion:
  46.294254 == 46.294254

./tests/test12.cpp:247: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(2003) == 46.561737 )
with expansion:
  46.561737 == 46.561737

./tests/test12.cpp:248: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(2004) == 46.837505 )
with expansion:
  46.837505 == 46.837505

./tests/test12.cpp:249: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(2005) == 46.805943 )
with expansion:
  46.805943 == 46.805943

./tests/test12.cpp:250: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(2006) == 46.975191 )
with expansion:
  46.975191 == 46.975191

./tests/test12.cpp:251: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(2007) == 47.104593 )
with expansion:
  47.104593 == 47.104593

./tests/test12.cpp:252: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(2008) == 47.241885 )
with expansion:
  47.241885 == 47.241885

./tests/test12.cpp:253: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(2009) == 47.477807 )
with expansion:
  47.477807 == 47.477807

./tests/test12.cpp:254: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(2010) == 47.79776 )
with expansion:
  47.79776 == 47.79776

./tests/test12.cpp:255: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(2011) == 47.942943 )
with expansion:
  47.942943 == 47.942943

./tests/test12.cpp:256: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(2012) == 48.133889 )
with expansion:
  48.133889 == 48.133889

./tests/test12.cpp:257: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(2013) == 47.99423 )
with expansion:
  47.99423 == 47.99423

./tests/test12.cpp:258: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(2014) == 48.090492 )
with expansion:
  48.090492 == 48.090492

./tests/test12.cpp:259: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(2015) == 48.381646 )
with expansion:
  48.381646 == 48.381646

./tests/test12.cpp:260: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(2016) == 48.653074 )
with expansion:
  48.653074 == 48.653074

./tests/test12.cpp:261: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(2017) == 48.818377 )
with expansion:
  48.818377 == 48.818377

./tests/test12.cpp:262: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(2018) == 48.990386 )
with expansion:
  48.990386 == 48.990386

./tests/test12.cpp:263: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("dens").getValue(2019) == 49.141092 )
with expansion:
  49.141092 == 49.141092

./tests/test12.cpp:265: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(1991) == 115007.0 )
with expansion:
  115007.0 == 115007.0

./tests/test12.cpp:266: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(1992) == 115426.0 )
with expansion:
  115426.0 == 115426.0

./tests/test12.cpp:267: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(1993) == 115717.0 )
with expansion:
  115717.0 == 115717.0

./tests/test12.cpp:268: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(1994) == 116330.0 )
with expansion:
  116330.0 == 116330.0

./tests/test12.cpp:269: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(1995) == 117526.0 )
with expansion:
  117526.0 == 117526.0

./tests/test12.cpp:270: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(1996) == 117486.0 )
with expansion:
  117486.0 == 117486.0

./tests/test12.cpp:271: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(1997) == 117606.0 )
with expansion:
  117606.0 == 117606.0

./tests/test12.cpp:272: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(1998) == 117384.0 )
with expansion:
  117384.0 == 117384.0

./tests/test12.cpp:273: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(1999) == 116362.0 )
with expansion:
  116362.0 == 116362.0

./tests/test12.cpp:274: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(2000) == 116699.0 )
with expansion:
  116699.0 == 116699.0

./tests/test12.cpp:275: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(2001) == 116844.0 )
with expansion:
  116844.0 == 116844.0

./tests/test12.cpp:276: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(2002) == 117344.0 )
with expansion:
  117344.0 == 117344.0

./tests/test12.cpp:277: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(2003) == 118022.0 )
with expansion:
  118022.0 == 118022.0

./tests/test12.cpp:278: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(2004) == 118721.0 )
with expansion:
  118721.0 == 118721.0

./tests/test12.cpp:279: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(2005) == 118641.0 )
with expansion:
  118641.0 == 118641.0

./tests/test12.cpp:280: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(2006) == 119070.0 )
with expansion:
  119070.0 == 119070.0

./tests/test12.cpp:281: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(2007) == 119398.0 )
with expansion:
  119398.0 == 119398.0

./tests/test12.cpp:282: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(2008) == 119746.0 )
with expansion:
  119746.0 == 119746.0

./tests/test12.cpp:283: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(2009) == 120344.0 )
with expansion:
  120344.0 == 120344.0

./tests/test12.cpp:284: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(2010) == 121155.0 )
with expansion:
  121155.0 == 121155.0

./tests/test12.cpp:285: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(2011) == 121523.0 )
with expansion:
  121523.0 == 121523.0

./tests/test12.cpp:286: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(2012) == 122007.0 )
with expansion:
  122007.0 == 122007.0

./tests/test12.cpp:287: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(2013) == 121653.0 )
with expansion:
  121653.0 == 121653.0

./tests/test12.cpp:288: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(2014) == 121897.0 )
with expansion:
  121897.0 == 121897.0

./tests/test12.cpp:289: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(2015) == 122635.0 )
with expansion:
  122635.0 == 122635.0

./tests/test12.cpp:290: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(2016) == 123323.0 )
with expansion:
  123323.0 == 123323.0

./tests/test12.cpp:291: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(2017) == 123742.0 )
with expansion:
  123742.0 == 123742.0

./tests/test12.cpp:292: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(2018) == 124178.0 )
with expansion:
  124178.0 == 124178.0

./tests/test12.cpp:293: PASSED:
  REQUIRE( areas.getArea("W06000002").getMeasure("pop").getValue(2019) == 124560.0 )
with expansion:
  124560.0 == 124560.0

./tests/test12.cpp:295: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(1991) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:296: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(1992) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:297: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(1993) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:298: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(1994) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:299: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(1995) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:300: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(1996) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:301: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(1997) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:302: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(1998) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:303: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(1999) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:304: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(2000) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:305: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(2001) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:306: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(2002) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:307: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(2003) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:308: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(2004) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:309: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(2005) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:310: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(2006) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:311: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(2007) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:312: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(2008) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:313: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(2009) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:314: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(2010) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:315: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(2011) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:316: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(2012) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:317: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(2013) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:318: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(2014) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:319: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(2015) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:320: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(2016) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:321: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(2017) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:322: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(2018) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:323: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("area").getValue(2019) == 1125.8409 )
with expansion:
  1125.8409 == 1125.8409

./tests/test12.cpp:325: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(1991) == 95.884774 )
with expansion:
  95.884774 == 95.884774

./tests/test12.cpp:326: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(1992) == 95.734664 )
with expansion:
  95.734664 == 95.734664

./tests/test12.cpp:327: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(1993) == 96.054425 )
with expansion:
  96.054425 == 96.054425

./tests/test12.cpp:328: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(1994) == 96.719705 )
with expansion:
  96.719705 == 96.719705

./tests/test12.cpp:329: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(1995) == 96.763228 )
with expansion:
  96.763228 == 96.763228

./tests/test12.cpp:330: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(1996) == 95.83681 )
with expansion:
  95.83681 == 95.83681

./tests/test12.cpp:331: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(1997) == 96.082848 )
with expansion:
  96.082848 == 96.082848

./tests/test12.cpp:332: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(1998) == 96.345763 )
with expansion:
  96.345763 == 96.345763

./tests/test12.cpp:333: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(1999) == 96.214305 )
with expansion:
  96.214305 == 96.214305

./tests/test12.cpp:334: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(2000) == 96.506531 )
with expansion:
  96.506531 == 96.506531

./tests/test12.cpp:335: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(2001) == 97.415185 )
with expansion:
  97.415185 == 97.415185

./tests/test12.cpp:336: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(2002) == 98.258999 )
with expansion:
  98.258999 == 98.258999

./tests/test12.cpp:337: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(2003) == 98.813251 )
with expansion:
  98.813251 == 98.813251

./tests/test12.cpp:338: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(2004) == 99.722794 )
with expansion:
  99.722794 == 99.722794

./tests/test12.cpp:339: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(2005) == 99.813393 )
with expansion:
  99.813393 == 99.813393

./tests/test12.cpp:340: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(2006) == 100.372975 )
with expansion:
  100.372975 == 100.372975

./tests/test12.cpp:341: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(2007) == 101.060461 )
with expansion:
  101.060461 == 101.060461

./tests/test12.cpp:342: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(2008) == 101.587178 )
with expansion:
  101.587178 == 101.587178

./tests/test12.cpp:343: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(2009) == 101.811011 )
with expansion:
  101.811011 == 101.811011

./tests/test12.cpp:344: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(2010) == 101.863416 )
with expansion:
  101.863416 == 101.863416

./tests/test12.cpp:345: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(2011) == 102.435433 )
with expansion:
  102.435433 == 102.435433

./tests/test12.cpp:346: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(2012) == 102.63706 )
with expansion:
  102.63706 == 102.63706

./tests/test12.cpp:347: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(2013) == 102.955933 )
with expansion:
  102.955933 == 102.955933

./tests/test12.cpp:348: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(2014) == 103.407151 )
with expansion:
  103.407151 == 103.407151

./tests/test12.cpp:349: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(2015) == 103.433798 )
with expansion:
  103.433798 == 103.433798

./tests/test12.cpp:350: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(2016) == 103.762441 )
with expansion:
  103.762441 == 103.762441

./tests/test12.cpp:351: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(2017) == 103.800635 )
with expansion:
  103.800635 == 103.800635

./tests/test12.cpp:352: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(2018) == 104.08309 )
with expansion:
  104.08309 == 104.08309

./tests/test12.cpp:353: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("dens").getValue(2019) == 104.102631 )
with expansion:
  104.102631 == 104.102631

./tests/test12.cpp:355: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(1991) == 107951.0 )
with expansion:
  107951.0 == 107951.0

./tests/test12.cpp:356: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(1992) == 107782.0 )
with expansion:
  107782.0 == 107782.0

./tests/test12.cpp:357: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(1993) == 108142.0 )
with expansion:
  108142.0 == 108142.0

./tests/test12.cpp:358: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(1994) == 108891.0 )
with expansion:
  108891.0 == 108891.0

./tests/test12.cpp:359: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(1995) == 108940.0 )
with expansion:
  108940.0 == 108940.0

./tests/test12.cpp:360: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(1996) == 107897.0 )
with expansion:
  107897.0 == 107897.0

./tests/test12.cpp:361: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(1997) == 108174.0 )
with expansion:
  108174.0 == 108174.0

./tests/test12.cpp:362: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(1998) == 108470.0 )
with expansion:
  108470.0 == 108470.0

./tests/test12.cpp:363: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(1999) == 108322.0 )
with expansion:
  108322.0 == 108322.0

./tests/test12.cpp:364: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(2000) == 108651.0 )
with expansion:
  108651.0 == 108651.0

./tests/test12.cpp:365: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(2001) == 109674.0 )
with expansion:
  109674.0 == 109674.0

./tests/test12.cpp:366: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(2002) == 110624.0 )
with expansion:
  110624.0 == 110624.0

./tests/test12.cpp:367: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(2003) == 111248.0 )
with expansion:
  111248.0 == 111248.0

./tests/test12.cpp:368: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(2004) == 112272.0 )
with expansion:
  112272.0 == 112272.0

./tests/test12.cpp:369: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(2005) == 112374.0 )
with expansion:
  112374.0 == 112374.0

./tests/test12.cpp:370: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(2006) == 113004.0 )
with expansion:
  113004.0 == 113004.0

./tests/test12.cpp:371: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(2007) == 113778.0 )
with expansion:
  113778.0 == 113778.0

./tests/test12.cpp:372: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(2008) == 114371.0 )
with expansion:
  114371.0 == 114371.0

./tests/test12.cpp:373: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(2009) == 114623.0 )
with expansion:
  114623.0 == 114623.0

./tests/test12.cpp:374: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(2010) == 114682.0 )
with expansion:
  114682.0 == 114682.0

./tests/test12.cpp:375: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(2011) == 115326.0 )
with expansion:
  115326.0 == 115326.0

./tests/test12.cpp:376: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(2012) == 115553.0 )
with expansion:
  115553.0 == 115553.0

./tests/test12.cpp:377: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(2013) == 115912.0 )
with expansion:
  115912.0 == 115912.0

./tests/test12.cpp:378: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(2014) == 116420.0 )
with expansion:
  116420.0 == 116420.0

./tests/test12.cpp:379: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(2015) == 116450.0 )
with expansion:
  116450.0 == 116450.0

./tests/test12.cpp:380: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(2016) == 116820.0 )
with expansion:
  116820.0 == 116820.0

./tests/test12.cpp:381: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(2017) == 116863.0 )
with expansion:
  116863.0 == 116863.0

./tests/test12.cpp:382: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(2018) == 117181.0 )
with expansion:
  117181.0 == 117181.0

./tests/test12.cpp:383: PASSED:
  REQUIRE( areas.getArea("W06000003").getMeasure("pop").getValue(2019) == 117203.0 )
with expansion:
  117203.0 == 117203.0

./tests/test12.cpp:385: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(1991) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:386: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(1992) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:387: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(1993) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:388: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(1994) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:389: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(1995) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:390: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(1996) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:391: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(1997) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:392: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(1998) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:393: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(1999) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:394: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(2000) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:395: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(2001) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:396: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(2002) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:397: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(2003) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:398: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(2004) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:399: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(2005) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:400: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(2006) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:401: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(2007) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:402: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(2008) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:403: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(2009) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:404: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(2010) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:405: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(2011) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:406: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(2012) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:407: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(2013) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:408: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(2014) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:409: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(2015) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:410: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(2016) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:411: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(2017) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:412: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(2018) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:413: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("area").getValue(2019) == 836.7704 )
with expansion:
  836.7704 == 836.7704

./tests/test12.cpp:415: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(1991) == 106.833368 )
with expansion:
  106.833368 == 106.833368

./tests/test12.cpp:416: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(1992) == 106.503528 )
with expansion:
  106.503528 == 106.503528

./tests/test12.cpp:417: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(1993) == 106.809466 )
with expansion:
  106.809466 == 106.809466

./tests/test12.cpp:418: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(1994) == 107.044895 )
with expansion:
  107.044895 == 107.044895

./tests/test12.cpp:419: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(1995) == 107.450025 )
with expansion:
  107.450025 == 107.450025

./tests/test12.cpp:420: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(1996) == 108.300915 )
with expansion:
  108.300915 == 108.300915

./tests/test12.cpp:421: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(1997) == 108.29255 )
with expansion:
  108.29255 == 108.29255

./tests/test12.cpp:422: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(1998) == 108.692898 )
with expansion:
  108.692898 == 108.692898

./tests/test12.cpp:423: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(1999) == 109.359748 )
with expansion:
  109.359748 == 109.359748

./tests/test12.cpp:424: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(2000) == 110.57394 )
with expansion:
  110.57394 == 110.57394

./tests/test12.cpp:425: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(2001) == 111.225254 )
with expansion:
  111.225254 == 111.225254

./tests/test12.cpp:426: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(2002) == 111.712843 )
with expansion:
  111.712843 == 111.712843

./tests/test12.cpp:427: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(2003) == 112.183701 )
with expansion:
  112.183701 == 112.183701

./tests/test12.cpp:428: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(2004) == 112.34862 )
with expansion:
  112.34862 == 112.34862

./tests/test12.cpp:429: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(2005) == 112.310378 )
with expansion:
  112.310378 == 112.310378

./tests/test12.cpp:430: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(2006) == 112.316353 )
with expansion:
  112.316353 == 112.316353

./tests/test12.cpp:431: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(2007) == 112.970057 )
with expansion:
  112.970057 == 112.970057

./tests/test12.cpp:432: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(2008) == 113.219827 )
with expansion:
  113.219827 == 113.219827

./tests/test12.cpp:433: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(2009) == 112.867281 )
with expansion:
  112.867281 == 112.867281

./tests/test12.cpp:434: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(2010) == 112.51832 )
with expansion:
  112.51832 == 112.51832

./tests/test12.cpp:435: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(2011) == 112.239869 )
with expansion:
  112.239869 == 112.239869

./tests/test12.cpp:436: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(2012) == 112.400008 )
with expansion:
  112.400008 == 112.400008

./tests/test12.cpp:437: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(2013) == 112.955716 )
with expansion:
  112.955716 == 112.955716

./tests/test12.cpp:438: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(2014) == 113.336944 )
with expansion:
  113.336944 == 113.336944

./tests/test12.cpp:439: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(2015) == 113.335749 )
with expansion:
  113.335749 == 113.335749

./tests/test12.cpp:440: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(2016) == 113.512619 )
with expansion:
  113.512619 == 113.512619

./tests/test12.cpp:441: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(2017) == 113.721757 )
with expansion:
  113.721757 == 113.721757

./tests/test12.cpp:442: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(2018) == 113.926114 )
with expansion:
  113.926114 == 113.926114

./tests/test12.cpp:443: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("dens").getValue(2019) == 114.36351 )
with expansion:
  114.36351 == 114.36351

./tests/test12.cpp:445: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(1991) == 89395.0 )
with expansion:
  89395.0 == 89395.0

./tests/test12.cpp:446: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(1992) == 89119.0 )
with expansion:
  89119.0 == 89119.0

./tests/test12.cpp:447: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(1993) == 89375.0 )
with expansion:
  89375.0 == 89375.0

./tests/test12.cpp:448: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(1994) == 89572.0 )
with expansion:
  89572.0 == 89572.0

./tests/test12.cpp:449: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(1995) == 89911.0 )
with expansion:
  89911.0 == 89911.0

./tests/test12.cpp:450: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(1996) == 90623.0 )
with expansion:
  90623.0 == 90623.0

./tests/test12.cpp:451: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(1997) == 90616.0 )
with expansion:
  90616.0 == 90616.0

./tests/test12.cpp:452: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(1998) == 90951.0 )
with expansion:
  90951.0 == 90951.0

./tests/test12.cpp:453: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(1999) == 91509.0 )
with expansion:
  91509.0 == 91509.0

./tests/test12.cpp:454: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(2000) == 92525.0 )
with expansion:
  92525.0 == 92525.0

./tests/test12.cpp:455: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(2001) == 93070.0 )
with expansion:
  93070.0 == 93070.0

./tests/test12.cpp:456: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(2002) == 93478.0 )
with expansion:
  93478.0 == 93478.0

./tests/test12.cpp:457: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(2003) == 93872.0 )
with expansion:
  93872.0 == 93872.0

./tests/test12.cpp:458: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(2004) == 94010.0 )
with expansion:
  94010.0 == 94010.0

./tests/test12.cpp:459: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(2005) == 93978.0 )
with expansion:
  93978.0 == 93978.0

./tests/test12.cpp:460: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(2006) == 93983.0 )
with expansion:
  93983.0 == 93983.0

./tests/test12.cpp:461: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(2007) == 94530.0 )
with expansion:
  94530.0 == 94530.0

./tests/test12.cpp:462: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(2008) == 94739.0 )
with expansion:
  94739.0 == 94739.0

./tests/test12.cpp:463: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(2009) == 94444.0 )
with expansion:
  94444.0 == 94444.0

./tests/test12.cpp:464: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(2010) == 94152.0 )
with expansion:
  94152.0 == 94152.0

./tests/test12.cpp:465: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(2011) == 93919.0 )
with expansion:
  93919.0 == 93919.0

./tests/test12.cpp:466: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(2012) == 94053.0 )
with expansion:
  94053.0 == 94053.0

./tests/test12.cpp:467: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(2013) == 94518.0 )
with expansion:
  94518.0 == 94518.0

./tests/test12.cpp:468: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(2014) == 94837.0 )
with expansion:
  94837.0 == 94837.0

./tests/test12.cpp:469: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(2015) == 94836.0 )
with expansion:
  94836.0 == 94836.0

./tests/test12.cpp:470: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(2016) == 94984.0 )
with expansion:
  94984.0 == 94984.0

./tests/test12.cpp:471: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(2017) == 95159.0 )
with expansion:
  95159.0 == 95159.0

./tests/test12.cpp:472: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(2018) == 95330.0 )
with expansion:
  95330.0 == 95330.0

./tests/test12.cpp:473: PASSED:
  REQUIRE( areas.getArea("W06000004").getMeasure("pop").getValue(2019) == 95696.0 )
with expansion:
  95696.0 == 95696.0

./tests/test12.cpp:475: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(1991) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:476: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(1992) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:477: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(1993) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:478: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(1994) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:479: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(1995) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:480: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(1996) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:481: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(1997) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:482: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(1998) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:483: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(1999) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:484: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(2000) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:485: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(2001) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:486: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(2002) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:487: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(2003) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:488: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(2004) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:489: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(2005) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:490: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(2006) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:491: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(2007) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:492: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(2008) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:493: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(2009) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:494: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(2010) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:495: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(2011) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:496: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(2012) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:497: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(2013) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:498: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(2014) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:499: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(2015) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:500: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(2016) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:501: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(2017) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:502: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(2018) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:503: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("area").getValue(2019) == 439.7241 )
with expansion:
  439.7241 == 439.7241

./tests/test12.cpp:505: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(1991) == 323.011634 )
with expansion:
  323.011634 == 323.011634

./tests/test12.cpp:506: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(1992) == 326.325075 )
with expansion:
  326.325075 == 326.325075

./tests/test12.cpp:507: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(1993) == 327.589504 )
with expansion:
  327.589504 == 327.589504

./tests/test12.cpp:508: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(1994) == 328.70384 )
with expansion:
  328.70384 == 328.70384

./tests/test12.cpp:509: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(1995) == 329.397456 )
with expansion:
  329.397456 == 329.397456

./tests/test12.cpp:510: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(1996) == 327.719131 )
with expansion:
  327.719131 == 327.719131

./tests/test12.cpp:511: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(1997) == 328.940351 )
with expansion:
  328.940351 == 328.940351

./tests/test12.cpp:512: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(1998) == 332.619931 )
with expansion:
  332.619931 == 332.619931

./tests/test12.cpp:513: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(1999) == 333.90028 )
with expansion:
  333.90028 == 333.90028

./tests/test12.cpp:514: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(2000) == 336.415493 )
with expansion:
  336.415493 == 336.415493

./tests/test12.cpp:515: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(2001) == 338.005126 )
with expansion:
  338.005126 == 338.005126

./tests/test12.cpp:516: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(2002) == 338.728307 )
with expansion:
  338.728307 == 338.728307

./tests/test12.cpp:517: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(2003) == 339.249088 )
with expansion:
  339.249088 == 339.249088

./tests/test12.cpp:518: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(2004) == 340.397536 )
with expansion:
  340.397536 == 340.397536

./tests/test12.cpp:519: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(2005) == 340.872834 )
with expansion:
  340.872834 == 340.872834

./tests/test12.cpp:520: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(2006) == 341.40726 )
with expansion:
  341.40726 == 341.40726

./tests/test12.cpp:521: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(2007) == 342.9787 )
with expansion:
  342.9787 == 342.9787

./tests/test12.cpp:522: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(2008) == 344.536495 )
with expansion:
  344.536495 == 344.536495

./tests/test12.cpp:523: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(2009) == 345.637185 )
with expansion:
  345.637185 == 345.637185

./tests/test12.cpp:524: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(2010) == 345.853229 )
with expansion:
  345.853229 == 345.853229

./tests/test12.cpp:525: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(2011) == 347.185883 )
with expansion:
  347.185883 == 347.185883

./tests/test12.cpp:526: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(2012) == 347.43604 )
with expansion:
  347.43604 == 347.43604

./tests/test12.cpp:527: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(2013) == 348.452587 )
with expansion:
  348.452587 == 348.452587

./tests/test12.cpp:528: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(2014) == 349.807982 )
with expansion:
  349.807982 == 349.807982

./tests/test12.cpp:529: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(2015) == 350.412907 )
with expansion:
  350.412907 == 350.412907

./tests/test12.cpp:530: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(2016) == 351.643224 )
with expansion:
  351.643224 == 351.643224

./tests/test12.cpp:531: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(2017) == 352.846251 )
with expansion:
  352.846251 == 352.846251

./tests/test12.cpp:532: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(2018) == 353.84233 )
with expansion:
  353.84233 == 353.84233

./tests/test12.cpp:533: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("dens").getValue(2019) == 354.995325 )
with expansion:
  354.995325 == 354.995325

./tests/test12.cpp:535: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(1991) == 142036.0 )
with expansion:
  142036.0 == 142036.0

./tests/test12.cpp:536: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(1992) == 143493.0 )
with expansion:
  143493.0 == 143493.0

./tests/test12.cpp:537: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(1993) == 144049.0 )
with expansion:
  144049.0 == 144049.0

./tests/test12.cpp:538: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(1994) == 144539.0 )
with expansion:
  144539.0 == 144539.0

./tests/test12.cpp:539: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(1995) == 144844.0 )
with expansion:
  144844.0 == 144844.0

./tests/test12.cpp:540: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(1996) == 144106.0 )
with expansion:
  144106.0 == 144106.0

./tests/test12.cpp:541: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(1997) == 144643.0 )
with expansion:
  144643.0 == 144643.0

./tests/test12.cpp:542: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(1998) == 146261.0 )
with expansion:
  146261.0 == 146261.0

./tests/test12.cpp:543: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(1999) == 146824.0 )
with expansion:
  146824.0 == 146824.0

./tests/test12.cpp:544: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(2000) == 147930.0 )
with expansion:
  147930.0 == 147930.0

./tests/test12.cpp:545: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(2001) == 148629.0 )
with expansion:
  148629.0 == 148629.0

./tests/test12.cpp:546: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(2002) == 148947.0 )
with expansion:
  148947.0 == 148947.0

./tests/test12.cpp:547: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(2003) == 149176.0 )
with expansion:
  149176.0 == 149176.0

./tests/test12.cpp:548: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(2004) == 149681.0 )
with expansion:
  149681.0 == 149681.0

./tests/test12.cpp:549: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(2005) == 149890.0 )
with expansion:
  149890.0 == 149890.0

./tests/test12.cpp:550: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(2006) == 150125.0 )
with expansion:
  150125.0 == 150125.0

./tests/test12.cpp:551: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(2007) == 150816.0 )
with expansion:
  150816.0 == 150816.0

./tests/test12.cpp:552: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(2008) == 151501.0 )
with expansion:
  151501.0 == 151501.0

./tests/test12.cpp:553: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(2009) == 151985.0 )
with expansion:
  151985.0 == 151985.0

./tests/test12.cpp:554: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(2010) == 152080.0 )
with expansion:
  152080.0 == 152080.0

./tests/test12.cpp:555: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(2011) == 152666.0 )
with expansion:
  152666.0 == 152666.0

./tests/test12.cpp:556: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(2012) == 152776.0 )
with expansion:
  152776.0 == 152776.0

./tests/test12.cpp:557: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(2013) == 153223.0 )
with expansion:
  153223.0 == 153223.0

./tests/test12.cpp:558: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(2014) == 153819.0 )
with expansion:
  153819.0 == 153819.0

./tests/test12.cpp:559: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(2015) == 154085.0 )
with expansion:
  154085.0 == 154085.0

./tests/test12.cpp:560: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(2016) == 154626.0 )
with expansion:
  154626.0 == 154626.0

./tests/test12.cpp:561: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(2017) == 155155.0 )
with expansion:
  155155.0 == 155155.0

./tests/test12.cpp:562: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(2018) == 155593.0 )
with expansion:
  155593.0 == 155593.0

./tests/test12.cpp:563: PASSED:
  REQUIRE( areas.getArea("W06000005").getMeasure("pop").getValue(2019) == 156100.0 )
with expansion:
  156100.0 == 156100.0

./tests/test12.cpp:565: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(1991) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:566: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(1992) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:567: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(1993) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:568: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(1994) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:569: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(1995) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:570: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(1996) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:571: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(1997) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:572: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(1998) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:573: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(1999) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:574: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(2000) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:575: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(2001) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:576: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(2002) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:577: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(2003) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:578: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(2004) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:579: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(2005) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:580: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(2006) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:581: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(2007) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:582: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(2008) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:583: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(2009) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:584: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(2010) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:585: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(2011) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:586: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(2012) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:587: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(2013) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:588: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(2014) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:589: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(2015) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:590: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(2016) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:591: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(2017) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:592: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(2018) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:593: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("area").getValue(2019) == 503.7739 )
with expansion:
  503.7739 == 503.7739

./tests/test12.cpp:595: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(1991) == 246.499471 )
with expansion:
  246.499471 == 246.499471

./tests/test12.cpp:596: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(1992) == 247.386774 )
with expansion:
  247.386774 == 247.386774

./tests/test12.cpp:597: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(1993) == 248.02595 )
with expansion:
  248.02595 == 248.02595

./tests/test12.cpp:598: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(1994) == 248.718721 )
with expansion:
  248.718721 == 248.718721

./tests/test12.cpp:599: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(1995) == 248.982728 )
with expansion:
  248.982728 == 248.982728

./tests/test12.cpp:600: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(1996) == 249.17329 )
with expansion:
  249.17329 == 249.17329

./tests/test12.cpp:601: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(1997) == 249.391642 )
with expansion:
  249.391642 == 249.391642

./tests/test12.cpp:602: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(1998) == 250.465536 )
with expansion:
  250.465536 == 250.465536

./tests/test12.cpp:603: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(1999) == 251.912614 )
with expansion:
  251.912614 == 251.912614

./tests/test12.cpp:604: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(2000) == 253.393437 )
with expansion:
  253.393437 == 253.393437

./tests/test12.cpp:605: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(2001) == 255.154148 )
with expansion:
  255.154148 == 255.154148

./tests/test12.cpp:606: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(2002) == 255.263323 )
with expansion:
  255.263323 == 255.263323

./tests/test12.cpp:607: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(2003) == 255.896544 )
with expansion:
  255.896544 == 255.896544

./tests/test12.cpp:608: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(2004) == 256.077181 )
with expansion:
  256.077181 == 256.077181

./tests/test12.cpp:609: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(2005) == 256.561525 )
with expansion:
  256.561525 == 256.561525

./tests/test12.cpp:610: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(2006) == 258.669613 )
with expansion:
  258.669613 == 258.669613

./tests/test12.cpp:611: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(2007) == 260.55935 )
with expansion:
  260.55935 == 260.55935

./tests/test12.cpp:612: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(2008) == 262.75875 )
with expansion:
  262.75875 == 262.75875

./tests/test12.cpp:613: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(2009) == 264.592906 )
with expansion:
  264.592906 == 264.592906

./tests/test12.cpp:614: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(2010) == 266.010208 )
with expansion:
  266.010208 == 266.010208

./tests/test12.cpp:615: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(2011) == 268.116312 )
with expansion:
  268.116312 == 268.116312

./tests/test12.cpp:616: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(2012) == 268.965899 )
with expansion:
  268.965899 == 268.965899

./tests/test12.cpp:617: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(2013) == 269.567359 )
with expansion:
  269.567359 == 269.567359

./tests/test12.cpp:618: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(2014) == 269.869082 )
with expansion:
  269.869082 == 269.869082

./tests/test12.cpp:619: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(2015) == 268.807098 )
with expansion:
  268.807098 == 268.807098

./tests/test12.cpp:620: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(2016) == 268.787248 )
with expansion:
  268.787248 == 268.787248

./tests/test12.cpp:621: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(2017) == 269.110805 )
with expansion:
  269.110805 == 269.110805

./tests/test12.cpp:622: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(2018) == 270.21249 )
with expansion:
  270.21249 == 270.21249

./tests/test12.cpp:623: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("dens").getValue(2019) == 269.877022 )
with expansion:
  269.877022 == 269.877022

./tests/test12.cpp:625: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(1991) == 124180.0 )
with expansion:
  124180.0 == 124180.0

./tests/test12.cpp:626: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(1992) == 124627.0 )
with expansion:
  124627.0 == 124627.0

./tests/test12.cpp:627: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(1993) == 124949.0 )
with expansion:
  124949.0 == 124949.0

./tests/test12.cpp:628: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(1994) == 125298.0 )
with expansion:
  125298.0 == 125298.0

./tests/test12.cpp:629: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(1995) == 125431.0 )
with expansion:
  125431.0 == 125431.0

./tests/test12.cpp:630: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(1996) == 125527.0 )
with expansion:
  125527.0 == 125527.0

./tests/test12.cpp:631: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(1997) == 125637.0 )
with expansion:
  125637.0 == 125637.0

./tests/test12.cpp:632: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(1998) == 126178.0 )
with expansion:
  126178.0 == 126178.0

./tests/test12.cpp:633: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(1999) == 126907.0 )
with expansion:
  126907.0 == 126907.0

./tests/test12.cpp:634: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(2000) == 127653.0 )
with expansion:
  127653.0 == 127653.0

./tests/test12.cpp:635: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(2001) == 128540.0 )
with expansion:
  128540.0 == 128540.0

./tests/test12.cpp:636: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(2002) == 128595.0 )
with expansion:
  128595.0 == 128595.0

./tests/test12.cpp:637: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(2003) == 128914.0 )
with expansion:
  128914.0 == 128914.0

./tests/test12.cpp:638: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(2004) == 129005.0 )
with expansion:
  129005.0 == 129005.0

./tests/test12.cpp:639: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(2005) == 129249.0 )
with expansion:
  129249.0 == 129249.0

./tests/test12.cpp:640: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(2006) == 130311.0 )
with expansion:
  130311.0 == 130311.0

./tests/test12.cpp:641: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(2007) == 131263.0 )
with expansion:
  131263.0 == 131263.0

./tests/test12.cpp:642: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(2008) == 132371.0 )
with expansion:
  132371.0 == 132371.0

./tests/test12.cpp:643: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(2009) == 133295.0 )
with expansion:
  133295.0 == 133295.0

./tests/test12.cpp:644: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(2010) == 134009.0 )
with expansion:
  134009.0 == 134009.0

./tests/test12.cpp:645: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(2011) == 135070.0 )
with expansion:
  135070.0 == 135070.0

./tests/test12.cpp:646: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(2012) == 135498.0 )
with expansion:
  135498.0 == 135498.0

./tests/test12.cpp:647: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(2013) == 135801.0 )
with expansion:
  135801.0 == 135801.0

./tests/test12.cpp:648: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(2014) == 135953.0 )
with expansion:
  135953.0 == 135953.0

./tests/test12.cpp:649: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(2015) == 135418.0 )
with expansion:
  135418.0 == 135418.0

./tests/test12.cpp:650: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(2016) == 135408.0 )
with expansion:
  135408.0 == 135408.0

./tests/test12.cpp:651: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(2017) == 135571.0 )
with expansion:
  135571.0 == 135571.0

./tests/test12.cpp:652: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(2018) == 136126.0 )
with expansion:
  136126.0 == 136126.0

./tests/test12.cpp:653: PASSED:
  REQUIRE( areas.getArea("W06000006").getMeasure("pop").getValue(2019) == 135957.0 )
with expansion:
  135957.0 == 135957.0

./tests/test12.cpp:655: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(1991) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:656: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(1992) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:657: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(1993) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:658: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(1994) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:659: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(1995) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:660: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(1996) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:661: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(1997) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:662: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(1998) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:663: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(1999) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:664: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(2000) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:665: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(2001) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:666: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(2002) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:667: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(2003) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:668: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(2004) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:669: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(2005) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:670: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(2006) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:671: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(2007) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:672: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(2008) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:673: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(2009) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:674: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(2010) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:675: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(2011) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:676: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(2012) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:677: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(2013) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:678: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(2014) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:679: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(2015) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:680: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(2016) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:681: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(2017) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:682: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(2018) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:683: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("area").getValue(2019) == 1785.5105 )
with expansion:
  1785.5105 == 1785.5105

./tests/test12.cpp:685: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(1991) == 36.926694 )
with expansion:
  36.926694 == 36.926694

./tests/test12.cpp:686: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(1992) == 37.824477 )
with expansion:
  37.824477 == 37.824477

./tests/test12.cpp:687: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(1993) == 38.562641 )
with expansion:
  38.562641 == 38.562641

./tests/test12.cpp:688: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(1994) == 39.16919 )
with expansion:
  39.16919 == 39.16919

./tests/test12.cpp:689: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(1995) == 39.662606 )
with expansion:
  39.662606 == 39.662606

./tests/test12.cpp:690: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(1996) == 39.545553 )
with expansion:
  39.545553 == 39.545553

./tests/test12.cpp:691: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(1997) == 40.21651 )
with expansion:
  40.21651 == 40.21651

./tests/test12.cpp:692: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(1998) == 40.614715 )
with expansion:
  40.614715 == 40.614715

./tests/test12.cpp:693: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(1999) == 41.470493 )
with expansion:
  41.470493 == 41.470493

./tests/test12.cpp:694: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(2000) == 41.97231 )
with expansion:
  41.97231 == 41.97231

./tests/test12.cpp:695: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(2001) == 42.23834 )
with expansion:
  42.23834 == 42.23834

./tests/test12.cpp:696: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(2002) == 42.284826 )
with expansion:
  42.284826 == 42.284826

./tests/test12.cpp:697: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(2003) == 42.330191 )
with expansion:
  42.330191 == 42.330191

./tests/test12.cpp:698: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(2004) == 42.438843 )
with expansion:
  42.438843 == 42.438843

./tests/test12.cpp:699: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(2005) == 42.276425 )
with expansion:
  42.276425 == 42.276425

./tests/test12.cpp:700: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(2006) == 42.196335 )
with expansion:
  42.196335 == 42.196335

./tests/test12.cpp:701: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(2007) == 42.187374 )
with expansion:
  42.187374 == 42.187374

./tests/test12.cpp:702: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(2008) == 41.988552 )
with expansion:
  41.988552 == 41.988552

./tests/test12.cpp:703: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(2009) == 41.804291 )
with expansion:
  41.804291 == 41.804291

./tests/test12.cpp:704: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(2010) == 42.126327 )
with expansion:
  42.126327 == 42.126327

./tests/test12.cpp:705: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(2011) == 42.168892 )
with expansion:
  42.168892 == 42.168892

./tests/test12.cpp:706: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(2012) == 42.526773 )
with expansion:
  42.526773 == 42.526773

./tests/test12.cpp:707: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(2013) == 42.446684 )
with expansion:
  42.446684 == 42.446684

./tests/test12.cpp:708: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(2014) == 42.079282 )
with expansion:
  42.079282 == 42.079282

./tests/test12.cpp:709: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(2015) == 41.562903 )
with expansion:
  41.562903 == 41.562903

./tests/test12.cpp:710: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(2016) == 41.257108 )
with expansion:
  41.257108 == 41.257108

./tests/test12.cpp:711: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(2017) == 40.927231 )
with expansion:
  40.927231 == 40.927231

./tests/test12.cpp:712: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(2018) == 40.880185 )
with expansion:
  40.880185 == 40.880185

./tests/test12.cpp:713: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("dens").getValue(2019) == 40.713846 )
with expansion:
  40.713846 == 40.713846

./tests/test12.cpp:715: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(1991) == 65933.0 )
with expansion:
  65933.0 == 65933.0

./tests/test12.cpp:716: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(1992) == 67536.0 )
with expansion:
  67536.0 == 67536.0

./tests/test12.cpp:717: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(1993) == 68854.0 )
with expansion:
  68854.0 == 68854.0

./tests/test12.cpp:718: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(1994) == 69937.0 )
with expansion:
  69937.0 == 69937.0

./tests/test12.cpp:719: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(1995) == 70818.0 )
with expansion:
  70818.0 == 70818.0

./tests/test12.cpp:720: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(1996) == 70609.0 )
with expansion:
  70609.0 == 70609.0

./tests/test12.cpp:721: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(1997) == 71807.0 )
with expansion:
  71807.0 == 71807.0

./tests/test12.cpp:722: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(1998) == 72518.0 )
with expansion:
  72518.0 == 72518.0

./tests/test12.cpp:723: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(1999) == 74046.0 )
with expansion:
  74046.0 == 74046.0

./tests/test12.cpp:724: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(2000) == 74942.0 )
with expansion:
  74942.0 == 74942.0

./tests/test12.cpp:725: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(2001) == 75417.0 )
with expansion:
  75417.0 == 75417.0

./tests/test12.cpp:726: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(2002) == 75500.0 )
with expansion:
  75500.0 == 75500.0

./tests/test12.cpp:727: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(2003) == 75581.0 )
with expansion:
  75581.0 == 75581.0

./tests/test12.cpp:728: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(2004) == 75775.0 )
with expansion:
  75775.0 == 75775.0

./tests/test12.cpp:729: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(2005) == 75485.0 )
with expansion:
  75485.0 == 75485.0

./tests/test12.cpp:730: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(2006) == 75342.0 )
with expansion:
  75342.0 == 75342.0

./tests/test12.cpp:731: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(2007) == 75326.0 )
with expansion:
  75326.0 == 75326.0

./tests/test12.cpp:732: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(2008) == 74971.0 )
with expansion:
  74971.0 == 74971.0

./tests/test12.cpp:733: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(2009) == 74642.0 )
with expansion:
  74642.0 == 74642.0

./tests/test12.cpp:734: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(2010) == 75217.0 )
with expansion:
  75217.0 == 75217.0

./tests/test12.cpp:735: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(2011) == 75293.0 )
with expansion:
  75293.0 == 75293.0

./tests/test12.cpp:736: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(2012) == 75932.0 )
with expansion:
  75932.0 == 75932.0

./tests/test12.cpp:737: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(2013) == 75789.0 )
with expansion:
  75789.0 == 75789.0

./tests/test12.cpp:738: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(2014) == 75133.0 )
with expansion:
  75133.0 == 75133.0

./tests/test12.cpp:739: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(2015) == 74211.0 )
with expansion:
  74211.0 == 74211.0

./tests/test12.cpp:740: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(2016) == 73665.0 )
with expansion:
  73665.0 == 73665.0

./tests/test12.cpp:741: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(2017) == 73076.0 )
with expansion:
  73076.0 == 73076.0

./tests/test12.cpp:742: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(2018) == 72992.0 )
with expansion:
  72992.0 == 72992.0

./tests/test12.cpp:743: PASSED:
  REQUIRE( areas.getArea("W06000008").getMeasure("pop").getValue(2019) == 72695.0 )
with expansion:
  72695.0 == 72695.0

./tests/test12.cpp:745: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(1991) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:746: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(1992) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:747: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(1993) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:748: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(1994) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:749: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(1995) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:750: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(1996) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:751: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(1997) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:752: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(1998) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:753: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(1999) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:754: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(2000) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:755: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(2001) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:756: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(2002) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:757: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(2003) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:758: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(2004) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:759: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(2005) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:760: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(2006) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:761: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(2007) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:762: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(2008) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:763: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(2009) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:764: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(2010) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:765: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(2011) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:766: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(2012) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:767: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(2013) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:768: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(2014) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:769: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(2015) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:770: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(2016) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:771: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(2017) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:772: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(2018) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:773: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("area").getValue(2019) == 1618.3449 )
with expansion:
  1618.3449 == 1618.3449

./tests/test12.cpp:775: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(1991) == 69.482099 )
with expansion:
  69.482099 == 69.482099

./tests/test12.cpp:776: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(1992) == 69.914639 )
with expansion:
  69.914639 == 69.914639

./tests/test12.cpp:777: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(1993) == 69.753363 )
with expansion:
  69.753363 == 69.753363

./tests/test12.cpp:778: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(1994) == 69.877564 )
with expansion:
  69.877564 == 69.877564

./tests/test12.cpp:779: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(1995) == 69.360369 )
with expansion:
  69.360369 == 69.360369

./tests/test12.cpp:780: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(1996) == 69.293635 )
with expansion:
  69.293635 == 69.293635

./tests/test12.cpp:781: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(1997) == 68.984059 )
with expansion:
  68.984059 == 68.984059

./tests/test12.cpp:782: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(1998) == 69.091576 )
with expansion:
  69.091576 == 69.091576

./tests/test12.cpp:783: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(1999) == 69.000743 )
with expansion:
  69.000743 == 69.000743

./tests/test12.cpp:784: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(2000) == 69.538947 )
with expansion:
  69.538947 == 69.538947

./tests/test12.cpp:785: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(2001) == 69.860263 )
with expansion:
  69.860263 == 69.860263

./tests/test12.cpp:786: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(2002) == 70.532555 )
with expansion:
  70.532555 == 70.532555

./tests/test12.cpp:787: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(2003) == 71.151088 )
with expansion:
  71.151088 == 71.151088

./tests/test12.cpp:788: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(2004) == 71.942637 )
with expansion:
  71.942637 == 71.942637

./tests/test12.cpp:789: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(2005) == 72.422139 )
with expansion:
  72.422139 == 72.422139

./tests/test12.cpp:790: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(2006) == 73.08578 )
with expansion:
  73.08578 == 73.08578

./tests/test12.cpp:791: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(2007) == 73.927381 )
with expansion:
  73.927381 == 73.927381

./tests/test12.cpp:792: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(2008) == 74.850546 )
with expansion:
  74.850546 == 74.850546

./tests/test12.cpp:793: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(2009) == 75.115632 )
with expansion:
  75.115632 == 75.115632

./tests/test12.cpp:794: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(2010) == 75.369595 )
with expansion:
  75.369595 == 75.369595

./tests/test12.cpp:795: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(2011) == 75.764443 )
with expansion:
  75.764443 == 75.764443

./tests/test12.cpp:796: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(2012) == 76.086995 )
with expansion:
  76.086995 == 76.086995

./tests/test12.cpp:797: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(2013) == 76.235294 )
with expansion:
  76.235294 == 76.235294

./tests/test12.cpp:798: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(2014) == 76.513974 )
with expansion:
  76.513974 == 76.513974

./tests/test12.cpp:799: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(2015) == 76.418197 )
with expansion:
  76.418197 == 76.418197

./tests/test12.cpp:800: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(2016) == 76.767937 )
with expansion:
  76.767937 == 76.767937

./tests/test12.cpp:801: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(2017) == 77.060829 )
with expansion:
  77.060829 == 77.060829

./tests/test12.cpp:802: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(2018) == 77.273392 )
with expansion:
  77.273392 == 77.273392

./tests/test12.cpp:803: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("dens").getValue(2019) == 77.744861 )
with expansion:
  77.744861 == 77.744861

./tests/test12.cpp:805: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(1991) == 112446.0 )
with expansion:
  112446.0 == 112446.0

./tests/test12.cpp:806: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(1992) == 113146.0 )
with expansion:
  113146.0 == 113146.0

./tests/test12.cpp:807: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(1993) == 112885.0 )
with expansion:
  112885.0 == 112885.0

./tests/test12.cpp:808: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(1994) == 113086.0 )
with expansion:
  113086.0 == 113086.0

./tests/test12.cpp:809: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(1995) == 112249.0 )
with expansion:
  112249.0 == 112249.0

./tests/test12.cpp:810: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(1996) == 112141.0 )
with expansion:
  112141.0 == 112141.0

./tests/test12.cpp:811: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(1997) == 111640.0 )
with expansion:
  111640.0 == 111640.0

./tests/test12.cpp:812: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(1998) == 111814.0 )
with expansion:
  111814.0 == 111814.0

./tests/test12.cpp:813: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(1999) == 111667.0 )
with expansion:
  111667.0 == 111667.0

./tests/test12.cpp:814: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(2000) == 112538.0 )
with expansion:
  112538.0 == 112538.0

./tests/test12.cpp:815: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(2001) == 113058.0 )
with expansion:
  113058.0 == 113058.0

./tests/test12.cpp:816: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(2002) == 114146.0 )
with expansion:
  114146.0 == 114146.0

./tests/test12.cpp:817: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(2003) == 115147.0 )
with expansion:
  115147.0 == 115147.0

./tests/test12.cpp:818: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(2004) == 116428.0 )
with expansion:
  116428.0 == 116428.0

./tests/test12.cpp:819: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(2005) == 117204.0 )
with expansion:
  117204.0 == 117204.0

./tests/test12.cpp:820: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(2006) == 118278.0 )
with expansion:
  118278.0 == 118278.0

./tests/test12.cpp:821: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(2007) == 119640.0 )
with expansion:
  119640.0 == 119640.0

./tests/test12.cpp:822: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(2008) == 121134.0 )
with expansion:
  121134.0 == 121134.0

./tests/test12.cpp:823: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(2009) == 121563.0 )
with expansion:
  121563.0 == 121563.0

./tests/test12.cpp:824: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(2010) == 121974.0 )
with expansion:
  121974.0 == 121974.0

./tests/test12.cpp:825: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(2011) == 122613.0 )
with expansion:
  122613.0 == 122613.0

./tests/test12.cpp:826: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(2012) == 123135.0 )
with expansion:
  123135.0 == 123135.0

./tests/test12.cpp:827: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(2013) == 123375.0 )
with expansion:
  123375.0 == 123375.0

./tests/test12.cpp:828: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(2014) == 123826.0 )
with expansion:
  123826.0 == 123826.0

./tests/test12.cpp:829: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(2015) == 123671.0 )
with expansion:
  123671.0 == 123671.0

./tests/test12.cpp:830: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(2016) == 124237.0 )
with expansion:
  124237.0 == 124237.0

./tests/test12.cpp:831: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(2017) == 124711.0 )
with expansion:
  124711.0 == 124711.0

./tests/test12.cpp:832: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(2018) == 125055.0 )
with expansion:
  125055.0 == 125055.0

./tests/test12.cpp:833: PASSED:
  REQUIRE( areas.getArea("W06000009").getMeasure("pop").getValue(2019) == 125818.0 )
with expansion:
  125818.0 == 125818.0

./tests/test12.cpp:835: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(1991) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:836: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(1992) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:837: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(1993) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:838: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(1994) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:839: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(1995) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:840: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(1996) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:841: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(1997) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:842: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(1998) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:843: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(1999) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:844: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(2000) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:845: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(2001) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:846: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(2002) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:847: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(2003) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:848: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(2004) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:849: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(2005) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:850: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(2006) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:851: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(2007) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:852: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(2008) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:853: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(2009) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:854: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(2010) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:855: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(2011) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:856: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(2012) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:857: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(2013) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:858: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(2014) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:859: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(2015) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:860: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(2016) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:861: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(2017) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:862: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(2018) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:863: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("area").getValue(2019) == 2370.2762 )
with expansion:
  2370.2762 == 2370.2762

./tests/test12.cpp:865: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(1991) == 71.605579 )
with expansion:
  71.605579 == 71.605579

./tests/test12.cpp:866: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(1992) == 71.411509 )
with expansion:
  71.411509 == 71.411509

./tests/test12.cpp:867: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(1993) == 71.40729 )
with expansion:
  71.40729 == 71.40729

./tests/test12.cpp:868: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(1994) == 71.705567 )
with expansion:
  71.705567 == 71.705567

./tests/test12.cpp:869: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(1995) == 72.168805 )
with expansion:
  72.168805 == 72.168805

./tests/test12.cpp:870: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(1996) == 72.204665 )
with expansion:
  72.204665 == 72.204665

./tests/test12.cpp:871: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(1997) == 72.368781 )
with expansion:
  72.368781 == 72.368781

./tests/test12.cpp:872: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(1998) == 72.581837 )
with expansion:
  72.581837 == 72.581837

./tests/test12.cpp:873: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(1999) == 72.704185 )
with expansion:
  72.704185 == 72.704185

./tests/test12.cpp:874: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(2000) == 72.934116 )
with expansion:
  72.934116 == 72.934116

./tests/test12.cpp:875: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(2001) == 73.262348 )
with expansion:
  73.262348 == 73.262348

./tests/test12.cpp:876: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(2002) == 73.674114 )
with expansion:
  73.674114 == 73.674114

./tests/test12.cpp:877: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(2003) == 74.309062 )
with expansion:
  74.309062 == 74.309062

./tests/test12.cpp:878: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(2004) == 74.880303 )
with expansion:
  74.880303 == 74.880303

./tests/test12.cpp:879: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(2005) == 75.193347 )
with expansion:
  75.193347 == 75.193347

./tests/test12.cpp:880: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(2006) == 75.731259 )
with expansion:
  75.731259 == 75.731259

./tests/test12.cpp:881: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(2007) == 76.494883 )
with expansion:
  76.494883 == 76.494883

./tests/test12.cpp:882: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(2008) == 77.002419 )
with expansion:
  77.002419 == 77.002419

./tests/test12.cpp:883: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(2009) == 77.141221 )
with expansion:
  77.141221 == 77.141221

./tests/test12.cpp:884: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(2010) == 77.20788 )
with expansion:
  77.20788 == 77.20788

./tests/test12.cpp:885: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(2011) == 77.61163 )
with expansion:
  77.61163 == 77.61163

./tests/test12.cpp:886: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(2012) == 77.768152 )
with expansion:
  77.768152 == 77.768152

./tests/test12.cpp:887: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(2013) == 77.91033 )
with expansion:
  77.91033 == 77.91033

./tests/test12.cpp:888: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(2014) == 78.036475 )
with expansion:
  78.036475 == 78.036475

./tests/test12.cpp:889: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(2015) == 78.154183 )
with expansion:
  78.154183 == 78.154183

./tests/test12.cpp:890: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(2016) == 78.368082 )
with expansion:
  78.368082 == 78.368082

./tests/test12.cpp:891: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(2017) == 78.662563 )
with expansion:
  78.662563 == 78.662563

./tests/test12.cpp:892: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(2018) == 79.133394 )
with expansion:
  79.133394 == 79.133394

./tests/test12.cpp:893: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("dens").getValue(2019) == 79.64093 )
with expansion:
  79.64093 == 79.64093

./tests/test12.cpp:895: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(1991) == 169725.0 )
with expansion:
  169725.0 == 169725.0

./tests/test12.cpp:896: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(1992) == 169265.0 )
with expansion:
  169265.0 == 169265.0

./tests/test12.cpp:897: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(1993) == 169255.0 )
with expansion:
  169255.0 == 169255.0

./tests/test12.cpp:898: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(1994) == 169962.0 )
with expansion:
  169962.0 == 169962.0

./tests/test12.cpp:899: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(1995) == 171060.0 )
with expansion:
  171060.0 == 171060.0

./tests/test12.cpp:900: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(1996) == 171145.0 )
with expansion:
  171145.0 == 171145.0

./tests/test12.cpp:901: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(1997) == 171534.0 )
with expansion:
  171534.0 == 171534.0

./tests/test12.cpp:902: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(1998) == 172039.0 )
with expansion:
  172039.0 == 172039.0

./tests/test12.cpp:903: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(1999) == 172329.0 )
with expansion:
  172329.0 == 172329.0

./tests/test12.cpp:904: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(2000) == 172874.0 )
with expansion:
  172874.0 == 172874.0

./tests/test12.cpp:905: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(2001) == 173652.0 )
with expansion:
  173652.0 == 173652.0

./tests/test12.cpp:906: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(2002) == 174628.0 )
with expansion:
  174628.0 == 174628.0

./tests/test12.cpp:907: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(2003) == 176133.0 )
with expansion:
  176133.0 == 176133.0

./tests/test12.cpp:908: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(2004) == 177487.0 )
with expansion:
  177487.0 == 177487.0

./tests/test12.cpp:909: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(2005) == 178229.0 )
with expansion:
  178229.0 == 178229.0

./tests/test12.cpp:910: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(2006) == 179504.0 )
with expansion:
  179504.0 == 179504.0

./tests/test12.cpp:911: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(2007) == 181314.0 )
with expansion:
  181314.0 == 181314.0

./tests/test12.cpp:912: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(2008) == 182517.0 )
with expansion:
  182517.0 == 182517.0

./tests/test12.cpp:913: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(2009) == 182846.0 )
with expansion:
  182846.0 == 182846.0

./tests/test12.cpp:914: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(2010) == 183004.0 )
with expansion:
  183004.0 == 183004.0

./tests/test12.cpp:915: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(2011) == 183961.0 )
with expansion:
  183961.0 == 183961.0

./tests/test12.cpp:916: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(2012) == 184332.0 )
with expansion:
  184332.0 == 184332.0

./tests/test12.cpp:917: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(2013) == 184669.0 )
with expansion:
  184669.0 == 184669.0

./tests/test12.cpp:918: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(2014) == 184968.0 )
with expansion:
  184968.0 == 184968.0

./tests/test12.cpp:919: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(2015) == 185247.0 )
with expansion:
  185247.0 == 185247.0

./tests/test12.cpp:920: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(2016) == 185754.0 )
with expansion:
  185754.0 == 185754.0

./tests/test12.cpp:921: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(2017) == 186452.0 )
with expansion:
  186452.0 == 186452.0

./tests/test12.cpp:922: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(2018) == 187568.0 )
with expansion:
  187568.0 == 187568.0

./tests/test12.cpp:923: PASSED:
  REQUIRE( areas.getArea("W06000010").getMeasure("pop").getValue(2019) == 188771.0 )
with expansion:
  188771.0 == 188771.0

./tests/test12.cpp:925: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(1991) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:926: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(1992) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:927: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(1993) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:928: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(1994) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:929: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(1995) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:930: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(1996) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:931: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(1997) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:932: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(1998) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:933: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(1999) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:934: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(2000) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:935: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(2001) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:936: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(2002) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:937: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(2003) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:938: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(2004) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:939: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(2005) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:940: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(2006) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:941: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(2007) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:942: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(2008) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:943: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(2009) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:944: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(2010) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:945: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(2011) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:946: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(2012) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:947: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(2013) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:948: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(2014) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:949: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(2015) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:950: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(2016) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:951: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(2017) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:952: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(2018) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:953: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("area").getValue(2019) == 377.5964 )
with expansion:
  377.5964 == 377.5964

./tests/test12.cpp:955: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(1991) == 608.435356 )
with expansion:
  608.435356 == 608.435356

./tests/test12.cpp:956: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(1992) == 608.083128 )
with expansion:
  608.083128 == 608.083128

./tests/test12.cpp:957: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(1993) == 607.391914 )
with expansion:
  607.391914 == 607.391914

./tests/test12.cpp:958: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(1994) == 604.452267 )
with expansion:
  604.452267 == 604.452267

./tests/test12.cpp:959: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(1995) == 603.196958 )
with expansion:
  603.196958 == 603.196958

./tests/test12.cpp:960: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(1996) == 601.698003 )
with expansion:
  601.698003 == 601.698003

./tests/test12.cpp:961: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(1997) == 600.54598 )
with expansion:
  600.54598 == 600.54598

./tests/test12.cpp:962: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(1998) == 597.733453 )
with expansion:
  597.733453 == 597.733453

./tests/test12.cpp:963: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(1999) == 596.086191 )
with expansion:
  596.086191 == 596.086191

./tests/test12.cpp:964: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(2000) == 594.483952 )
with expansion:
  594.483952 == 594.483952

./tests/test12.cpp:965: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(2001) == 591.803841 )
with expansion:
  591.803841 == 591.803841

./tests/test12.cpp:966: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(2002) == 595.225484 )
with expansion:
  595.225484 == 595.225484

./tests/test12.cpp:967: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(2003) == 599.449571 )
with expansion:
  599.449571 == 599.449571

./tests/test12.cpp:968: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(2004) == 604.285422 )
with expansion:
  604.285422 == 604.285422

./tests/test12.cpp:969: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(2005) == 607.386617 )
with expansion:
  607.386617 == 607.386617

./tests/test12.cpp:970: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(2006) == 611.216103 )
with expansion:
  611.216103 == 611.216103

./tests/test12.cpp:971: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(2007) == 615.630869 )
with expansion:
  615.630869 == 615.630869

./tests/test12.cpp:972: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(2008) == 620.077416 )
with expansion:
  620.077416 == 620.077416

./tests/test12.cpp:973: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(2009) == 623.949275 )
with expansion:
  623.949275 == 623.949275

./tests/test12.cpp:974: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(2010) == 628.47792 )
with expansion:
  628.47792 == 628.47792

./tests/test12.cpp:975: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(2011) == 632.132616 )
with expansion:
  632.132616 == 632.132616

./tests/test12.cpp:976: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(2012) == 634.169182 )
with expansion:
  634.169182 == 634.169182

./tests/test12.cpp:977: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(2013) == 635.8853 )
with expansion:
  635.8853 == 635.8853

./tests/test12.cpp:978: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(2014) == 638.157567 )
with expansion:
  638.157567 == 638.157567

./tests/test12.cpp:979: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(2015) == 641.732813 )
with expansion:
  641.732813 == 641.732813

./tests/test12.cpp:980: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(2016) == 647.41613 )
with expansion:
  647.41613 == 647.41613

./tests/test12.cpp:981: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(2017) == 650.11213 )
with expansion:
  650.11213 == 650.11213

./tests/test12.cpp:982: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(2018) == 652.723384 )
with expansion:
  652.723384 == 652.723384

./tests/test12.cpp:983: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("dens").getValue(2019) == 654.119054 )
with expansion:
  654.119054 == 654.119054

./tests/test12.cpp:985: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(1991) == 229743.0 )
with expansion:
  229743.0 == 229743.0

./tests/test12.cpp:986: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(1992) == 229610.0 )
with expansion:
  229610.0 == 229610.0

./tests/test12.cpp:987: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(1993) == 229349.0 )
with expansion:
  229349.0 == 229349.0

./tests/test12.cpp:988: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(1994) == 228239.0 )
with expansion:
  228239.0 == 228239.0

./tests/test12.cpp:989: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(1995) == 227765.0 )
with expansion:
  227765.0 == 227765.0

./tests/test12.cpp:990: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(1996) == 227199.0 )
with expansion:
  227199.0 == 227199.0

./tests/test12.cpp:991: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(1997) == 226764.0 )
with expansion:
  226764.0 == 226764.0

./tests/test12.cpp:992: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(1998) == 225702.0 )
with expansion:
  225702.0 == 225702.0

./tests/test12.cpp:993: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(1999) == 225080.0 )
with expansion:
  225080.0 == 225080.0

./tests/test12.cpp:994: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(2000) == 224475.0 )
with expansion:
  224475.0 == 224475.0

./tests/test12.cpp:995: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(2001) == 223463.0 )
with expansion:
  223463.0 == 223463.0

./tests/test12.cpp:996: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(2002) == 224755.0 )
with expansion:
  224755.0 == 224755.0

./tests/test12.cpp:997: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(2003) == 226350.0 )
with expansion:
  226350.0 == 226350.0

./tests/test12.cpp:998: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(2004) == 228176.0 )
with expansion:
  228176.0 == 228176.0

./tests/test12.cpp:999: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(2005) == 229347.0 )
with expansion:
  229347.0 == 229347.0

./tests/test12.cpp:1000: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(2006) == 230793.0 )
with expansion:
  230793.0 == 230793.0

./tests/test12.cpp:1001: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(2007) == 232460.0 )
with expansion:
  232460.0 == 232460.0

./tests/test12.cpp:1002: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(2008) == 234139.0 )
with expansion:
  234139.0 == 234139.0

./tests/test12.cpp:1003: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(2009) == 235601.0 )
with expansion:
  235601.0 == 235601.0

./tests/test12.cpp:1004: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(2010) == 237311.0 )
with expansion:
  237311.0 == 237311.0

./tests/test12.cpp:1005: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(2011) == 238691.0 )
with expansion:
  238691.0 == 238691.0

./tests/test12.cpp:1006: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(2012) == 239460.0 )
with expansion:
  239460.0 == 239460.0

./tests/test12.cpp:1007: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(2013) == 240108.0 )
with expansion:
  240108.0 == 240108.0

./tests/test12.cpp:1008: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(2014) == 240966.0 )
with expansion:
  240966.0 == 240966.0

./tests/test12.cpp:1009: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(2015) == 242316.0 )
with expansion:
  242316.0 == 242316.0

./tests/test12.cpp:1010: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(2016) == 244462.0 )
with expansion:
  244462.0 == 244462.0

./tests/test12.cpp:1011: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(2017) == 245480.0 )
with expansion:
  245480.0 == 245480.0

./tests/test12.cpp:1012: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(2018) == 246466.0 )
with expansion:
  246466.0 == 246466.0

./tests/test12.cpp:1013: PASSED:
  REQUIRE( areas.getArea("W06000011").getMeasure("pop").getValue(2019) == 246993.0 )
with expansion:
  246993.0 == 246993.0

./tests/test12.cpp:1015: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("area").getValue(1991) == 441.2447 )
with expansion:
  441.2447 == 441.2447

./tests/test12.cpp:1016: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("area").getValue(1992) == 441.2447 )
with expansion:
  441.2447 == 441.2447

./tests/test12.cpp:1017: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("area").getValue(1993) == 441.2447 )
with expansion:
  441.2447 == 441.2447

./tests/test12.cpp:1018: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("area").getValue(1996) == 441.2447 )
with expansion:
  441.2447 == 441.2447

./tests/test12.cpp:1019: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("area").getValue(1998) == 441.2447 )
with expansion:
  441.2447 == 441.2447

./tests/test12.cpp:1020: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("area").getValue(1999) == 441.2447 )
with expansion:
  441.2447 == 441.2447

./tests/test12.cpp:1021: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("area").getValue(2003) == 441.2447 )
with expansion:
  441.2447 == 441.2447

./tests/test12.cpp:1022: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("area").getValue(2004) == 441.2447 )
with expansion:
  441.2447 == 441.2447

./tests/test12.cpp:1023: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("area").getValue(2012) == 441.2447 )
with expansion:
  441.2447 == 441.2447

./tests/test12.cpp:1024: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("area").getValue(2013) == 441.2447 )
with expansion:
  441.2447 == 441.2447

./tests/test12.cpp:1025: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("area").getValue(2014) == 441.2447 )
with expansion:
  441.2447 == 441.2447

./tests/test12.cpp:1026: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("area").getValue(2015) == 441.2447 )
with expansion:
  441.2447 == 441.2447

./tests/test12.cpp:1027: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("area").getValue(2016) == 441.2447 )
with expansion:
  441.2447 == 441.2447

./tests/test12.cpp:1028: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("area").getValue(2017) == 441.2447 )
with expansion:
  441.2447 == 441.2447

./tests/test12.cpp:1029: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("area").getValue(2018) == 441.2447 )
with expansion:
  441.2447 == 441.2447

./tests/test12.cpp:1030: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("area").getValue(2019) == 441.2447 )
with expansion:
  441.2447 == 441.2447

./tests/test12.cpp:1032: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("dens").getValue(1991) == 314.664403 )
with expansion:
  314.664403 == 314.664403

./tests/test12.cpp:1033: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("dens").getValue(1992) == 313.875725 )
with expansion:
  313.875725 == 313.875725

./tests/test12.cpp:1034: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("dens").getValue(1993) == 313.247955 )
with expansion:
  313.247955 == 313.247955

./tests/test12.cpp:1035: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("dens").getValue(1998) == 308.411636 )
with expansion:
  308.411636 == 308.411636

./tests/test12.cpp:1036: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("dens").getValue(1999) == 306.759492 )
with expansion:
  306.759492 == 306.759492

./tests/test12.cpp:1037: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("dens").getValue(2003) == 308.747051 )
with expansion:
  308.747051 == 308.747051

./tests/test12.cpp:1038: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("dens").getValue(2013) == 316.982844 )
with expansion:
  316.982844 == 316.982844

./tests/test12.cpp:1039: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("dens").getValue(2014) == 318.310905 )
with expansion:
  318.310905 == 318.310905

./tests/test12.cpp:1040: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("dens").getValue(2015) == 319.428199 )
with expansion:
  319.428199 == 319.428199

./tests/test12.cpp:1041: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("dens").getValue(2016) == 321.087143 )
with expansion:
  321.087143 == 321.087143

./tests/test12.cpp:1042: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("dens").getValue(2017) == 322.020865 )
with expansion:
  322.020865 == 322.020865

./tests/test12.cpp:1043: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("dens").getValue(2018) == 323.870179 )
with expansion:
  323.870179 == 323.870179

./tests/test12.cpp:1044: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("dens").getValue(2019) == 324.797102 )
with expansion:
  324.797102 == 324.797102

./tests/test12.cpp:1046: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("pop").getValue(1991) == 138844.0 )
with expansion:
  138844.0 == 138844.0

./tests/test12.cpp:1047: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("pop").getValue(1992) == 138496.0 )
with expansion:
  138496.0 == 138496.0

./tests/test12.cpp:1048: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("pop").getValue(1998) == 136085.0 )
with expansion:
  136085.0 == 136085.0

./tests/test12.cpp:1049: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("pop").getValue(1999) == 135356.0 )
with expansion:
  135356.0 == 135356.0

./tests/test12.cpp:1050: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("pop").getValue(2001) == 134380.0 )
with expansion:
  134380.0 == 134380.0

./tests/test12.cpp:1051: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("pop").getValue(2002) == 134931.0 )
with expansion:
  134931.0 == 134931.0

./tests/test12.cpp:1052: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("pop").getValue(2004) == 137144.0 )
with expansion:
  137144.0 == 137144.0

./tests/test12.cpp:1053: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("pop").getValue(2005) == 137670.0 )
with expansion:
  137670.0 == 137670.0

./tests/test12.cpp:1054: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("pop").getValue(2013) == 139867.0 )
with expansion:
  139867.0 == 139867.0

./tests/test12.cpp:1055: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("pop").getValue(2014) == 140453.0 )
with expansion:
  140453.0 == 140453.0

./tests/test12.cpp:1056: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("pop").getValue(2015) == 140946.0 )
with expansion:
  140946.0 == 140946.0

./tests/test12.cpp:1057: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("pop").getValue(2016) == 141678.0 )
with expansion:
  141678.0 == 141678.0

./tests/test12.cpp:1058: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("pop").getValue(2018) == 142906.0 )
with expansion:
  142906.0 == 142906.0

./tests/test12.cpp:1059: PASSED:
  REQUIRE( areas.getArea("W06000012").getMeasure("pop").getValue(2019) == 143315.0 )
with expansion:
  143315.0 == 143315.0

./tests/test12.cpp:1061: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(1991) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1062: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(1992) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1063: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(1993) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1064: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(1994) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1065: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(1995) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1066: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(1996) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1067: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(1997) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1068: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(1998) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1069: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(1999) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1070: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(2000) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1071: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(2001) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1072: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(2002) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1073: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(2003) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1074: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(2004) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1075: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(2005) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1076: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(2006) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1077: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(2007) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1078: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(2008) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1079: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(2009) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1080: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(2010) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1081: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(2011) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1082: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(2012) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1083: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(2013) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1084: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(2014) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1085: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(2015) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1086: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(2016) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1087: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(2017) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1088: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(2018) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1089: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("area").getValue(2019) == 5180.6716 )
with expansion:
  5180.6716 == 5180.6716

./tests/test12.cpp:1091: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(1991) == 23.105692 )
with expansion:
  23.105692 == 23.105692

./tests/test12.cpp:1092: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(1992) == 23.234053 )
with expansion:
  23.234053 == 23.234053

./tests/test12.cpp:1093: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(1993) == 23.369943 )
with expansion:
  23.369943 == 23.369943

./tests/test12.cpp:1094: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(1994) == 23.433255 )
with expansion:
  23.433255 == 23.433255

./tests/test12.cpp:1095: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(1995) == 23.518765 )
with expansion:
  23.518765 == 23.518765

./tests/test12.cpp:1096: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(1996) == 23.926242 )
with expansion:
  23.926242 == 23.926242

./tests/test12.cpp:1097: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(1997) == 24.051708 )
with expansion:
  24.051708 == 24.051708

./tests/test12.cpp:1098: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(1998) == 24.212691 )
with expansion:
  24.212691 == 24.212691

./tests/test12.cpp:1099: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(1999) == 24.250138 )
with expansion:
  24.250138 == 24.250138

./tests/test12.cpp:1100: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(2000) == 24.347036 )
with expansion:
  24.347036 == 24.347036

./tests/test12.cpp:1101: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(2001) == 24.397995 )
with expansion:
  24.397995 == 24.397995

./tests/test12.cpp:1102: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(2002) == 24.542185 )
with expansion:
  24.542185 == 24.542185

./tests/test12.cpp:1103: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(2003) == 24.764164 )
with expansion:
  24.764164 == 24.764164

./tests/test12.cpp:1104: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(2004) == 25.009885 )
with expansion:
  25.009885 == 25.009885

./tests/test12.cpp:1105: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(2005) == 25.133807 )
with expansion:
  25.133807 == 25.133807

./tests/test12.cpp:1106: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(2006) == 25.293439 )
with expansion:
  25.293439 == 25.293439

./tests/test12.cpp:1107: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(2007) == 25.475848 )
with expansion:
  25.475848 == 25.475848

./tests/test12.cpp:1108: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(2008) == 25.646289 )
with expansion:
  25.646289 == 25.646289

./tests/test12.cpp:1109: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(2009) == 25.689719 )
with expansion:
  25.689719 == 25.689719

./tests/test12.cpp:1110: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(2010) == 25.648798 )
with expansion:
  25.648798 == 25.648798

./tests/test12.cpp:1111: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(2011) == 25.686052 )
with expansion:
  25.686052 == 25.686052

./tests/test12.cpp:1112: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(2012) == 25.675243 )
with expansion:
  25.675243 == 25.675243

./tests/test12.cpp:1113: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(2013) == 25.63104 )
with expansion:
  25.63104 == 25.63104

./tests/test12.cpp:1114: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(2014) == 25.629303 )
with expansion:
  25.629303 == 25.629303

./tests/test12.cpp:1115: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(2015) == 25.62023 )
with expansion:
  25.62023 == 25.62023

./tests/test12.cpp:1116: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(2016) == 25.544372 )
with expansion:
  25.544372 == 25.544372

./tests/test12.cpp:1117: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(2017) == 25.57873 )
with expansion:
  25.57873 == 25.57873

./tests/test12.cpp:1118: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(2018) == 25.565604 )
with expansion:
  25.565604 == 25.565604

./tests/test12.cpp:1119: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("dens").getValue(2019) == 25.563288 )
with expansion:
  25.563288 == 25.563288

./tests/test12.cpp:1121: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(1991) == 119703.0 )
with expansion:
  119703.0 == 119703.0

./tests/test12.cpp:1122: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(1992) == 120368.0 )
with expansion:
  120368.0 == 120368.0

./tests/test12.cpp:1123: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(1993) == 121072.0 )
with expansion:
  121072.0 == 121072.0

./tests/test12.cpp:1124: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(1994) == 121400.0 )
with expansion:
  121400.0 == 121400.0

./tests/test12.cpp:1125: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(1995) == 121843.0 )
with expansion:
  121843.0 == 121843.0

./tests/test12.cpp:1126: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(1996) == 123954.0 )
with expansion:
  123954.0 == 123954.0

./tests/test12.cpp:1127: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(1997) == 124604.0 )
with expansion:
  124604.0 == 124604.0

./tests/test12.cpp:1128: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(1998) == 125438.0 )
with expansion:
  125438.0 == 125438.0

./tests/test12.cpp:1129: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(1999) == 125632.0 )
with expansion:
  125632.0 == 125632.0

./tests/test12.cpp:1130: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(2000) == 126134.0 )
with expansion:
  126134.0 == 126134.0

./tests/test12.cpp:1131: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(2001) == 126398.0 )
with expansion:
  126398.0 == 126398.0

./tests/test12.cpp:1132: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(2002) == 127145.0 )
with expansion:
  127145.0 == 127145.0

./tests/test12.cpp:1133: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(2003) == 128295.0 )
with expansion:
  128295.0 == 128295.0

./tests/test12.cpp:1134: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(2004) == 129568.0 )
with expansion:
  129568.0 == 129568.0

./tests/test12.cpp:1135: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(2005) == 130210.0 )
with expansion:
  130210.0 == 130210.0

./tests/test12.cpp:1136: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(2006) == 131037.0 )
with expansion:
  131037.0 == 131037.0

./tests/test12.cpp:1137: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(2007) == 131982.0 )
with expansion:
  131982.0 == 131982.0

./tests/test12.cpp:1138: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(2008) == 132865.0 )
with expansion:
  132865.0 == 132865.0

./tests/test12.cpp:1139: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(2009) == 133090.0 )
with expansion:
  133090.0 == 133090.0

./tests/test12.cpp:1140: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(2010) == 132878.0 )
with expansion:
  132878.0 == 132878.0

./tests/test12.cpp:1141: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(2011) == 133071.0 )
with expansion:
  133071.0 == 133071.0

./tests/test12.cpp:1142: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(2012) == 133015.0 )
with expansion:
  133015.0 == 133015.0

./tests/test12.cpp:1143: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(2013) == 132786.0 )
with expansion:
  132786.0 == 132786.0

./tests/test12.cpp:1144: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(2014) == 132777.0 )
with expansion:
  132777.0 == 132777.0

./tests/test12.cpp:1145: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(2015) == 132730.0 )
with expansion:
  132730.0 == 132730.0

./tests/test12.cpp:1146: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(2016) == 132337.0 )
with expansion:
  132337.0 == 132337.0

./tests/test12.cpp:1147: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(2017) == 132515.0 )
with expansion:
  132515.0 == 132515.0

./tests/test12.cpp:1148: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(2018) == 132447.0 )
with expansion:
  132447.0 == 132447.0

./tests/test12.cpp:1149: PASSED:
  REQUIRE( areas.getArea("W06000023").getMeasure("pop").getValue(2019) == 132435.0 )
with expansion:
  132435.0 == 132435.0

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
-------------------------------------------------------------------------------
./tests/test12.cpp:30
...............................................................................

./tests/test12.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), an empty
             measuresFilter, and an empty yearsFilter
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test12.cpp:1164
...............................................................................

./tests/test12.cpp:1166: PASSED:
  REQUIRE_NOTHROW( areas.populateFromWelshStatsJSON(stream, BethYw::InputFiles::DATASETS[0].COLS, &areasFilter, &measuresFilter, &yearsFilter) )

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), an empty
             measuresFilter, and an empty yearsFilter
       Then: the Areas instance will be populated without exception
        And: the Areas instance has size 1
-------------------------------------------------------------------------------
./tests/test12.cpp:1168
...............................................................................

./tests/test12.cpp:1170: PASSED:
  REQUIRE( areas.size() == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
-------------------------------------------------------------------------------
./tests/test12.cpp:30
...............................................................................

./tests/test12.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), an empty
             measuresFilter, and an empty yearsFilter
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test12.cpp:1164
...............................................................................

./tests/test12.cpp:1166: PASSED:
  REQUIRE_NOTHROW( areas.populateFromWelshStatsJSON(stream, BethYw::InputFiles::DATASETS[0].COLS, &areasFilter, &measuresFilter, &yearsFilter) )

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), an empty
             measuresFilter, and an empty yearsFilter
       Then: the Areas instance will be populated without exception
        And: each imported Area in the Areas instance has correct size (3)
-------------------------------------------------------------------------------
./tests/test12.cpp:1174
...............................................................................

./tests/test12.cpp:1176: PASSED:
  REQUIRE( areas.getArea("W06000001").size() == 3 )
with expansion:
  3 == 3

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
-------------------------------------------------------------------------------
./tests/test12.cpp:30
...............................................................................

./tests/test12.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), an empty
             measuresFilter, and an empty yearsFilter
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test12.cpp:1164
...............................................................................

./tests/test12.cpp:1166: PASSED:
  REQUIRE_NOTHROW( areas.populateFromWelshStatsJSON(stream, BethYw::InputFiles::DATASETS[0].COLS, &areasFilter, &measuresFilter, &yearsFilter) )

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), an empty
             measuresFilter, and an empty yearsFilter
       Then: the Areas instance will be populated without exception
        And: attempting to retrieve an Area with an unexpected local authority
             code ('W06000002') throws a std::out_of_range error with exception
             message 'No area found matching W06000002'
-------------------------------------------------------------------------------
./tests/test12.cpp:1182
...............................................................................

./tests/test12.cpp:1184: PASSED:
  REQUIRE_THROWS_AS( areas.getArea("W06000002"), std::out_of_range )

./tests/test12.cpp:1185: PASSED:
  REQUIRE_THROWS_WITH( areas.getArea("W06000002"), exceptionMessage )
with expansion:
  "No area found matching W06000002" equals: "No area found matching W06000002"

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
-------------------------------------------------------------------------------
./tests/test12.cpp:30
...............................................................................

./tests/test12.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), an empty
             measuresFilter, and an empty yearsFilter
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test12.cpp:1164
...............................................................................

./tests/test12.cpp:1166: PASSED:
  REQUIRE_NOTHROW( areas.populateFromWelshStatsJSON(stream, BethYw::InputFiles::DATASETS[0].COLS, &areasFilter, &measuresFilter, &yearsFilter) )

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), an empty
             measuresFilter, and an empty yearsFilter
       Then: the Areas instance will be populated without exception
        And: each Measure in each imported Area in the Areas instance has
             correct size (29)
-------------------------------------------------------------------------------
./tests/test12.cpp:1189
...............................................................................

./tests/test12.cpp:1191: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:1192: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").size() == 29 )
with expansion:
  29 == 29

./tests/test12.cpp:1193: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").size() == 29 )
with expansion:
  29 == 29

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
-------------------------------------------------------------------------------
./tests/test12.cpp:30
...............................................................................

./tests/test12.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), an empty
             measuresFilter, and an empty yearsFilter
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test12.cpp:1164
...............................................................................

./tests/test12.cpp:1166: PASSED:
  REQUIRE_NOTHROW( areas.populateFromWelshStatsJSON(stream, BethYw::InputFiles::DATASETS[0].COLS, &areasFilter, &measuresFilter, &yearsFilter) )

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), an empty
             measuresFilter, and an empty yearsFilter
       Then: the Areas instance will be populated without exception
        And: each year in each Measure in each Area in the Areas instance has
             the correct value
-------------------------------------------------------------------------------
./tests/test12.cpp:1197
...............................................................................

./tests/test12.cpp:1199: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(1991) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1200: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(1992) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1201: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(1993) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1202: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(1994) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1203: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(1995) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1204: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(1996) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1205: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(1997) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1206: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(1998) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1207: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(1999) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1208: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2000) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1209: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2001) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1210: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2002) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1211: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2003) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1212: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2004) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1213: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2005) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1214: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2006) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1215: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2007) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1216: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2008) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1217: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2009) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1218: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2010) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1219: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2011) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1220: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2012) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1221: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2013) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1222: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2014) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1223: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2015) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1224: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2016) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1225: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2017) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1226: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2018) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1227: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("area").getValue(2019) == 711.6801 )
with expansion:
  711.6801 == 711.6801

./tests/test12.cpp:1229: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(1991) == 97.126504 )
with expansion:
  97.126504 == 97.126504

./tests/test12.cpp:1230: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(1992) == 97.486216 )
with expansion:
  97.486216 == 97.486216

./tests/test12.cpp:1231: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(1993) == 98.03843 )
with expansion:
  98.03843 == 98.03843

./tests/test12.cpp:1232: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(1994) == 97.216432 )
with expansion:
  97.216432 == 97.216432

./tests/test12.cpp:1233: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(1995) == 96.147131 )
with expansion:
  96.147131 == 96.147131

./tests/test12.cpp:1234: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(1996) == 96.380382 )
with expansion:
  96.380382 == 96.380382

./tests/test12.cpp:1235: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(1997) == 95.701706 )
with expansion:
  95.701706 == 95.701706

./tests/test12.cpp:1236: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(1998) == 95.115769 )
with expansion:
  95.115769 == 95.115769

./tests/test12.cpp:1237: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(1999) == 95.517635 )
with expansion:
  95.517635 == 95.517635

./tests/test12.cpp:1238: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2000) == 95.405225 )
with expansion:
  95.405225 == 95.405225

./tests/test12.cpp:1239: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2001) == 95.275953 )
with expansion:
  95.275953 == 95.275953

./tests/test12.cpp:1240: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2002) == 95.378528 )
with expansion:
  95.378528 == 95.378528

./tests/test12.cpp:1241: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2003) == 95.745265 )
with expansion:
  95.745265 == 95.745265

./tests/test12.cpp:1242: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2004) == 96.606607 )
with expansion:
  96.606607 == 96.606607

./tests/test12.cpp:1243: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2005) == 97.08716 )
with expansion:
  97.08716 == 97.08716

./tests/test12.cpp:1244: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2006) == 97.498862 )
with expansion:
  97.498862 == 97.498862

./tests/test12.cpp:1245: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2007) == 97.937261 )
with expansion:
  97.937261 == 97.937261

./tests/test12.cpp:1246: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2008) == 98.240769 )
with expansion:
  98.240769 == 98.240769

./tests/test12.cpp:1247: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2009) == 98.195805 )
with expansion:
  98.195805 == 98.195805

./tests/test12.cpp:1248: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2010) == 98.124143 )
with expansion:
  98.124143 == 98.124143

./tests/test12.cpp:1249: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2011) == 98.236553 )
with expansion:
  98.236553 == 98.236553

./tests/test12.cpp:1250: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2012) == 98.410789 )
with expansion:
  98.410789 == 98.410789

./tests/test12.cpp:1251: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2013) == 98.461373 )
with expansion:
  98.461373 == 98.461373

./tests/test12.cpp:1252: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2014) == 98.556922 )
with expansion:
  98.556922 == 98.556922

./tests/test12.cpp:1253: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2015) == 98.268871 )
with expansion:
  98.268871 == 98.268871

./tests/test12.cpp:1254: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2016) == 97.888082 )
with expansion:
  97.888082 == 97.888082

./tests/test12.cpp:1255: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2017) == 98.069343 )
with expansion:
  98.069343 == 98.069343

./tests/test12.cpp:1256: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2018) == 98.303999 )
with expansion:
  98.303999 == 98.303999

./tests/test12.cpp:1257: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("dens").getValue(2019) == 98.41922 )
with expansion:
  98.41922 == 98.41922

./tests/test12.cpp:1259: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1991) == 69123.0 )
with expansion:
  69123.0 == 69123.0

./tests/test12.cpp:1260: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1992) == 69379.0 )
with expansion:
  69379.0 == 69379.0

./tests/test12.cpp:1261: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1993) == 69772.0 )
with expansion:
  69772.0 == 69772.0

./tests/test12.cpp:1262: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1994) == 69187.0 )
with expansion:
  69187.0 == 69187.0

./tests/test12.cpp:1263: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1995) == 68426.0 )
with expansion:
  68426.0 == 68426.0

./tests/test12.cpp:1264: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1996) == 68592.0 )
with expansion:
  68592.0 == 68592.0

./tests/test12.cpp:1265: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1997) == 68109.0 )
with expansion:
  68109.0 == 68109.0

./tests/test12.cpp:1266: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1998) == 67692.0 )
with expansion:
  67692.0 == 67692.0

./tests/test12.cpp:1267: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1999) == 67978.0 )
with expansion:
  67978.0 == 67978.0

./tests/test12.cpp:1268: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2000) == 67898.0 )
with expansion:
  67898.0 == 67898.0

./tests/test12.cpp:1269: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2001) == 67806.0 )
with expansion:
  67806.0 == 67806.0

./tests/test12.cpp:1270: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2002) == 67879.0 )
with expansion:
  67879.0 == 67879.0

./tests/test12.cpp:1271: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2003) == 68140.0 )
with expansion:
  68140.0 == 68140.0

./tests/test12.cpp:1272: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2004) == 68753.0 )
with expansion:
  68753.0 == 68753.0

./tests/test12.cpp:1273: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2005) == 69095.0 )
with expansion:
  69095.0 == 69095.0

./tests/test12.cpp:1274: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2006) == 69388.0 )
with expansion:
  69388.0 == 69388.0

./tests/test12.cpp:1275: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2007) == 69700.0 )
with expansion:
  69700.0 == 69700.0

./tests/test12.cpp:1276: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2008) == 69916.0 )
with expansion:
  69916.0 == 69916.0

./tests/test12.cpp:1277: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2009) == 69884.0 )
with expansion:
  69884.0 == 69884.0

./tests/test12.cpp:1278: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2010) == 69833.0 )
with expansion:
  69833.0 == 69833.0

./tests/test12.cpp:1279: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2011) == 69913.0 )
with expansion:
  69913.0 == 69913.0

./tests/test12.cpp:1280: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2012) == 70037.0 )
with expansion:
  70037.0 == 70037.0

./tests/test12.cpp:1281: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2013) == 70073.0 )
with expansion:
  70073.0 == 70073.0

./tests/test12.cpp:1282: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2014) == 70141.0 )
with expansion:
  70141.0 == 70141.0

./tests/test12.cpp:1283: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2015) == 69936.0 )
with expansion:
  69936.0 == 69936.0

./tests/test12.cpp:1284: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2016) == 69665.0 )
with expansion:
  69665.0 == 69665.0

./tests/test12.cpp:1285: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2017) == 69794.0 )
with expansion:
  69794.0 == 69794.0

./tests/test12.cpp:1286: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2018) == 69961.0 )
with expansion:
  69961.0 == 69961.0

./tests/test12.cpp:1287: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2019) == 70043.0 )
with expansion:
  70043.0 == 70043.0

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
-------------------------------------------------------------------------------
./tests/test12.cpp:30
...............................................................................

./tests/test12.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter with a single measure ('pop'), and an empty
             yearsFilter
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test12.cpp:1303
...............................................................................

./tests/test12.cpp:1305: PASSED:
  REQUIRE_NOTHROW( areas.populateFromWelshStatsJSON(stream, BethYw::InputFiles::DATASETS[0].COLS, &areasFilter, &measuresFilter, &yearsFilter) )

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter with a single measure ('pop'), and an empty
             yearsFilter
       Then: the Areas instance will be populated without exception
        And: the Areas instance has size 1
-------------------------------------------------------------------------------
./tests/test12.cpp:1307
...............................................................................

./tests/test12.cpp:1309: PASSED:
  REQUIRE( areas.size() == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
-------------------------------------------------------------------------------
./tests/test12.cpp:30
...............................................................................

./tests/test12.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter with a single measure ('pop'), and an empty
             yearsFilter
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test12.cpp:1303
...............................................................................

./tests/test12.cpp:1305: PASSED:
  REQUIRE_NOTHROW( areas.populateFromWelshStatsJSON(stream, BethYw::InputFiles::DATASETS[0].COLS, &areasFilter, &measuresFilter, &yearsFilter) )

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter with a single measure ('pop'), and an empty
             yearsFilter
       Then: the Areas instance will be populated without exception
        And: each imported Area in the Areas instance has correct size (1)
-------------------------------------------------------------------------------
./tests/test12.cpp:1313
...............................................................................

./tests/test12.cpp:1315: PASSED:
  REQUIRE( areas.getArea("W06000001").size() == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
-------------------------------------------------------------------------------
./tests/test12.cpp:30
...............................................................................

./tests/test12.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter with a single measure ('pop'), and an empty
             yearsFilter
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test12.cpp:1303
...............................................................................

./tests/test12.cpp:1305: PASSED:
  REQUIRE_NOTHROW( areas.populateFromWelshStatsJSON(stream, BethYw::InputFiles::DATASETS[0].COLS, &areasFilter, &measuresFilter, &yearsFilter) )

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter with a single measure ('pop'), and an empty
             yearsFilter
       Then: the Areas instance will be populated without exception
        And: attempting to retrieve an Area with an unexpected local authority
             code ('W06000002') throws a std::out_of_range error with exception
             message 'No area found matching W06000002'
-------------------------------------------------------------------------------
./tests/test12.cpp:1320
...............................................................................

./tests/test12.cpp:1322: PASSED:
  REQUIRE_THROWS_AS( areas.getArea("W06000002"), std::out_of_range )

./tests/test12.cpp:1323: PASSED:
  REQUIRE_THROWS_WITH( areas.getArea("W06000002"), exceptionMessage )
with expansion:
  "No area found matching W06000002" equals: "No area found matching W06000002"

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
-------------------------------------------------------------------------------
./tests/test12.cpp:30
...............................................................................

./tests/test12.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter with a single measure ('pop'), and an empty
             yearsFilter
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test12.cpp:1303
...............................................................................

./tests/test12.cpp:1305: PASSED:
  REQUIRE_NOTHROW( areas.populateFromWelshStatsJSON(stream, BethYw::InputFiles::DATASETS[0].COLS, &areasFilter, &measuresFilter, &yearsFilter) )

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter with a single measure ('pop'), and an empty
             yearsFilter
       Then: the Areas instance will be populated without exception
        And: attempting to retrieve a Measure with an unexpected codename
             ('dens') throws a std::out_of_range error with exception message
             'No measure found matching dens'
-------------------------------------------------------------------------------
./tests/test12.cpp:1328
...............................................................................

./tests/test12.cpp:1330: PASSED:
  REQUIRE_THROWS_AS( areas.getArea("W06000001").getMeasure("dens"), std::out_of_range )

./tests/test12.cpp:1331: PASSED:
  REQUIRE_THROWS_WITH( areas.getArea("W06000001").getMeasure("dens"), exceptionMessage2 )
with expansion:
  "No measure found matching dens" equals: "No measure found matching dens"

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
-------------------------------------------------------------------------------
./tests/test12.cpp:30
...............................................................................

./tests/test12.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter with a single measure ('pop'), and an empty
             yearsFilter
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test12.cpp:1303
...............................................................................

./tests/test12.cpp:1305: PASSED:
  REQUIRE_NOTHROW( areas.populateFromWelshStatsJSON(stream, BethYw::InputFiles::DATASETS[0].COLS, &areasFilter, &measuresFilter, &yearsFilter) )

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter with a single measure ('pop'), and an empty
             yearsFilter
       Then: the Areas instance will be populated without exception
        And: each Measure in each imported Area in the Areas instance has
             correct size (29)
-------------------------------------------------------------------------------
./tests/test12.cpp:1335
...............................................................................

./tests/test12.cpp:1337: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").size() == 29 )
with expansion:
  29 == 29

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
-------------------------------------------------------------------------------
./tests/test12.cpp:30
...............................................................................

./tests/test12.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter with a single measure ('pop'), and an empty
             yearsFilter
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test12.cpp:1303
...............................................................................

./tests/test12.cpp:1305: PASSED:
  REQUIRE_NOTHROW( areas.populateFromWelshStatsJSON(stream, BethYw::InputFiles::DATASETS[0].COLS, &areasFilter, &measuresFilter, &yearsFilter) )

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter with a single measure ('pop'), and an empty
             yearsFilter
       Then: the Areas instance will be populated without exception
        And: each year in each Measure in each Area in the Areas instance has
             the correct value
-------------------------------------------------------------------------------
./tests/test12.cpp:1341
...............................................................................

./tests/test12.cpp:1343: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1991) == 69123.0 )
with expansion:
  69123.0 == 69123.0

./tests/test12.cpp:1344: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1992) == 69379.0 )
with expansion:
  69379.0 == 69379.0

./tests/test12.cpp:1345: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1993) == 69772.0 )
with expansion:
  69772.0 == 69772.0

./tests/test12.cpp:1346: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1994) == 69187.0 )
with expansion:
  69187.0 == 69187.0

./tests/test12.cpp:1347: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1995) == 68426.0 )
with expansion:
  68426.0 == 68426.0

./tests/test12.cpp:1348: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1996) == 68592.0 )
with expansion:
  68592.0 == 68592.0

./tests/test12.cpp:1349: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1997) == 68109.0 )
with expansion:
  68109.0 == 68109.0

./tests/test12.cpp:1350: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1998) == 67692.0 )
with expansion:
  67692.0 == 67692.0

./tests/test12.cpp:1351: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1999) == 67978.0 )
with expansion:
  67978.0 == 67978.0

./tests/test12.cpp:1352: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2000) == 67898.0 )
with expansion:
  67898.0 == 67898.0

./tests/test12.cpp:1353: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2001) == 67806.0 )
with expansion:
  67806.0 == 67806.0

./tests/test12.cpp:1354: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2002) == 67879.0 )
with expansion:
  67879.0 == 67879.0

./tests/test12.cpp:1355: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2003) == 68140.0 )
with expansion:
  68140.0 == 68140.0

./tests/test12.cpp:1356: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2004) == 68753.0 )
with expansion:
  68753.0 == 68753.0

./tests/test12.cpp:1357: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2005) == 69095.0 )
with expansion:
  69095.0 == 69095.0

./tests/test12.cpp:1358: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2006) == 69388.0 )
with expansion:
  69388.0 == 69388.0

./tests/test12.cpp:1359: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2007) == 69700.0 )
with expansion:
  69700.0 == 69700.0

./tests/test12.cpp:1360: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2008) == 69916.0 )
with expansion:
  69916.0 == 69916.0

./tests/test12.cpp:1361: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2009) == 69884.0 )
with expansion:
  69884.0 == 69884.0

./tests/test12.cpp:1362: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2010) == 69833.0 )
with expansion:
  69833.0 == 69833.0

./tests/test12.cpp:1363: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2011) == 69913.0 )
with expansion:
  69913.0 == 69913.0

./tests/test12.cpp:1364: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2012) == 70037.0 )
with expansion:
  70037.0 == 70037.0

./tests/test12.cpp:1365: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2013) == 70073.0 )
with expansion:
  70073.0 == 70073.0

./tests/test12.cpp:1366: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2014) == 70141.0 )
with expansion:
  70141.0 == 70141.0

./tests/test12.cpp:1367: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2015) == 69936.0 )
with expansion:
  69936.0 == 69936.0

./tests/test12.cpp:1368: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2016) == 69665.0 )
with expansion:
  69665.0 == 69665.0

./tests/test12.cpp:1369: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2017) == 69794.0 )
with expansion:
  69794.0 == 69794.0

./tests/test12.cpp:1370: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2018) == 69961.0 )
with expansion:
  69961.0 == 69961.0

./tests/test12.cpp:1371: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(2019) == 70043.0 )
with expansion:
  70043.0 == 70043.0

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
-------------------------------------------------------------------------------
./tests/test12.cpp:30
...............................................................................

./tests/test12.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter wth a single measure ('pop'), and a yearsFilter
             with a range ('1991-1995')
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test12.cpp:1387
...............................................................................

./tests/test12.cpp:1389: PASSED:
  REQUIRE_NOTHROW( areas.populateFromWelshStatsJSON(stream, BethYw::InputFiles::DATASETS[0].COLS, &areasFilter, &measuresFilter, &yearsFilter) )

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter wth a single measure ('pop'), and a yearsFilter
             with a range ('1991-1995')
       Then: the Areas instance will be populated without exception
        And: the Areas instance has size 1
-------------------------------------------------------------------------------
./tests/test12.cpp:1391
...............................................................................

./tests/test12.cpp:1393: PASSED:
  REQUIRE( areas.size() == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
-------------------------------------------------------------------------------
./tests/test12.cpp:30
...............................................................................

./tests/test12.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter wth a single measure ('pop'), and a yearsFilter
             with a range ('1991-1995')
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test12.cpp:1387
...............................................................................

./tests/test12.cpp:1389: PASSED:
  REQUIRE_NOTHROW( areas.populateFromWelshStatsJSON(stream, BethYw::InputFiles::DATASETS[0].COLS, &areasFilter, &measuresFilter, &yearsFilter) )

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter wth a single measure ('pop'), and a yearsFilter
             with a range ('1991-1995')
       Then: the Areas instance will be populated without exception
        And: each imported Area in the Areas instance has correct size (1)
-------------------------------------------------------------------------------
./tests/test12.cpp:1397
...............................................................................

./tests/test12.cpp:1399: PASSED:
  REQUIRE( areas.getArea("W06000001").size() == 1 )
with expansion:
  1 == 1

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
-------------------------------------------------------------------------------
./tests/test12.cpp:30
...............................................................................

./tests/test12.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter wth a single measure ('pop'), and a yearsFilter
             with a range ('1991-1995')
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test12.cpp:1387
...............................................................................

./tests/test12.cpp:1389: PASSED:
  REQUIRE_NOTHROW( areas.populateFromWelshStatsJSON(stream, BethYw::InputFiles::DATASETS[0].COLS, &areasFilter, &measuresFilter, &yearsFilter) )

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter wth a single measure ('pop'), and a yearsFilter
             with a range ('1991-1995')
       Then: the Areas instance will be populated without exception
        And: attempting to retrieve an Area with an unexpected local authority
             code ('W06000002') throws a std::out_of_range error with exception
             message 'No area found matching W06000002'
-------------------------------------------------------------------------------
./tests/test12.cpp:1404
...............................................................................

./tests/test12.cpp:1406: PASSED:
  REQUIRE_THROWS_AS( areas.getArea("W06000002"), std::out_of_range )

./tests/test12.cpp:1407: PASSED:
  REQUIRE_THROWS_WITH( areas.getArea("W06000002"), exceptionMessage )
with expansion:
  "No area found matching W06000002" equals: "No area found matching W06000002"

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
-------------------------------------------------------------------------------
./tests/test12.cpp:30
...............................................................................

./tests/test12.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter wth a single measure ('pop'), and a yearsFilter
             with a range ('1991-1995')
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test12.cpp:1387
...............................................................................

./tests/test12.cpp:1389: PASSED:
  REQUIRE_NOTHROW( areas.populateFromWelshStatsJSON(stream, BethYw::InputFiles::DATASETS[0].COLS, &areasFilter, &measuresFilter, &yearsFilter) )

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter wth a single measure ('pop'), and a yearsFilter
             with a range ('1991-1995')
       Then: the Areas instance will be populated without exception
        And: attempting to retrieve a Measure with an unexpected codename
             ('dens') throws a std::out_of_range error with exception message
             'No measure found matching dens'
-------------------------------------------------------------------------------
./tests/test12.cpp:1412
...............................................................................

./tests/test12.cpp:1414: PASSED:
  REQUIRE_THROWS_AS( areas.getArea("W06000001").getMeasure("dens"), std::out_of_range )

./tests/test12.cpp:1415: PASSED:
  REQUIRE_THROWS_WITH( areas.getArea("W06000001").getMeasure("dens"), exceptionMessage2 )
with expansion:
  "No measure found matching dens" equals: "No measure found matching dens"

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
-------------------------------------------------------------------------------
./tests/test12.cpp:30
...............................................................................

./tests/test12.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter wth a single measure ('pop'), and a yearsFilter
             with a range ('1991-1995')
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test12.cpp:1387
...............................................................................

./tests/test12.cpp:1389: PASSED:
  REQUIRE_NOTHROW( areas.populateFromWelshStatsJSON(stream, BethYw::InputFiles::DATASETS[0].COLS, &areasFilter, &measuresFilter, &yearsFilter) )

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter wth a single measure ('pop'), and a yearsFilter
             with a range ('1991-1995')
       Then: the Areas instance will be populated without exception
        And: each Measure in each imported Area in the Areas instance has
             correct size (5)
-------------------------------------------------------------------------------
./tests/test12.cpp:1419
...............................................................................

./tests/test12.cpp:1421: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").size() == 5 )
with expansion:
  5 == 5

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
-------------------------------------------------------------------------------
./tests/test12.cpp:30
...............................................................................

./tests/test12.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter wth a single measure ('pop'), and a yearsFilter
             with a range ('1991-1995')
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test12.cpp:1387
...............................................................................

./tests/test12.cpp:1389: PASSED:
  REQUIRE_NOTHROW( areas.populateFromWelshStatsJSON(stream, BethYw::InputFiles::DATASETS[0].COLS, &areasFilter, &measuresFilter, &yearsFilter) )

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter wth a single measure ('pop'), and a yearsFilter
             with a range ('1991-1995')
       Then: the Areas instance will be populated without exception
        And: attempting to retrieve a value with an unexpected year ('2000')
             throws a std::out_of_range error with exception message 'No value
             found for year 2000'
-------------------------------------------------------------------------------
./tests/test12.cpp:1426
...............................................................................

./tests/test12.cpp:1428: PASSED:
  REQUIRE_THROWS_AS( areas.getArea("W06000001").getMeasure("pop").getValue(2000), std::out_of_range )

./tests/test12.cpp:1429: PASSED:
  REQUIRE_THROWS_WITH( areas.getArea("W06000001").getMeasure("pop").getValue(2000), exceptionMessage3 )
with expansion:
  "No value found for year 2000" equals: "No value found for year 2000"

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
-------------------------------------------------------------------------------
./tests/test12.cpp:30
...............................................................................

./tests/test12.cpp:35: PASSED:
  REQUIRE( stream.is_open() )
with expansion:
  true

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter wth a single measure ('pop'), and a yearsFilter
             with a range ('1991-1995')
       Then: the Areas instance will be populated without exception
-------------------------------------------------------------------------------
./tests/test12.cpp:1387
...............................................................................

./tests/test12.cpp:1389: PASSED:
  REQUIRE_NOTHROW( areas.populateFromWelshStatsJSON(stream, BethYw::InputFiles::DATASETS[0].COLS, &areasFilter, &measuresFilter, &yearsFilter) )

-------------------------------------------------------------------------------
Scenario: popu1009.json can be correctly parsed
      Given: a newly constructed Areas instance
  And given: a valid popu1009.json file as an open std::istream
  And given: an areaFilter with a single area only ('W06000001'), a
             measuresFilter wth a single measure ('pop'), and a yearsFilter
             with a range ('1991-1995')
       Then: the Areas instance will be populated without exception
        And: each year in each Measure in each Area in the Areas instance has
             the correct value
-------------------------------------------------------------------------------
./tests/test12.cpp:1433
...............................................................................

./tests/test12.cpp:1435: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1991) == 69123.0 )
with expansion:
  69123.0 == 69123.0

./tests/test12.cpp:1436: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1992) == 69379.0 )
with expansion:
  69379.0 == 69379.0

./tests/test12.cpp:1437: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1993) == 69772.0 )
with expansion:
  69772.0 == 69772.0

./tests/test12.cpp:1438: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1994) == 69187.0 )
with expansion:
  69187.0 == 69187.0

./tests/test12.cpp:1439: PASSED:
  REQUIRE( areas.getArea("W06000001").getMeasure("pop").getValue(1995) == 68426.0 )
with expansion:
  68426.0 == 68426.0

===============================================================================
All tests passed (1515 assertions in 15 test cases)

________________________________________________________
Executed in  372.07 millis    fish           external
   usr time  367.98 millis  550.00 micros  367.43 millis
   sys time    3.53 millis  217.00 micros    3.31 millis 