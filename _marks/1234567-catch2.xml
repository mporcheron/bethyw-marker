<?xml version="1.0" encoding="UTF-8"?>
<Catch name="bethyw-test">
  <Group name="bethyw-test">
    <TestCase name="Scenario: the datasets program argument can be parsed correctly" tags="[args][datasets]" filename="./tests/test1.cpp" line="25">
      <Section name="Given: a --datasets program argument and value" filename="./tests/test1.cpp" line="27">
        <Section name="When: the value is an invalid dataset ('invalid')" filename="./tests/test1.cpp" line="29">
          <Section name="Then: a std::invalid_argument exception is thrown with the message 'No dataset matches key: invalid'" filename="./tests/test1.cpp" line="40">
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --datasets program argument and value" filename="./tests/test1.cpp" line="27">
        <Section name="When: the value is a valid datase ('popden')" filename="./tests/test1.cpp" line="49">
          <Section name="Then: the argument value is parsed without exception" filename="./tests/test1.cpp" line="58">
            <Section name="And: the response is a container with 1 value" filename="./tests/test1.cpp" line="62">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --datasets program argument and value" filename="./tests/test1.cpp" line="27">
        <Section name="When: the value is a valid datase ('popden')" filename="./tests/test1.cpp" line="49">
          <Section name="Then: the argument value is parsed without exception" filename="./tests/test1.cpp" line="58">
            <Section name="And: the container contains InputFileSource objects" filename="./tests/test1.cpp" line="69">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --datasets program argument and value" filename="./tests/test1.cpp" line="27">
        <Section name="When: the value is a valid datase ('popden')" filename="./tests/test1.cpp" line="49">
          <Section name="Then: the argument value is parsed without exception" filename="./tests/test1.cpp" line="58">
            <Section name="And: the correct InputFileSource instance is returned by numerical index" filename="./tests/test1.cpp" line="76">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --datasets program argument and value" filename="./tests/test1.cpp" line="27">
        <Section name="When: the program argument value contains two valid datasets ('popden' and 'biz')" filename="./tests/test1.cpp" line="87">
          <Section name="Then: the argument value is parsed without exception" filename="./tests/test1.cpp" line="96">
            <Section name="And: the response is a container with 2 values" filename="./tests/test1.cpp" line="100">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --datasets program argument and value" filename="./tests/test1.cpp" line="27">
        <Section name="When: the program argument value contains two valid datasets ('popden' and 'biz')" filename="./tests/test1.cpp" line="87">
          <Section name="Then: the argument value is parsed without exception" filename="./tests/test1.cpp" line="96">
            <Section name="And: the correct InputFileSource instances are returned by numerical index" filename="./tests/test1.cpp" line="107">
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --datasets program argument and value" filename="./tests/test1.cpp" line="27">
        <Section name="When: the program argument value contains one valid ('popden') and one invalid ('invalid') datasets" filename="./tests/test1.cpp" line="119">
          <Section name="Then: a std::invalid_argument exception is thrown with the message 'No dataset matches key: invalid'" filename="./tests/test1.cpp" line="130">
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --datasets program argument and value" filename="./tests/test1.cpp" line="27">
        <Section name="When: the program argument value contains one valid ('popden') and a request for all datasets ('all')" filename="./tests/test1.cpp" line="139">
          <Section name="Then: the argument value is parsed without exception" filename="./tests/test1.cpp" line="150">
            <Section name="And: the response is a container with 7 values" filename="./tests/test1.cpp" line="154">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --datasets program argument and value" filename="./tests/test1.cpp" line="27">
        <Section name="When: the program argument value contains one valid ('popden') and a request for all datasets ('all')" filename="./tests/test1.cpp" line="139">
          <Section name="Then: the argument value is parsed without exception" filename="./tests/test1.cpp" line="150">
            <Section name="And: the correct InputFileSource instances are returned by numerical index" filename="./tests/test1.cpp" line="161">
              <OverallResults successes="7" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="8" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="8" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="8" failures="0" expectedFailures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: the areas program argument can be parsed correctly" tags="[areas][args]" filename="./tests/test2.cpp" line="25">
      <Section name="Given: a --areas program argument and value" filename="./tests/test2.cpp" line="27">
        <Section name="When: the value is a single area ('W06000011')" filename="./tests/test2.cpp" line="29">
          <Section name="Then: the argument value is parsed without exception" filename="./tests/test2.cpp" line="38">
            <Section name="And: the response is a container with 1 value" filename="./tests/test2.cpp" line="42">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --areas program argument and value" filename="./tests/test2.cpp" line="27">
        <Section name="When: the value is a single area ('W06000011')" filename="./tests/test2.cpp" line="29">
          <Section name="Then: the argument value is parsed without exception" filename="./tests/test2.cpp" line="38">
            <Section name="And: the container contains the area in the program argument" filename="./tests/test2.cpp" line="49">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --areas program argument and value" filename="./tests/test2.cpp" line="27">
        <Section name="When: the value is multiple comma-separated areas ('W06000011', 'W06000001')" filename="./tests/test2.cpp" line="60">
          <Section name="Then: the argument value is parsed without exception" filename="./tests/test2.cpp" line="69">
            <Section name="And: the response is a container with 2 values" filename="./tests/test2.cpp" line="73">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --areas program argument and value" filename="./tests/test2.cpp" line="27">
        <Section name="When: the value is multiple comma-separated areas ('W06000011', 'W06000001')" filename="./tests/test2.cpp" line="60">
          <Section name="Then: the argument value is parsed without exception" filename="./tests/test2.cpp" line="69">
            <Section name="And: the container contains the areas in the program argument" filename="./tests/test2.cpp" line="80">
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --areas program argument and value" filename="./tests/test2.cpp" line="27">
        <Section name="When: the value is 'all'" filename="./tests/test2.cpp" line="92">
          <Section name="Then: the argument value is parsed without exception" filename="./tests/test2.cpp" line="101">
            <Section name="And: the response is a container with 0 values" filename="./tests/test2.cpp" line="105">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --areas program argument and value" filename="./tests/test2.cpp" line="27">
        <Section name="When: the value contains 'all' among other values ('W06000011')" filename="./tests/test2.cpp" line="116">
          <Section name="Then: the argument value is parsed without exception" filename="./tests/test2.cpp" line="125">
            <Section name="And: the response is a container with 0 values" filename="./tests/test2.cpp" line="129">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: the measures program argument can be parsed correctly" tags="[args][measures]" filename="./tests/test3.cpp" line="25">
      <Section name="Given: a --measures program argument and value" filename="./tests/test3.cpp" line="27">
        <Section name="When: the value is a single measure ('pop')" filename="./tests/test3.cpp" line="29">
          <Section name="Then: the argument value is parsed without exception" filename="./tests/test3.cpp" line="38">
            <Section name="And: the response is a container with 1 value" filename="./tests/test3.cpp" line="42">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --measures program argument and value" filename="./tests/test3.cpp" line="27">
        <Section name="When: the value is a single measure ('pop')" filename="./tests/test3.cpp" line="29">
          <Section name="Then: the argument value is parsed without exception" filename="./tests/test3.cpp" line="38">
            <Section name="And: the container contains the measure in the program argument" filename="./tests/test3.cpp" line="49">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --measures program argument and value" filename="./tests/test3.cpp" line="27">
        <Section name="When: the value is multiple comma-separated measures ('pop', 'dens')" filename="./tests/test3.cpp" line="60">
          <Section name="Then: the argument value is parsed without exception" filename="./tests/test3.cpp" line="69">
            <Section name="And: the response is a container with 2 values" filename="./tests/test3.cpp" line="73">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --measures program argument and value" filename="./tests/test3.cpp" line="27">
        <Section name="When: the value is multiple comma-separated measures ('pop', 'dens')" filename="./tests/test3.cpp" line="60">
          <Section name="Then: the argument value is parsed without exception" filename="./tests/test3.cpp" line="69">
            <Section name="And: the container contains the measures in the program argument" filename="./tests/test3.cpp" line="80">
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --measures program argument and value" filename="./tests/test3.cpp" line="27">
        <Section name="When: the value is 'all'" filename="./tests/test3.cpp" line="92">
          <Section name="Then: the argument value is parsed without exception" filename="./tests/test3.cpp" line="101">
            <Section name="And: the response is a container with 0 values" filename="./tests/test3.cpp" line="105">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --measures program argument and value" filename="./tests/test3.cpp" line="27">
        <Section name="When: the value contains 'all' among other values ('dens')" filename="./tests/test3.cpp" line="116">
          <Section name="Then: the argument value is parsed without exception" filename="./tests/test3.cpp" line="125">
            <Section name="And: the response is a container with 0 values" filename="./tests/test3.cpp" line="129">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: the year program argument can be parsed correctly" tags="[args][years]" filename="./tests/test4.cpp" line="25">
      <Section name="Given: a --years argument with a value" filename="./tests/test4.cpp" line="27">
        <Section name="When: the value is a single four-digit year ('2010')" filename="./tests/test4.cpp" line="29">
          <Section name="Then: the argument value is parsed without exception" filename="./tests/test4.cpp" line="38">
            <Section name="And: the response is a two-pair tuple where both values are equal to the argument value" filename="./tests/test4.cpp" line="42">
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --years argument with a value" filename="./tests/test4.cpp" line="27">
        <Section name="When: the value is nill ('0')" filename="./tests/test4.cpp" line="54">
          <Section name="Then: the argument value is parsed without exception" filename="./tests/test4.cpp" line="63">
            <Section name="And: the response is a two-pair tuple where both values are equal to 0" filename="./tests/test4.cpp" line="67">
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --years argument with a value" filename="./tests/test4.cpp" line="27">
        <Section name="When: the value is nill ('0-0')" filename="./tests/test4.cpp" line="79">
          <Section name="Then: the argument value is parsed without exception" filename="./tests/test4.cpp" line="88">
            <Section name="And: the response is a two-pair tuple where both values are equal to 0" filename="./tests/test4.cpp" line="92">
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --years argument with a value" filename="./tests/test4.cpp" line="27">
        <Section name="When: the value is two four-digit years as a range ('2010-2015')" filename="./tests/test4.cpp" line="104">
          <Section name="Then: the argument value is parsed without exception" filename="./tests/test4.cpp" line="113">
            <Section name="And: the response is a two-pair tuple where the values are 2010 and 2015 respectively" filename="./tests/test4.cpp" line="117">
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --years argument with a value" filename="./tests/test4.cpp" line="27">
        <Section name="When: the value is not a number ('qwerty')" filename="./tests/test4.cpp" line="129">
          <Section name="Then: a std::invalid_argument exception is thrown with the message 'Invalid input for years argument'" filename="./tests/test4.cpp" line="140">
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --years argument with a value" filename="./tests/test4.cpp" line="27">
        <Section name="When: the value is partially numeric ('2010-qwerty')" filename="./tests/test4.cpp" line="149">
          <Section name="Then: a std::invalid_argument exception is thrown with the message 'Invalid input for years argument'" filename="./tests/test4.cpp" line="160">
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: a source file can be opened and read" tags="[InputFile][existent]" filename="./tests/test5.cpp" line="21">
      <Section name="Given: a valid file path" filename="./tests/test5.cpp" line="31">
        <Section name="Then: an InputFile instance can be constructed" filename="./tests/test5.cpp" line="33">
          <OverallResults successes="1" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="1" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a constructed InputFile instance" filename="./tests/test5.cpp" line="41">
        <Section name="Then: the source value can be retrieved" filename="./tests/test5.cpp" line="45">
          <OverallResults successes="1" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="1" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a constructed InputFile instance" filename="./tests/test5.cpp" line="41">
        <Section name="Then: a stream to source file can be opened without exception" filename="./tests/test5.cpp" line="51">
          <Section name="And: the stream remains open after open() returns" filename="./tests/test5.cpp" line="56">
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="5" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="5" failures="0" expectedFailures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: a nonexistant source file cannot be opened for reading" tags="[InputFile][nonexistent]" filename="./tests/test5.cpp" line="72">
      <Section name="Given: a valid file path" filename="./tests/test5.cpp" line="82">
        <Section name="Then: an InputFile instance can be constructed" filename="./tests/test5.cpp" line="84">
          <OverallResults successes="1" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="1" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a constructed InputFile instance" filename="./tests/test5.cpp" line="92">
        <Section name="Then: the source value can be retrieved" filename="./tests/test5.cpp" line="96">
          <Section name="And: when the source file is attempted to be read, a std::runtime_error is thrown with message InputFile::import: Failed to open file" filename="./tests/test5.cpp" line="102">
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: a Measure object can be constructed with a codename and label" tags="[Measure][construct]" filename="./tests/test6.cpp" line="22">
      <Section name="Given: a codename and a label as std::string instances" filename="./tests/test6.cpp" line="24">
        <Section name="Then: a Measure instance can be constructed" filename="./tests/test6.cpp" line="29">
          <OverallResults successes="1" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="1" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Measure instance with a codename and label" filename="./tests/test6.cpp" line="37">
        <Section name="Then: the codename can be retrieved" filename="./tests/test6.cpp" line="39">
          <OverallResults successes="1" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="1" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Measure instance with a codename and label" filename="./tests/test6.cpp" line="37">
        <Section name="Then: the codename will be converted to lowercase" filename="./tests/test6.cpp" line="49">
          <OverallResults successes="1" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="1" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Measure instance with a codename and label" filename="./tests/test6.cpp" line="37">
        <Section name="Then: the label can be retreived" filename="./tests/test6.cpp" line="60">
          <OverallResults successes="1" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="1" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Measure instance with a codename and label" filename="./tests/test6.cpp" line="37">
        <Section name="Then: the instance has size 0" filename="./tests/test6.cpp" line="70">
          <OverallResults successes="1" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="1" failures="0" expectedFailures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: a Measure object can be populated with values" tags="[Measure][populate]" filename="./tests/test7.cpp" line="22">
      <Section name="Given: a newly constructed Measure instance" filename="./tests/test7.cpp" line="24">
        <Section name="When: there is a single year:value to insert" filename="./tests/test7.cpp" line="30">
          <Section name="Then: they will be emplaced without exception" filename="./tests/test7.cpp" line="35">
            <Section name="And: the size will be 1" filename="./tests/test7.cpp" line="39">
              <Section name="And: the value can be retrieved" filename="./tests/test7.cpp" line="43">
                <OverallResults successes="1" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Measure instance" filename="./tests/test7.cpp" line="24">
        <Section name="When: there are two different year:value pairs to insert" filename="./tests/test7.cpp" line="55">
          <Section name="Then: they will both be emplaced without exception" filename="./tests/test7.cpp" line="62">
            <Section name="And: the size will be 2" filename="./tests/test7.cpp" line="67">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Measure instance" filename="./tests/test7.cpp" line="24">
        <Section name="When: there are two different year:value pairs to insert" filename="./tests/test7.cpp" line="55">
          <Section name="Then: they will both be emplaced without exception" filename="./tests/test7.cpp" line="62">
            <Section name="And: both values can be retrieved" filename="./tests/test7.cpp" line="73">
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="4" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="4" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="4" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Measure instance" filename="./tests/test7.cpp" line="24">
        <Section name="When: there are two year:value pairs to insert, both with the same year" filename="./tests/test7.cpp" line="84">
          <Section name="Then: they will both be emplaced without exception" filename="./tests/test7.cpp" line="91">
            <Section name="And: the size will be 1" filename="./tests/test7.cpp" line="96">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Measure instance" filename="./tests/test7.cpp" line="24">
        <Section name="When: there are two year:value pairs to insert, both with the same year" filename="./tests/test7.cpp" line="84">
          <Section name="Then: they will both be emplaced without exception" filename="./tests/test7.cpp" line="91">
            <Section name="And: the second value will have replaced the first value" filename="./tests/test7.cpp" line="102">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Measure instance" filename="./tests/test7.cpp" line="24">
        <Section name="When: there are no inserted values" filename="./tests/test7.cpp" line="112">
          <Section name="Then: the size will be 0" filename="./tests/test7.cpp" line="114">
            <Section name="And: a std::out_of_range exception will be thrown when you a value is requested for a given year" filename="./tests/test7.cpp" line="118">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: an Area instance be constructed with a local authority code" tags="[Area][construct]" filename="./tests/test8.cpp" line="21">
      <Section name="Given: a local authority code as a std::string" filename="./tests/test8.cpp" line="23">
        <Section name="Then: an Area instance can be constructed" filename="./tests/test8.cpp" line="27">
          <OverallResults successes="1" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="1" failures="0" expectedFailures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: an Area instance can have names in multiple languages" tags="[Area][names]" filename="./tests/test8.cpp" line="37">
      <Section name="Given: a newly constructed Area instance" filename="./tests/test8.cpp" line="39">
        <Section name="Then: the local authority code can be retrieved" filename="./tests/test8.cpp" line="44">
          <OverallResults successes="1" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="1" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Area instance" filename="./tests/test8.cpp" line="39">
        <Section name="Then: names in multiple languages can be set" filename="./tests/test8.cpp" line="50">
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Area instance" filename="./tests/test8.cpp" line="39">
        <Section name="Then: names in multiple languages can be set" filename="./tests/test8.cpp" line="50">
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Area instance" filename="./tests/test8.cpp" line="39">
        <Section name="Then: names in multiple languages can be set" filename="./tests/test8.cpp" line="50">
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Area instance" filename="./tests/test8.cpp" line="39">
        <Section name="Then: names in multiple languages can be set" filename="./tests/test8.cpp" line="50">
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Area instance" filename="./tests/test8.cpp" line="39">
        <Section name="Then: language codes are converted to lower case" filename="./tests/test8.cpp" line="60">
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Area instance" filename="./tests/test8.cpp" line="39">
        <Section name="Then: setting a name with a non-three letter code throws an std::invalid_argumet with the message Area::setName: Language code must be three alphabetical letters only" filename="./tests/test8.cpp" line="71">
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Area instance" filename="./tests/test8.cpp" line="39">
        <Section name="Then: setting a name with a non-three letter code throws an std::invalid_argumet with the message Area::setName: Language code must be three alphabetical letters only" filename="./tests/test8.cpp" line="71">
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Area instance" filename="./tests/test8.cpp" line="39">
        <Section name="Then: setting a name with a non-three letter code throws an std::invalid_argumet with the message Area::setName: Language code must be three alphabetical letters only" filename="./tests/test8.cpp" line="71">
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Area instance" filename="./tests/test8.cpp" line="39">
        <Section name="Then: the object contains no Measures" filename="./tests/test8.cpp" line="81">
          <OverallResults successes="1" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="1" failures="0" expectedFailures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: an Areas&lt;> instance can be constructed" tags="[Areas&lt;>][construct]" filename="./tests/test9.cpp" line="23">
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: an Areas&lt;> instance can contain Area instances" tags="[Areas&lt;>][contain]" filename="./tests/test9.cpp" line="29">
      <Section name="Given: a newly constructed Areas&lt;>" filename="./tests/test9.cpp" line="31">
        <Section name="Then: the Areas&lt;> instance has size 0" filename="./tests/test9.cpp" line="35">
          <OverallResults successes="1" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="1" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;>" filename="./tests/test9.cpp" line="31">
        <Section name="And given: a newly constructed Area instance ('W06000011')" filename="./tests/test9.cpp" line="41">
          <Section name="Then: the Area instance can be emplaced in the Areas&lt;> instance without exception" filename="./tests/test9.cpp" line="46">
            <Section name="And: the Areas&lt;> instance has size 1" filename="./tests/test9.cpp" line="50">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;>" filename="./tests/test9.cpp" line="31">
        <Section name="And given: a newly constructed Area instance ('W06000011')" filename="./tests/test9.cpp" line="41">
          <Section name="Then: the Area instance can be emplaced in the Areas&lt;> instance without exception" filename="./tests/test9.cpp" line="46">
            <Section name="And: the Area instance can be retrieved using the local authority code" filename="./tests/test9.cpp" line="56">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;>" filename="./tests/test9.cpp" line="31">
        <Section name="And given: two newly constructed Area instances with different local authority codes ('W06000011' and 'W06000012')" filename="./tests/test9.cpp" line="67">
          <Section name="Then: the Area instancse can be emplaced in the Areas&lt;> instance without exception" filename="./tests/test9.cpp" line="75">
            <Section name="And: the Areas&lt;> instance has size 2" filename="./tests/test9.cpp" line="80">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;>" filename="./tests/test9.cpp" line="31">
        <Section name="And given: two newly constructed Area instances with different local authority codes ('W06000011' and 'W06000012')" filename="./tests/test9.cpp" line="67">
          <Section name="Then: the Area instancse can be emplaced in the Areas&lt;> instance without exception" filename="./tests/test9.cpp" line="75">
            <Section name="And: the Area instances can be retrieved using the local authority code" filename="./tests/test9.cpp" line="86">
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="4" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="4" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="4" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;>" filename="./tests/test9.cpp" line="31">
        <Section name="And given: two newly constructed Area instances with the same local authority codes ('W06000011')" filename="./tests/test9.cpp" line="100">
          <Section name="Then: the Area instances can be emplaced in the Areas&lt;> instance without exception" filename="./tests/test9.cpp" line="107">
            <Section name="And: the Areas&lt;> instance has size 1" filename="./tests/test9.cpp" line="112">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;>" filename="./tests/test9.cpp" line="31">
        <Section name="And given: two newly constructed Area instances with the same local authority codes ('W06000011') but different sets of names" filename="./tests/test9.cpp" line="122">
          <Section name="Then: the Area instances can be emplaced in the Areas&lt;> instance without exception" filename="./tests/test9.cpp" line="143">
            <Section name="And: the Areas&lt;> instance has size 1" filename="./tests/test9.cpp" line="148">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;>" filename="./tests/test9.cpp" line="31">
        <Section name="And given: two newly constructed Area instances with the same local authority codes ('W06000011') but different sets of names" filename="./tests/test9.cpp" line="122">
          <Section name="Then: the Area instances can be emplaced in the Areas&lt;> instance without exception" filename="./tests/test9.cpp" line="143">
            <Section name="And: the names of the second Area instances will overwrite the first" filename="./tests/test9.cpp" line="154">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;>" filename="./tests/test9.cpp" line="31">
        <Section name="And given: two newly constructed Area instances with the same local authority codes ('W06000011') but overlapping Measures" filename="./tests/test9.cpp" line="166">
          <Section name="Then: the Area instances can be emplaced in the Areas&lt;> instance without exception" filename="./tests/test9.cpp" line="187">
            <Section name="And: the Areas&lt;> instance has size 1" filename="./tests/test9.cpp" line="192">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: areas.csv can be correctly parsed" tags="[Areas&lt;>][authorityCodeCSV]" filename="./tests/test10.cpp" line="23">
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test10.cpp" line="29">
        <Section name="And given: a valid areas.csv file as an open std::istream" filename="./tests/test10.cpp" line="33">
          <Section name="And given: an empty areasFilter" filename="./tests/test10.cpp" line="40">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test10.cpp" line="44">
              <Section name="And: the Areas&lt;> instance has size 22" filename="./tests/test10.cpp" line="48">
                <OverallResults successes="1" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test10.cpp" line="29">
        <Section name="And given: a valid areas.csv file as an open std::istream" filename="./tests/test10.cpp" line="33">
          <Section name="And given: an empty areasFilter" filename="./tests/test10.cpp" line="40">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test10.cpp" line="44">
              <Section name="And: each area has been imported with the correct local authority code as an Area instance (mixed)" filename="./tests/test10.cpp" line="54">
                <OverallResults successes="44" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="45" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="45" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="46" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="46" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test10.cpp" line="29">
        <Section name="And given: a valid areas.csv file as an open std::istream" filename="./tests/test10.cpp" line="33">
          <Section name="And given: an empty areasFilter" filename="./tests/test10.cpp" line="40">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test10.cpp" line="44">
              <Section name="And: each area has been correctly imported with the correct names (mixed)" filename="./tests/test10.cpp" line="104">
                <OverallResults successes="44" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="45" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="45" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="46" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="46" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test10.cpp" line="29">
        <Section name="And given: a valid areas.csv file as an open std::istream" filename="./tests/test10.cpp" line="33">
          <Section name="And given: an empty areasFilter" filename="./tests/test10.cpp" line="40">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test10.cpp" line="44">
              <Section name="And: attempting to retrieve an Area with an unexpected local authority code ('junk') throws a std::out_of_range error with exception message 'No area found matching junk'" filename="./tests/test10.cpp" line="175">
                <OverallResults successes="2" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="3" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="4" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="4" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test10.cpp" line="29">
        <Section name="And given: a valid areas.csv file as an open std::istream" filename="./tests/test10.cpp" line="33">
          <Section name="And given: a nullptr for an areasFilter" filename="./tests/test10.cpp" line="186">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test10.cpp" line="188">
              <Section name="And: the Areas&lt;> instance has size 22" filename="./tests/test10.cpp" line="192">
                <OverallResults successes="1" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: an Area instance can contain Measure instances" tags="[Area][Measures]" filename="./tests/test11.cpp" line="22">
      <Section name="Given: a newly constructed Area instance" filename="./tests/test11.cpp" line="24">
        <Section name="And given: a newly constructed Measure instance ('Pop')" filename="./tests/test11.cpp" line="29">
          <Section name="Then: the Measure instance can be emplace into the Area instance without exception" filename="./tests/test11.cpp" line="36">
            <Section name="And: the Area instance size will be 1" filename="./tests/test11.cpp" line="40">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Area instance" filename="./tests/test11.cpp" line="24">
        <Section name="And given: a newly constructed Measure instance ('Pop')" filename="./tests/test11.cpp" line="29">
          <Section name="Then: the Measure instance can be emplace into the Area instance without exception" filename="./tests/test11.cpp" line="36">
            <Section name="And: the Measure instance can be retrieved without exception with a lowercase codename" filename="./tests/test11.cpp" line="46">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Area instance" filename="./tests/test11.cpp" line="24">
        <Section name="And given: a newly constructed Measure instance ('Pop')" filename="./tests/test11.cpp" line="29">
          <Section name="Then: the Measure instance can be emplace into the Area instance without exception" filename="./tests/test11.cpp" line="36">
            <Section name="And: the Measure instance is equal to the original" filename="./tests/test11.cpp" line="52">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Area instance" filename="./tests/test11.cpp" line="24">
        <Section name="And given: two newly constructed Measure instances with two different codenames ('pop', 'dens')" filename="./tests/test11.cpp" line="63">
          <Section name="Then: the Measure instances can be emplace into the Area instance without exception" filename="./tests/test11.cpp" line="73">
            <Section name="And: the Area instance size will be 2" filename="./tests/test11.cpp" line="78">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Area instance" filename="./tests/test11.cpp" line="24">
        <Section name="And given: two newly constructed Measure instances with two different codenames ('pop', 'dens')" filename="./tests/test11.cpp" line="63">
          <Section name="Then: the Measure instances can be emplace into the Area instance without exception" filename="./tests/test11.cpp" line="73">
            <Section name="And: the Measure instances can be retrieved without exception" filename="./tests/test11.cpp" line="84">
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="4" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="4" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="4" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Area instance" filename="./tests/test11.cpp" line="24">
        <Section name="And given: two newly constructed Measure instances with two different codenames ('pop', 'dens')" filename="./tests/test11.cpp" line="63">
          <Section name="Then: the Measure instances can be emplace into the Area instance without exception" filename="./tests/test11.cpp" line="73">
            <Section name="And: the Measure instances are equal to the original" filename="./tests/test11.cpp" line="91">
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="4" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="4" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="4" failures="0" expectedFailures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: popu1009.json can be correctly parsed" tags="[Areas&lt;>][popu1009]" filename="./tests/test12.cpp" line="23">
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test12.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/test12.cpp" line="33">
          <Section name="And given: an empty areasFilter, measuresFilter, and yearsFilter" filename="./tests/test12.cpp" line="40">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test12.cpp" line="46">
              <Section name="And: the Areas&lt;> instance has size 12" filename="./tests/test12.cpp" line="50">
                <OverallResults successes="1" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test12.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/test12.cpp" line="33">
          <Section name="And given: an empty areasFilter, measuresFilter, and yearsFilter" filename="./tests/test12.cpp" line="40">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test12.cpp" line="46">
              <Section name="And: each Area in the Areas&lt;> instance has correct size (3)" filename="./tests/test12.cpp" line="56">
                <OverallResults successes="12" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="13" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="13" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="14" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="14" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test12.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/test12.cpp" line="33">
          <Section name="And given: an empty areasFilter, measuresFilter, and yearsFilter" filename="./tests/test12.cpp" line="40">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test12.cpp" line="46">
              <Section name="And: each Measure in each Area in the Areas&lt;> instance has correct size (mixed)" filename="./tests/test12.cpp" line="73">
                <OverallResults successes="36" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="37" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="37" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="38" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="38" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test12.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/test12.cpp" line="33">
          <Section name="And given: an empty areasFilter, measuresFilter, and yearsFilter" filename="./tests/test12.cpp" line="40">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test12.cpp" line="46">
              <Section name="And: each year in each Measure in each Area in the Areas&lt;> instance has the correct value" filename="./tests/test12.cpp" line="116">
                <OverallResults successes="1000" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="1001" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="1001" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="1002" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="1002" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test12.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/test12.cpp" line="33">
          <Section name="And given: an areaFilter with a single area only ('W06000001'), an empty measuresFilter, and an empty yearsFilter" filename="./tests/test12.cpp" line="1160">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test12.cpp" line="1167">
              <Section name="And: the Areas&lt;> instance has size 1" filename="./tests/test12.cpp" line="1171">
                <OverallResults successes="1" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test12.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/test12.cpp" line="33">
          <Section name="And given: an areaFilter with a single area only ('W06000001'), an empty measuresFilter, and an empty yearsFilter" filename="./tests/test12.cpp" line="1160">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test12.cpp" line="1167">
              <Section name="And: each imported Area in the Areas&lt;> instance has correct size (3)" filename="./tests/test12.cpp" line="1177">
                <OverallResults successes="1" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test12.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/test12.cpp" line="33">
          <Section name="And given: an areaFilter with a single area only ('W06000001'), an empty measuresFilter, and an empty yearsFilter" filename="./tests/test12.cpp" line="1160">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test12.cpp" line="1167">
              <Section name="And: attempting to retrieve an Area with an unexpected local authority code ('W06000002') throws a std::out_of_range error with exception message 'No area found matching W06000002'" filename="./tests/test12.cpp" line="1185">
                <OverallResults successes="2" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="3" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="4" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="4" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test12.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/test12.cpp" line="33">
          <Section name="And given: an areaFilter with a single area only ('W06000001'), an empty measuresFilter, and an empty yearsFilter" filename="./tests/test12.cpp" line="1160">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test12.cpp" line="1167">
              <Section name="And: each Measure in each imported Area in the Areas&lt;> instance has correct size (29)" filename="./tests/test12.cpp" line="1192">
                <OverallResults successes="3" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="4" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="4" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="5" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="5" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test12.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/test12.cpp" line="33">
          <Section name="And given: an areaFilter with a single area only ('W06000001'), an empty measuresFilter, and an empty yearsFilter" filename="./tests/test12.cpp" line="1160">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test12.cpp" line="1167">
              <Section name="And: each year in each Measure in each Area in the Areas&lt;> instance has the correct value" filename="./tests/test12.cpp" line="1200">
                <OverallResults successes="87" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="88" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="88" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="89" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="89" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test12.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/test12.cpp" line="33">
          <Section name="And given: an areaFilter with a single area only ('W06000001'), a measuresFilter with a single measure ('pop'), and an empty yearsFilter" filename="./tests/test12.cpp" line="1298">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test12.cpp" line="1306">
              <Section name="And: the Areas&lt;> instance has size 1" filename="./tests/test12.cpp" line="1310">
                <OverallResults successes="1" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test12.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/test12.cpp" line="33">
          <Section name="And given: an areaFilter with a single area only ('W06000001'), a measuresFilter with a single measure ('pop'), and an empty yearsFilter" filename="./tests/test12.cpp" line="1298">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test12.cpp" line="1306">
              <Section name="And: each imported Area in the Areas&lt;> instance has correct size (1)" filename="./tests/test12.cpp" line="1316">
                <OverallResults successes="1" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test12.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/test12.cpp" line="33">
          <Section name="And given: an areaFilter with a single area only ('W06000001'), a measuresFilter with a single measure ('pop'), and an empty yearsFilter" filename="./tests/test12.cpp" line="1298">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test12.cpp" line="1306">
              <Section name="And: attempting to retrieve an Area with an unexpected local authority code ('W06000002') throws a std::out_of_range error with exception message 'No area found matching W06000002'" filename="./tests/test12.cpp" line="1323">
                <OverallResults successes="2" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="3" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="4" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="4" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test12.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/test12.cpp" line="33">
          <Section name="And given: an areaFilter with a single area only ('W06000001'), a measuresFilter with a single measure ('pop'), and an empty yearsFilter" filename="./tests/test12.cpp" line="1298">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test12.cpp" line="1306">
              <Section name="And: attempting to retrieve a Measure with an unexpected codename ('dens') throws a std::out_of_range error with exception message 'No measure found matching dens'" filename="./tests/test12.cpp" line="1331">
                <OverallResults successes="2" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="3" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="4" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="4" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test12.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/test12.cpp" line="33">
          <Section name="And given: an areaFilter with a single area only ('W06000001'), a measuresFilter with a single measure ('pop'), and an empty yearsFilter" filename="./tests/test12.cpp" line="1298">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test12.cpp" line="1306">
              <Section name="And: each Measure in each imported Area in the Areas&lt;> instance has correct size (29)" filename="./tests/test12.cpp" line="1338">
                <OverallResults successes="1" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test12.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/test12.cpp" line="33">
          <Section name="And given: an areaFilter with a single area only ('W06000001'), a measuresFilter with a single measure ('pop'), and an empty yearsFilter" filename="./tests/test12.cpp" line="1298">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test12.cpp" line="1306">
              <Section name="And: each year in each Measure in each Area in the Areas&lt;> instance has the correct value" filename="./tests/test12.cpp" line="1344">
                <OverallResults successes="29" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="30" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="30" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="31" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="31" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test12.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/test12.cpp" line="33">
          <Section name="And given: an areaFilter with a single area only ('W06000001'), a measuresFilter wth a single measure ('pop'), and a yearsFilter with a range ('1991-1995')" filename="./tests/test12.cpp" line="1382">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test12.cpp" line="1390">
              <Section name="And: the Areas&lt;> instance has size 1" filename="./tests/test12.cpp" line="1394">
                <OverallResults successes="1" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test12.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/test12.cpp" line="33">
          <Section name="And given: an areaFilter with a single area only ('W06000001'), a measuresFilter wth a single measure ('pop'), and a yearsFilter with a range ('1991-1995')" filename="./tests/test12.cpp" line="1382">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test12.cpp" line="1390">
              <Section name="And: each imported Area in the Areas&lt;> instance has correct size (1)" filename="./tests/test12.cpp" line="1400">
                <OverallResults successes="1" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test12.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/test12.cpp" line="33">
          <Section name="And given: an areaFilter with a single area only ('W06000001'), a measuresFilter wth a single measure ('pop'), and a yearsFilter with a range ('1991-1995')" filename="./tests/test12.cpp" line="1382">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test12.cpp" line="1390">
              <Section name="And: attempting to retrieve an Area with an unexpected local authority code ('W06000002') throws a std::out_of_range error with exception message 'No area found matching W06000002'" filename="./tests/test12.cpp" line="1407">
                <OverallResults successes="2" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="3" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="4" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="4" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test12.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/test12.cpp" line="33">
          <Section name="And given: an areaFilter with a single area only ('W06000001'), a measuresFilter wth a single measure ('pop'), and a yearsFilter with a range ('1991-1995')" filename="./tests/test12.cpp" line="1382">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test12.cpp" line="1390">
              <Section name="And: attempting to retrieve a Measure with an unexpected codename ('dens') throws a std::out_of_range error with exception message 'No measure found matching dens'" filename="./tests/test12.cpp" line="1415">
                <OverallResults successes="2" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="3" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="4" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="4" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test12.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/test12.cpp" line="33">
          <Section name="And given: an areaFilter with a single area only ('W06000001'), a measuresFilter wth a single measure ('pop'), and a yearsFilter with a range ('1991-1995')" filename="./tests/test12.cpp" line="1382">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test12.cpp" line="1390">
              <Section name="And: each Measure in each imported Area in the Areas&lt;> instance has correct size (5)" filename="./tests/test12.cpp" line="1422">
                <OverallResults successes="1" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test12.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/test12.cpp" line="33">
          <Section name="And given: an areaFilter with a single area only ('W06000001'), a measuresFilter wth a single measure ('pop'), and a yearsFilter with a range ('1991-1995')" filename="./tests/test12.cpp" line="1382">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test12.cpp" line="1390">
              <Section name="And: attempting to retrieve a value with an unexpected year ('2000') throws a std::out_of_range error with exception message 'No value found for year 2000'" filename="./tests/test12.cpp" line="1429">
                <OverallResults successes="2" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="3" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="4" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="4" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/test12.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/test12.cpp" line="33">
          <Section name="And given: an areaFilter with a single area only ('W06000001'), a measuresFilter wth a single measure ('pop'), and a yearsFilter with a range ('1991-1995')" filename="./tests/test12.cpp" line="1382">
            <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/test12.cpp" line="1390">
              <Section name="And: each year in each Measure in each Area in the Areas&lt;> instance has the correct value" filename="./tests/test12.cpp" line="1436">
                <OverallResults successes="5" failures="0" expectedFailures="0"/>
              </Section>
              <OverallResults successes="6" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="6" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="7" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="7" failures="0" expectedFailures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: the year program argument can be parsed correctly [extended]" tags="[args][extended][years]" filename="./tests/testus1.cpp" line="25">
      <Section name="Given: a --years argument with a value" filename="./tests/testus1.cpp" line="27">
        <Section name="When: the value is numeric, but not nil and not four digits long ('25')" filename="./tests/testus1.cpp" line="29">
          <Section name="Then: a std::invalid_argument exception is thrown with the message 'Invalid input for years argument'" filename="./tests/testus1.cpp" line="40">
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a --years argument with a value" filename="./tests/testus1.cpp" line="27">
        <Section name="When: the value is two numeric values, but one is not nil and not four digits long ('25-2010')" filename="./tests/testus1.cpp" line="49">
          <Section name="Then: a std::invalid_argument exception is thrown with the message 'Invalid input for years argument'" filename="./tests/testus1.cpp" line="60">
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: a Measure object can be populated with values [extended]" tags="[Measure][extended][populate]" filename="./tests/testus2.cpp" line="22">
      <Section name="Given: a newly constructed Measure instance" filename="./tests/testus2.cpp" line="24">
        <Section name="When: there are two year:value pairs to insert, both with the same year" filename="./tests/testus2.cpp" line="30">
          <Section name="Then: they will both be emplaced without exception" filename="./tests/testus2.cpp" line="37">
            <Section name="And: the second value will have replaced the first value" filename="./tests/testus2.cpp" line="43">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: an Areas&lt;> instance can contain Area instances [extended]" tags="[Areas&lt;>][contain][extended]" filename="./tests/testus3.cpp" line="23">
      <Section name="Given: a newly constructed Areas&lt;>" filename="./tests/testus3.cpp" line="25">
        <Section name="And given: two newly constructed Area instances with the same local authority codes ('W06000011') but overlapping Measures" filename="./tests/testus3.cpp" line="29">
          <Section name="Then: the Area instances can be emplaced in the Areas&lt;> instance without exception" filename="./tests/testus3.cpp" line="50">
            <Section name="And: the names of the second Area instances will overwrite the first" filename="./tests/testus3.cpp" line="55">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: an Area instance can contain Measure instances [extended]" tags="[Area][Measures][extended]" filename="./tests/testus4.cpp" line="22">
      <Section name="Given: a newly constructed Area instance" filename="./tests/testus4.cpp" line="24">
        <Section name="And given: a newly constructed Measure instance ('Pop')" filename="./tests/testus4.cpp" line="29">
          <Section name="Then: the Measure instance can be emplace into the Area instance without exception" filename="./tests/testus4.cpp" line="36">
            <Section name="And: the Area instance size will be 1" filename="./tests/testus4.cpp" line="40">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Area instance" filename="./tests/testus4.cpp" line="24">
        <Section name="And given: a newly constructed Measure instance ('Pop')" filename="./tests/testus4.cpp" line="29">
          <Section name="Then: the Measure instance can be emplace into the Area instance without exception" filename="./tests/testus4.cpp" line="36">
            <Section name="And: the Measure instance can be retrieved without exception with a lowercase codename" filename="./tests/testus4.cpp" line="46">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Area instance" filename="./tests/testus4.cpp" line="24">
        <Section name="And given: a newly constructed Measure instance ('Pop')" filename="./tests/testus4.cpp" line="29">
          <Section name="Then: the Measure instance can be emplace into the Area instance without exception" filename="./tests/testus4.cpp" line="36">
            <Section name="And: the Measure instance is equal to the original" filename="./tests/testus4.cpp" line="52">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="2" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="2" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Area instance" filename="./tests/testus4.cpp" line="24">
        <Section name="And given: two newly constructed Measure instances with two different codenames ('pop', 'dens')" filename="./tests/testus4.cpp" line="63">
          <Section name="Then: the Measure instance2 can be emplace into the Area instance without exception" filename="./tests/testus4.cpp" line="73">
            <Section name="And: the Area instance size will be 2" filename="./tests/testus4.cpp" line="78">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="3" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Area instance" filename="./tests/testus4.cpp" line="24">
        <Section name="And given: two newly constructed Measure instances with two different codenames ('pop', 'dens')" filename="./tests/testus4.cpp" line="63">
          <Section name="Then: the Measure instance2 can be emplace into the Area instance without exception" filename="./tests/testus4.cpp" line="73">
            <Section name="And: the Measure instances can be retrieved without exception" filename="./tests/testus4.cpp" line="84">
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="4" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="4" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="4" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Area instance" filename="./tests/testus4.cpp" line="24">
        <Section name="And given: two newly constructed Measure instances with two different codenames ('pop', 'dens')" filename="./tests/testus4.cpp" line="63">
          <Section name="Then: the Measure instance2 can be emplace into the Area instance without exception" filename="./tests/testus4.cpp" line="73">
            <Section name="And: the Measure instances are equal to the original" filename="./tests/testus4.cpp" line="91">
              <OverallResults successes="2" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="4" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="4" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="4" failures="0" expectedFailures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: popu1009.json can be correctly parsed [extended for non-lowercase]" tags="[Areas&lt;>][extended][popu1009]" filename="./tests/testus5.cpp" line="23">
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/testus5.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/testus5.cpp" line="33">
          <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/testus5.cpp" line="40">
            <Section name="And: the Areas&lt;> instance has size 12" filename="./tests/testus5.cpp" line="44">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/testus5.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/testus5.cpp" line="33">
          <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/testus5.cpp" line="40">
            <Section name="And: each Measure in each Area in the Areas&lt;> instance has correct size (mixed) [non-lowercase measure]" filename="./tests/testus5.cpp" line="50">
              <OverallResults successes="3" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="4" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="5" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="5" failures="0" expectedFailures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: Statistics can be correctly calculated from imported data" tags="[Areas&lt;>][popu1009][statistics]" filename="./tests/testus6.cpp" line="23">
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/testus6.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/testus6.cpp" line="33">
          <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/testus6.cpp" line="40">
            <Section name="And: the Areas&lt;> instance has size 12" filename="./tests/testus6.cpp" line="44">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/testus6.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/testus6.cpp" line="33">
          <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/testus6.cpp" line="40">
            <Section name="And: the difference between the first and last values will be correct ('mixed')" filename="./tests/testus6.cpp" line="50">
              <OverallResults successes="36" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="37" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="38" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="38" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/testus6.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/testus6.cpp" line="33">
          <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/testus6.cpp" line="40">
            <Section name="And: the difference between the first and last values will be correct ('mixed')" filename="./tests/testus6.cpp" line="102">
              <OverallResults successes="36" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="37" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="38" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="38" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/testus6.cpp" line="29">
        <Section name="And given: a valid popu1009.json file as an open std::istream" filename="./tests/testus6.cpp" line="33">
          <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/testus6.cpp" line="40">
            <Section name="And: the average/mean values will be correct ('mixed')" filename="./tests/testus6.cpp" line="154">
              <OverallResults successes="36" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="37" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="38" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="38" failures="0" expectedFailures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: econ0080.json can be correctly parsed" tags="[Areas&lt;>][econ0080]" filename="./tests/testus7.cpp" line="23">
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/testus7.cpp" line="29">
        <Section name="And given: a valid econ0080.json file as an open std::istream" filename="./tests/testus7.cpp" line="33">
          <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/testus7.cpp" line="40">
            <Section name="And: the Areas&lt;> instance has size 44" filename="./tests/testus7.cpp" line="44">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/testus7.cpp" line="29">
        <Section name="And given: a valid econ0080.json file as an open std::istream" filename="./tests/testus7.cpp" line="33">
          <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/testus7.cpp" line="40">
            <Section name="And: each Area in the Areas&lt;> instance has the correct size (8)" filename="./tests/testus7.cpp" line="50">
              <OverallResults successes="44" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="45" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="46" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="46" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/testus7.cpp" line="29">
        <Section name="And given: a valid econ0080.json file as an open std::istream" filename="./tests/testus7.cpp" line="33">
          <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/testus7.cpp" line="40">
            <Section name="And: each Measure in each Area in the Areas&lt;> instance has the correct size (mixed)" filename="./tests/testus7.cpp" line="99">
              <OverallResults successes="352" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="353" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="354" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="354" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/testus7.cpp" line="29">
        <Section name="And given: a valid econ0080.json file as an open std::istream" filename="./tests/testus7.cpp" line="33">
          <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/testus7.cpp" line="40">
            <Section name="And: each year in each Measure in each Area in the Areas&lt;> instance has the correct value (mixed)" filename="./tests/testus7.cpp" line="499">
              <OverallResults successes="1000" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="1001" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="1002" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="1002" failures="0" expectedFailures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: envi0201.json can be correctly parsed" tags="[Areas&lt;>][envi0201]" filename="./tests/testus8.cpp" line="23">
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/testus8.cpp" line="29">
        <Section name="And given: a valid envi0201.json file as an open std::istream" filename="./tests/testus8.cpp" line="33">
          <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/testus8.cpp" line="40">
            <Section name="And: the Areas&lt;> instance has size 30" filename="./tests/testus8.cpp" line="44">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/testus8.cpp" line="29">
        <Section name="And given: a valid envi0201.json file as an open std::istream" filename="./tests/testus8.cpp" line="33">
          <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/testus8.cpp" line="40">
            <Section name="And: each Area in the Areas&lt;> instance has the correct size (30)" filename="./tests/testus8.cpp" line="50">
              <OverallResults successes="30" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="31" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="32" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="32" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/testus8.cpp" line="29">
        <Section name="And given: a valid envi0201.json file as an open std::istream" filename="./tests/testus8.cpp" line="33">
          <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/testus8.cpp" line="40">
            <Section name="And: each Measure in each Area in the Areas&lt;> instance has the correct size (mixed)" filename="./tests/testus8.cpp" line="85">
              <OverallResults successes="90" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="91" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="92" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="92" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/testus8.cpp" line="29">
        <Section name="And given: a valid envi0201.json file as an open std::istream" filename="./tests/testus8.cpp" line="33">
          <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/testus8.cpp" line="40">
            <Section name="And: each Measure in each Area in the Areas&lt;> instance has the correct value (mixed)" filename="./tests/testus8.cpp" line="209">
              <OverallResults successes="1000" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="1001" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="1002" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="1002" failures="0" expectedFailures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <TestCase name="Scenario: tran0152.json can be correctly parsed" tags="[Areas&lt;>][tran0152]" filename="./tests/testus9.cpp" line="23">
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/testus9.cpp" line="29">
        <Section name="And given: a valid tran0152.json file as an open std::istream" filename="./tests/testus9.cpp" line="33">
          <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/testus9.cpp" line="40">
            <Section name="And: the Areas&lt;> instance has size 26" filename="./tests/testus9.cpp" line="44">
              <OverallResults successes="1" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="2" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="3" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="3" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/testus9.cpp" line="29">
        <Section name="And given: a valid tran0152.json file as an open std::istream" filename="./tests/testus9.cpp" line="33">
          <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/testus9.cpp" line="40">
            <Section name="And: each Area in the Areas&lt;> instance has the correct size (1)" filename="./tests/testus9.cpp" line="50">
              <OverallResults successes="26" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="27" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="28" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="28" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/testus9.cpp" line="29">
        <Section name="And given: a valid tran0152.json file as an open std::istream" filename="./tests/testus9.cpp" line="33">
          <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/testus9.cpp" line="40">
            <Section name="And: each Measure in each Area in the Areas&lt;> instance has the correct size (mixed)" filename="./tests/testus9.cpp" line="81">
              <OverallResults successes="26" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="27" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="28" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="28" failures="0" expectedFailures="0"/>
      </Section>
      <Section name="Given: a newly constructed Areas&lt;> instance" filename="./tests/testus9.cpp" line="29">
        <Section name="And given: a valid tran0152.json file as an open std::istream" filename="./tests/testus9.cpp" line="33">
          <Section name="Then: the Areas&lt;> instance will be populated without exception" filename="./tests/testus9.cpp" line="40">
            <Section name="And: each Measure in each Area in the Areas&lt;> instance has the correct value (mixed)" filename="./tests/testus9.cpp" line="112">
              <OverallResults successes="442" failures="0" expectedFailures="0"/>
            </Section>
            <OverallResults successes="443" failures="0" expectedFailures="0"/>
          </Section>
          <OverallResults successes="444" failures="0" expectedFailures="0"/>
        </Section>
        <OverallResults successes="444" failures="0" expectedFailures="0"/>
      </Section>
      <OverallResult success="true"/>
    </TestCase>
    <OverallResults successes="4695" failures="0" expectedFailures="0"/>
  </Group>
  <OverallResults successes="4695" failures="0" expectedFailures="0"/>
</Catch>
